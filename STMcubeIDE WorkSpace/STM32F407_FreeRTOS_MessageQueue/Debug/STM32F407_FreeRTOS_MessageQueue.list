
STM32F407_FreeRTOS_MessageQueue.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000027a4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000064  08002934  08002934  00012934  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08002998  08002998  00012998  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080029a0  080029a0  000129a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080029a4  080029a4  000129a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000008  20000000  080029a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  00020008  2**0
                  CONTENTS
  8 .bss          00003df0  20000008  20000008  00020008  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  20003df8  20003df8  00020008  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  00020008  2**0
                  CONTENTS, READONLY
 11 .debug_info   000193d4  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 000033bf  00000000  00000000  0003940c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00008c13  00000000  00000000  0003c7cb  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000cd8  00000000  00000000  000453e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000010c0  00000000  00000000  000460b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00022a77  00000000  00000000  00047178  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000d122  00000000  00000000  00069bef  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000cb676  00000000  00000000  00076d11  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00142387  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002580  00000000  00000000  00142404  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000008 	.word	0x20000008
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800291c 	.word	0x0800291c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000000c 	.word	0x2000000c
 80001cc:	0800291c 	.word	0x0800291c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b972 	b.w	80004dc <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9e08      	ldr	r6, [sp, #32]
 8000216:	4604      	mov	r4, r0
 8000218:	4688      	mov	r8, r1
 800021a:	2b00      	cmp	r3, #0
 800021c:	d14b      	bne.n	80002b6 <__udivmoddi4+0xa6>
 800021e:	428a      	cmp	r2, r1
 8000220:	4615      	mov	r5, r2
 8000222:	d967      	bls.n	80002f4 <__udivmoddi4+0xe4>
 8000224:	fab2 f282 	clz	r2, r2
 8000228:	b14a      	cbz	r2, 800023e <__udivmoddi4+0x2e>
 800022a:	f1c2 0720 	rsb	r7, r2, #32
 800022e:	fa01 f302 	lsl.w	r3, r1, r2
 8000232:	fa20 f707 	lsr.w	r7, r0, r7
 8000236:	4095      	lsls	r5, r2
 8000238:	ea47 0803 	orr.w	r8, r7, r3
 800023c:	4094      	lsls	r4, r2
 800023e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000242:	0c23      	lsrs	r3, r4, #16
 8000244:	fbb8 f7fe 	udiv	r7, r8, lr
 8000248:	fa1f fc85 	uxth.w	ip, r5
 800024c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000250:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000254:	fb07 f10c 	mul.w	r1, r7, ip
 8000258:	4299      	cmp	r1, r3
 800025a:	d909      	bls.n	8000270 <__udivmoddi4+0x60>
 800025c:	18eb      	adds	r3, r5, r3
 800025e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000262:	f080 811b 	bcs.w	800049c <__udivmoddi4+0x28c>
 8000266:	4299      	cmp	r1, r3
 8000268:	f240 8118 	bls.w	800049c <__udivmoddi4+0x28c>
 800026c:	3f02      	subs	r7, #2
 800026e:	442b      	add	r3, r5
 8000270:	1a5b      	subs	r3, r3, r1
 8000272:	b2a4      	uxth	r4, r4
 8000274:	fbb3 f0fe 	udiv	r0, r3, lr
 8000278:	fb0e 3310 	mls	r3, lr, r0, r3
 800027c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000280:	fb00 fc0c 	mul.w	ip, r0, ip
 8000284:	45a4      	cmp	ip, r4
 8000286:	d909      	bls.n	800029c <__udivmoddi4+0x8c>
 8000288:	192c      	adds	r4, r5, r4
 800028a:	f100 33ff 	add.w	r3, r0, #4294967295
 800028e:	f080 8107 	bcs.w	80004a0 <__udivmoddi4+0x290>
 8000292:	45a4      	cmp	ip, r4
 8000294:	f240 8104 	bls.w	80004a0 <__udivmoddi4+0x290>
 8000298:	3802      	subs	r0, #2
 800029a:	442c      	add	r4, r5
 800029c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002a0:	eba4 040c 	sub.w	r4, r4, ip
 80002a4:	2700      	movs	r7, #0
 80002a6:	b11e      	cbz	r6, 80002b0 <__udivmoddi4+0xa0>
 80002a8:	40d4      	lsrs	r4, r2
 80002aa:	2300      	movs	r3, #0
 80002ac:	e9c6 4300 	strd	r4, r3, [r6]
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	428b      	cmp	r3, r1
 80002b8:	d909      	bls.n	80002ce <__udivmoddi4+0xbe>
 80002ba:	2e00      	cmp	r6, #0
 80002bc:	f000 80eb 	beq.w	8000496 <__udivmoddi4+0x286>
 80002c0:	2700      	movs	r7, #0
 80002c2:	e9c6 0100 	strd	r0, r1, [r6]
 80002c6:	4638      	mov	r0, r7
 80002c8:	4639      	mov	r1, r7
 80002ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ce:	fab3 f783 	clz	r7, r3
 80002d2:	2f00      	cmp	r7, #0
 80002d4:	d147      	bne.n	8000366 <__udivmoddi4+0x156>
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d302      	bcc.n	80002e0 <__udivmoddi4+0xd0>
 80002da:	4282      	cmp	r2, r0
 80002dc:	f200 80fa 	bhi.w	80004d4 <__udivmoddi4+0x2c4>
 80002e0:	1a84      	subs	r4, r0, r2
 80002e2:	eb61 0303 	sbc.w	r3, r1, r3
 80002e6:	2001      	movs	r0, #1
 80002e8:	4698      	mov	r8, r3
 80002ea:	2e00      	cmp	r6, #0
 80002ec:	d0e0      	beq.n	80002b0 <__udivmoddi4+0xa0>
 80002ee:	e9c6 4800 	strd	r4, r8, [r6]
 80002f2:	e7dd      	b.n	80002b0 <__udivmoddi4+0xa0>
 80002f4:	b902      	cbnz	r2, 80002f8 <__udivmoddi4+0xe8>
 80002f6:	deff      	udf	#255	; 0xff
 80002f8:	fab2 f282 	clz	r2, r2
 80002fc:	2a00      	cmp	r2, #0
 80002fe:	f040 808f 	bne.w	8000420 <__udivmoddi4+0x210>
 8000302:	1b49      	subs	r1, r1, r5
 8000304:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000308:	fa1f f885 	uxth.w	r8, r5
 800030c:	2701      	movs	r7, #1
 800030e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000312:	0c23      	lsrs	r3, r4, #16
 8000314:	fb0e 111c 	mls	r1, lr, ip, r1
 8000318:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800031c:	fb08 f10c 	mul.w	r1, r8, ip
 8000320:	4299      	cmp	r1, r3
 8000322:	d907      	bls.n	8000334 <__udivmoddi4+0x124>
 8000324:	18eb      	adds	r3, r5, r3
 8000326:	f10c 30ff 	add.w	r0, ip, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x122>
 800032c:	4299      	cmp	r1, r3
 800032e:	f200 80cd 	bhi.w	80004cc <__udivmoddi4+0x2bc>
 8000332:	4684      	mov	ip, r0
 8000334:	1a59      	subs	r1, r3, r1
 8000336:	b2a3      	uxth	r3, r4
 8000338:	fbb1 f0fe 	udiv	r0, r1, lr
 800033c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000340:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000344:	fb08 f800 	mul.w	r8, r8, r0
 8000348:	45a0      	cmp	r8, r4
 800034a:	d907      	bls.n	800035c <__udivmoddi4+0x14c>
 800034c:	192c      	adds	r4, r5, r4
 800034e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0x14a>
 8000354:	45a0      	cmp	r8, r4
 8000356:	f200 80b6 	bhi.w	80004c6 <__udivmoddi4+0x2b6>
 800035a:	4618      	mov	r0, r3
 800035c:	eba4 0408 	sub.w	r4, r4, r8
 8000360:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000364:	e79f      	b.n	80002a6 <__udivmoddi4+0x96>
 8000366:	f1c7 0c20 	rsb	ip, r7, #32
 800036a:	40bb      	lsls	r3, r7
 800036c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000370:	ea4e 0e03 	orr.w	lr, lr, r3
 8000374:	fa01 f407 	lsl.w	r4, r1, r7
 8000378:	fa20 f50c 	lsr.w	r5, r0, ip
 800037c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000380:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000384:	4325      	orrs	r5, r4
 8000386:	fbb3 f9f8 	udiv	r9, r3, r8
 800038a:	0c2c      	lsrs	r4, r5, #16
 800038c:	fb08 3319 	mls	r3, r8, r9, r3
 8000390:	fa1f fa8e 	uxth.w	sl, lr
 8000394:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000398:	fb09 f40a 	mul.w	r4, r9, sl
 800039c:	429c      	cmp	r4, r3
 800039e:	fa02 f207 	lsl.w	r2, r2, r7
 80003a2:	fa00 f107 	lsl.w	r1, r0, r7
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b0>
 80003a8:	eb1e 0303 	adds.w	r3, lr, r3
 80003ac:	f109 30ff 	add.w	r0, r9, #4294967295
 80003b0:	f080 8087 	bcs.w	80004c2 <__udivmoddi4+0x2b2>
 80003b4:	429c      	cmp	r4, r3
 80003b6:	f240 8084 	bls.w	80004c2 <__udivmoddi4+0x2b2>
 80003ba:	f1a9 0902 	sub.w	r9, r9, #2
 80003be:	4473      	add	r3, lr
 80003c0:	1b1b      	subs	r3, r3, r4
 80003c2:	b2ad      	uxth	r5, r5
 80003c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003c8:	fb08 3310 	mls	r3, r8, r0, r3
 80003cc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003d0:	fb00 fa0a 	mul.w	sl, r0, sl
 80003d4:	45a2      	cmp	sl, r4
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1da>
 80003d8:	eb1e 0404 	adds.w	r4, lr, r4
 80003dc:	f100 33ff 	add.w	r3, r0, #4294967295
 80003e0:	d26b      	bcs.n	80004ba <__udivmoddi4+0x2aa>
 80003e2:	45a2      	cmp	sl, r4
 80003e4:	d969      	bls.n	80004ba <__udivmoddi4+0x2aa>
 80003e6:	3802      	subs	r0, #2
 80003e8:	4474      	add	r4, lr
 80003ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003ee:	fba0 8902 	umull	r8, r9, r0, r2
 80003f2:	eba4 040a 	sub.w	r4, r4, sl
 80003f6:	454c      	cmp	r4, r9
 80003f8:	46c2      	mov	sl, r8
 80003fa:	464b      	mov	r3, r9
 80003fc:	d354      	bcc.n	80004a8 <__udivmoddi4+0x298>
 80003fe:	d051      	beq.n	80004a4 <__udivmoddi4+0x294>
 8000400:	2e00      	cmp	r6, #0
 8000402:	d069      	beq.n	80004d8 <__udivmoddi4+0x2c8>
 8000404:	ebb1 050a 	subs.w	r5, r1, sl
 8000408:	eb64 0403 	sbc.w	r4, r4, r3
 800040c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000410:	40fd      	lsrs	r5, r7
 8000412:	40fc      	lsrs	r4, r7
 8000414:	ea4c 0505 	orr.w	r5, ip, r5
 8000418:	e9c6 5400 	strd	r5, r4, [r6]
 800041c:	2700      	movs	r7, #0
 800041e:	e747      	b.n	80002b0 <__udivmoddi4+0xa0>
 8000420:	f1c2 0320 	rsb	r3, r2, #32
 8000424:	fa20 f703 	lsr.w	r7, r0, r3
 8000428:	4095      	lsls	r5, r2
 800042a:	fa01 f002 	lsl.w	r0, r1, r2
 800042e:	fa21 f303 	lsr.w	r3, r1, r3
 8000432:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000436:	4338      	orrs	r0, r7
 8000438:	0c01      	lsrs	r1, r0, #16
 800043a:	fbb3 f7fe 	udiv	r7, r3, lr
 800043e:	fa1f f885 	uxth.w	r8, r5
 8000442:	fb0e 3317 	mls	r3, lr, r7, r3
 8000446:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800044a:	fb07 f308 	mul.w	r3, r7, r8
 800044e:	428b      	cmp	r3, r1
 8000450:	fa04 f402 	lsl.w	r4, r4, r2
 8000454:	d907      	bls.n	8000466 <__udivmoddi4+0x256>
 8000456:	1869      	adds	r1, r5, r1
 8000458:	f107 3cff 	add.w	ip, r7, #4294967295
 800045c:	d22f      	bcs.n	80004be <__udivmoddi4+0x2ae>
 800045e:	428b      	cmp	r3, r1
 8000460:	d92d      	bls.n	80004be <__udivmoddi4+0x2ae>
 8000462:	3f02      	subs	r7, #2
 8000464:	4429      	add	r1, r5
 8000466:	1acb      	subs	r3, r1, r3
 8000468:	b281      	uxth	r1, r0
 800046a:	fbb3 f0fe 	udiv	r0, r3, lr
 800046e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000472:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000476:	fb00 f308 	mul.w	r3, r0, r8
 800047a:	428b      	cmp	r3, r1
 800047c:	d907      	bls.n	800048e <__udivmoddi4+0x27e>
 800047e:	1869      	adds	r1, r5, r1
 8000480:	f100 3cff 	add.w	ip, r0, #4294967295
 8000484:	d217      	bcs.n	80004b6 <__udivmoddi4+0x2a6>
 8000486:	428b      	cmp	r3, r1
 8000488:	d915      	bls.n	80004b6 <__udivmoddi4+0x2a6>
 800048a:	3802      	subs	r0, #2
 800048c:	4429      	add	r1, r5
 800048e:	1ac9      	subs	r1, r1, r3
 8000490:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000494:	e73b      	b.n	800030e <__udivmoddi4+0xfe>
 8000496:	4637      	mov	r7, r6
 8000498:	4630      	mov	r0, r6
 800049a:	e709      	b.n	80002b0 <__udivmoddi4+0xa0>
 800049c:	4607      	mov	r7, r0
 800049e:	e6e7      	b.n	8000270 <__udivmoddi4+0x60>
 80004a0:	4618      	mov	r0, r3
 80004a2:	e6fb      	b.n	800029c <__udivmoddi4+0x8c>
 80004a4:	4541      	cmp	r1, r8
 80004a6:	d2ab      	bcs.n	8000400 <__udivmoddi4+0x1f0>
 80004a8:	ebb8 0a02 	subs.w	sl, r8, r2
 80004ac:	eb69 020e 	sbc.w	r2, r9, lr
 80004b0:	3801      	subs	r0, #1
 80004b2:	4613      	mov	r3, r2
 80004b4:	e7a4      	b.n	8000400 <__udivmoddi4+0x1f0>
 80004b6:	4660      	mov	r0, ip
 80004b8:	e7e9      	b.n	800048e <__udivmoddi4+0x27e>
 80004ba:	4618      	mov	r0, r3
 80004bc:	e795      	b.n	80003ea <__udivmoddi4+0x1da>
 80004be:	4667      	mov	r7, ip
 80004c0:	e7d1      	b.n	8000466 <__udivmoddi4+0x256>
 80004c2:	4681      	mov	r9, r0
 80004c4:	e77c      	b.n	80003c0 <__udivmoddi4+0x1b0>
 80004c6:	3802      	subs	r0, #2
 80004c8:	442c      	add	r4, r5
 80004ca:	e747      	b.n	800035c <__udivmoddi4+0x14c>
 80004cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d0:	442b      	add	r3, r5
 80004d2:	e72f      	b.n	8000334 <__udivmoddi4+0x124>
 80004d4:	4638      	mov	r0, r7
 80004d6:	e708      	b.n	80002ea <__udivmoddi4+0xda>
 80004d8:	4637      	mov	r7, r6
 80004da:	e6e9      	b.n	80002b0 <__udivmoddi4+0xa0>

080004dc <__aeabi_idiv0>:
 80004dc:	4770      	bx	lr
 80004de:	bf00      	nop

080004e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80004e0:	b510      	push	{r4, lr}
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock/1000U);
 80004e2:	4b08      	ldr	r3, [pc, #32]	; (8000504 <HAL_InitTick+0x24>)
{
 80004e4:	4604      	mov	r4, r0
  HAL_SYSTICK_Config(SystemCoreClock/1000U);
 80004e6:	6818      	ldr	r0, [r3, #0]
 80004e8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80004ec:	fbb0 f0f3 	udiv	r0, r0, r3
 80004f0:	f000 f878 	bl	80005e4 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80004f4:	2200      	movs	r2, #0
 80004f6:	4621      	mov	r1, r4
 80004f8:	f04f 30ff 	mov.w	r0, #4294967295
 80004fc:	f000 f83e 	bl	800057c <HAL_NVIC_SetPriority>

  /* Return function status */
  return HAL_OK;
}
 8000500:	2000      	movs	r0, #0
 8000502:	bd10      	pop	{r4, pc}
 8000504:	20000004 	.word	0x20000004

08000508 <HAL_Init>:
{
 8000508:	b508      	push	{r3, lr}
   __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800050a:	4b0b      	ldr	r3, [pc, #44]	; (8000538 <HAL_Init+0x30>)
 800050c:	681a      	ldr	r2, [r3, #0]
 800050e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000512:	601a      	str	r2, [r3, #0]
   __HAL_FLASH_DATA_CACHE_ENABLE();
 8000514:	681a      	ldr	r2, [r3, #0]
 8000516:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800051a:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800051c:	681a      	ldr	r2, [r3, #0]
 800051e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000522:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000524:	2003      	movs	r0, #3
 8000526:	f000 f817 	bl	8000558 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800052a:	200f      	movs	r0, #15
 800052c:	f7ff ffd8 	bl	80004e0 <HAL_InitTick>
  HAL_MspInit();
 8000530:	f002 f8f6 	bl	8002720 <HAL_MspInit>
}
 8000534:	2000      	movs	r0, #0
 8000536:	bd08      	pop	{r3, pc}
 8000538:	40023c00 	.word	0x40023c00

0800053c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 800053c:	4a02      	ldr	r2, [pc, #8]	; (8000548 <HAL_IncTick+0xc>)
 800053e:	6813      	ldr	r3, [r2, #0]
 8000540:	3301      	adds	r3, #1
 8000542:	6013      	str	r3, [r2, #0]
}
 8000544:	4770      	bx	lr
 8000546:	bf00      	nop
 8000548:	20003d70 	.word	0x20003d70

0800054c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800054c:	4b01      	ldr	r3, [pc, #4]	; (8000554 <HAL_GetTick+0x8>)
 800054e:	6818      	ldr	r0, [r3, #0]
}
 8000550:	4770      	bx	lr
 8000552:	bf00      	nop
 8000554:	20003d70 	.word	0x20003d70

08000558 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000558:	4a07      	ldr	r2, [pc, #28]	; (8000578 <HAL_NVIC_SetPriorityGrouping+0x20>)
 800055a:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800055c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000560:	041b      	lsls	r3, r3, #16
 8000562:	0c1b      	lsrs	r3, r3, #16
 8000564:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000568:	0200      	lsls	r0, r0, #8
 800056a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800056e:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 8000572:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000574:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8000576:	4770      	bx	lr
 8000578:	e000ed00 	.word	0xe000ed00

0800057c <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800057c:	4b17      	ldr	r3, [pc, #92]	; (80005dc <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800057e:	b570      	push	{r4, r5, r6, lr}
 8000580:	68dc      	ldr	r4, [r3, #12]
 8000582:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000586:	f1c4 0507 	rsb	r5, r4, #7
 800058a:	2d04      	cmp	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800058c:	f104 0304 	add.w	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000590:	bf28      	it	cs
 8000592:	2504      	movcs	r5, #4

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000594:	f04f 36ff 	mov.w	r6, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000598:	2b06      	cmp	r3, #6
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800059a:	fa06 f305 	lsl.w	r3, r6, r5
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800059e:	bf8c      	ite	hi
 80005a0:	3c03      	subhi	r4, #3
 80005a2:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005a4:	ea21 0303 	bic.w	r3, r1, r3
 80005a8:	40a3      	lsls	r3, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80005aa:	fa06 f404 	lsl.w	r4, r6, r4
 80005ae:	ea22 0404 	bic.w	r4, r2, r4
  if ((int32_t)(IRQn) < 0)
 80005b2:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005b4:	ea43 0304 	orr.w	r3, r3, r4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005b8:	bfa8      	it	ge
 80005ba:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
 80005be:	ea4f 1303 	mov.w	r3, r3, lsl #4
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005c2:	bfbc      	itt	lt
 80005c4:	f000 000f 	andlt.w	r0, r0, #15
 80005c8:	4a05      	ldrlt	r2, [pc, #20]	; (80005e0 <HAL_NVIC_SetPriority+0x64>)
 80005ca:	b2db      	uxtb	r3, r3
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005cc:	bfaa      	itet	ge
 80005ce:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005d2:	5413      	strblt	r3, [r2, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005d4:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80005d8:	bd70      	pop	{r4, r5, r6, pc}
 80005da:	bf00      	nop
 80005dc:	e000ed00 	.word	0xe000ed00
 80005e0:	e000ed14 	.word	0xe000ed14

080005e4 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80005e4:	3801      	subs	r0, #1
 80005e6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80005ea:	d20a      	bcs.n	8000602 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80005ec:	4b06      	ldr	r3, [pc, #24]	; (8000608 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005ee:	4a07      	ldr	r2, [pc, #28]	; (800060c <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80005f0:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005f2:	21f0      	movs	r1, #240	; 0xf0
 80005f4:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80005f8:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80005fa:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80005fc:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80005fe:	601a      	str	r2, [r3, #0]
 8000600:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000602:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000604:	4770      	bx	lr
 8000606:	bf00      	nop
 8000608:	e000e010 	.word	0xe000e010
 800060c:	e000ed00 	.word	0xe000ed00

08000610 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000610:	4b04      	ldr	r3, [pc, #16]	; (8000624 <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000612:	681a      	ldr	r2, [r3, #0]
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000614:	2804      	cmp	r0, #4
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000616:	bf0c      	ite	eq
 8000618:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 800061c:	f022 0204 	bicne.w	r2, r2, #4
 8000620:	601a      	str	r2, [r3, #0]
  }
}
 8000622:	4770      	bx	lr
 8000624:	e000e010 	.word	0xe000e010

08000628 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000628:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800062c:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800062e:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000630:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 80007e0 <HAL_GPIO_Init+0x1b8>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000634:	4a68      	ldr	r2, [pc, #416]	; (80007d8 <HAL_GPIO_Init+0x1b0>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000636:	f8df 91ac 	ldr.w	r9, [pc, #428]	; 80007e4 <HAL_GPIO_Init+0x1bc>
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800063a:	9301      	str	r3, [sp, #4]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800063c:	2300      	movs	r3, #0
    ioposition = 0x01U << position;
 800063e:	f04f 0c01 	mov.w	ip, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000642:	9c01      	ldr	r4, [sp, #4]
    ioposition = 0x01U << position;
 8000644:	fa0c fc03 	lsl.w	ip, ip, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000648:	ea04 060c 	and.w	r6, r4, ip
    if(iocurrent == ioposition)
 800064c:	45b4      	cmp	ip, r6
 800064e:	f040 80ae 	bne.w	80007ae <HAL_GPIO_Init+0x186>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000652:	684c      	ldr	r4, [r1, #4]
 8000654:	f024 0710 	bic.w	r7, r4, #16
 8000658:	2f02      	cmp	r7, #2
 800065a:	d116      	bne.n	800068a <HAL_GPIO_Init+0x62>
        temp = GPIOx->AFR[position >> 3U];
 800065c:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 8000660:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000664:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8000668:	f8da 5020 	ldr.w	r5, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800066c:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8000670:	f04f 0e0f 	mov.w	lr, #15
 8000674:	fa0e fe0b 	lsl.w	lr, lr, fp
 8000678:	ea25 0e0e 	bic.w	lr, r5, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800067c:	690d      	ldr	r5, [r1, #16]
 800067e:	fa05 f50b 	lsl.w	r5, r5, fp
 8000682:	ea45 050e 	orr.w	r5, r5, lr
        GPIOx->AFR[position >> 3U] = temp;
 8000686:	f8ca 5020 	str.w	r5, [sl, #32]
 800068a:	ea4f 0a43 	mov.w	sl, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800068e:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 8000690:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000694:	fa05 f50a 	lsl.w	r5, r5, sl
 8000698:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800069a:	f004 0e03 	and.w	lr, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800069e:	ea05 0b0b 	and.w	fp, r5, fp
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80006a2:	fa0e fe0a 	lsl.w	lr, lr, sl
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80006a6:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80006a8:	ea4e 0e0b 	orr.w	lr, lr, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80006ac:	2f01      	cmp	r7, #1
      GPIOx->MODER = temp;
 80006ae:	f8c0 e000 	str.w	lr, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80006b2:	d811      	bhi.n	80006d8 <HAL_GPIO_Init+0xb0>
        temp = GPIOx->OSPEEDR; 
 80006b4:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80006b6:	ea07 0b05 	and.w	fp, r7, r5
        temp |= (GPIO_Init->Speed << (position * 2U));
 80006ba:	68cf      	ldr	r7, [r1, #12]
 80006bc:	fa07 fe0a 	lsl.w	lr, r7, sl
 80006c0:	ea4e 070b 	orr.w	r7, lr, fp
        GPIOx->OSPEEDR = temp;
 80006c4:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 80006c6:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80006c8:	ea27 0c0c 	bic.w	ip, r7, ip
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80006cc:	f3c4 1700 	ubfx	r7, r4, #4, #1
 80006d0:	409f      	lsls	r7, r3
 80006d2:	ea47 070c 	orr.w	r7, r7, ip
        GPIOx->OTYPER = temp;
 80006d6:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 80006d8:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80006da:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80006dc:	688f      	ldr	r7, [r1, #8]
 80006de:	fa07 f70a 	lsl.w	r7, r7, sl
 80006e2:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 80006e4:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80006e6:	00e5      	lsls	r5, r4, #3
 80006e8:	d561      	bpl.n	80007ae <HAL_GPIO_Init+0x186>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006ea:	f04f 0b00 	mov.w	fp, #0
 80006ee:	f8cd b00c 	str.w	fp, [sp, #12]
 80006f2:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80006f6:	4d39      	ldr	r5, [pc, #228]	; (80007dc <HAL_GPIO_Init+0x1b4>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006f8:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 80006fc:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 8000700:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 8000704:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 8000708:	9703      	str	r7, [sp, #12]
 800070a:	9f03      	ldr	r7, [sp, #12]
 800070c:	f023 0703 	bic.w	r7, r3, #3
 8000710:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8000714:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000718:	f003 0e03 	and.w	lr, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 800071c:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000720:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8000724:	f04f 0c0f 	mov.w	ip, #15
 8000728:	fa0c fc0e 	lsl.w	ip, ip, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800072c:	42a8      	cmp	r0, r5
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800072e:	ea2a 0c0c 	bic.w	ip, sl, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000732:	d043      	beq.n	80007bc <HAL_GPIO_Init+0x194>
 8000734:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000738:	42a8      	cmp	r0, r5
 800073a:	d041      	beq.n	80007c0 <HAL_GPIO_Init+0x198>
 800073c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000740:	42a8      	cmp	r0, r5
 8000742:	d03f      	beq.n	80007c4 <HAL_GPIO_Init+0x19c>
 8000744:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000748:	42a8      	cmp	r0, r5
 800074a:	d03d      	beq.n	80007c8 <HAL_GPIO_Init+0x1a0>
 800074c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000750:	42a8      	cmp	r0, r5
 8000752:	d03b      	beq.n	80007cc <HAL_GPIO_Init+0x1a4>
 8000754:	4548      	cmp	r0, r9
 8000756:	d03b      	beq.n	80007d0 <HAL_GPIO_Init+0x1a8>
 8000758:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 800075c:	42a8      	cmp	r0, r5
 800075e:	d039      	beq.n	80007d4 <HAL_GPIO_Init+0x1ac>
 8000760:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000764:	42a8      	cmp	r0, r5
 8000766:	bf14      	ite	ne
 8000768:	2508      	movne	r5, #8
 800076a:	2507      	moveq	r5, #7
 800076c:	fa05 f50e 	lsl.w	r5, r5, lr
 8000770:	ea45 050c 	orr.w	r5, r5, ip
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000774:	60bd      	str	r5, [r7, #8]
        temp = EXTI->IMR;
 8000776:	6815      	ldr	r5, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8000778:	43f7      	mvns	r7, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800077a:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 800077e:	bf0c      	ite	eq
 8000780:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8000782:	4335      	orrne	r5, r6
        }
        EXTI->IMR = temp;
 8000784:	6015      	str	r5, [r2, #0]

        temp = EXTI->EMR;
 8000786:	6855      	ldr	r5, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000788:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 800078c:	bf0c      	ite	eq
 800078e:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8000790:	4335      	orrne	r5, r6
        }
        EXTI->EMR = temp;
 8000792:	6055      	str	r5, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000794:	6895      	ldr	r5, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000796:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 800079a:	bf0c      	ite	eq
 800079c:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 800079e:	4335      	orrne	r5, r6
        }
        EXTI->RTSR = temp;
 80007a0:	6095      	str	r5, [r2, #8]

        temp = EXTI->FTSR;
 80007a2:	68d5      	ldr	r5, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80007a4:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 80007a6:	bf54      	ite	pl
 80007a8:	403d      	andpl	r5, r7
        {
          temp |= iocurrent;
 80007aa:	4335      	orrmi	r5, r6
        }
        EXTI->FTSR = temp;
 80007ac:	60d5      	str	r5, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80007ae:	3301      	adds	r3, #1
 80007b0:	2b10      	cmp	r3, #16
 80007b2:	f47f af44 	bne.w	800063e <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 80007b6:	b005      	add	sp, #20
 80007b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80007bc:	465d      	mov	r5, fp
 80007be:	e7d5      	b.n	800076c <HAL_GPIO_Init+0x144>
 80007c0:	2501      	movs	r5, #1
 80007c2:	e7d3      	b.n	800076c <HAL_GPIO_Init+0x144>
 80007c4:	2502      	movs	r5, #2
 80007c6:	e7d1      	b.n	800076c <HAL_GPIO_Init+0x144>
 80007c8:	2503      	movs	r5, #3
 80007ca:	e7cf      	b.n	800076c <HAL_GPIO_Init+0x144>
 80007cc:	2504      	movs	r5, #4
 80007ce:	e7cd      	b.n	800076c <HAL_GPIO_Init+0x144>
 80007d0:	2505      	movs	r5, #5
 80007d2:	e7cb      	b.n	800076c <HAL_GPIO_Init+0x144>
 80007d4:	2506      	movs	r5, #6
 80007d6:	e7c9      	b.n	800076c <HAL_GPIO_Init+0x144>
 80007d8:	40013c00 	.word	0x40013c00
 80007dc:	40020000 	.word	0x40020000
 80007e0:	40023800 	.word	0x40023800
 80007e4:	40021400 	.word	0x40021400

080007e8 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80007e8:	b10a      	cbz	r2, 80007ee <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80007ea:	6181      	str	r1, [r0, #24]
  }
}
 80007ec:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80007ee:	0409      	lsls	r1, r1, #16
 80007f0:	e7fb      	b.n	80007ea <HAL_GPIO_WritePin+0x2>
	...

080007f4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80007f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80007f6:	4604      	mov	r4, r0
 80007f8:	b910      	cbnz	r0, 8000800 <HAL_RCC_OscConfig+0xc>
  {
    return HAL_ERROR;
 80007fa:	2001      	movs	r0, #1
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
}
 80007fc:	b003      	add	sp, #12
 80007fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000800:	6803      	ldr	r3, [r0, #0]
 8000802:	07d8      	lsls	r0, r3, #31
 8000804:	d43b      	bmi.n	800087e <HAL_RCC_OscConfig+0x8a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000806:	6823      	ldr	r3, [r4, #0]
 8000808:	0799      	lsls	r1, r3, #30
 800080a:	f100 8084 	bmi.w	8000916 <HAL_RCC_OscConfig+0x122>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800080e:	6823      	ldr	r3, [r4, #0]
 8000810:	071e      	lsls	r6, r3, #28
 8000812:	f100 80c6 	bmi.w	80009a2 <HAL_RCC_OscConfig+0x1ae>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000816:	6823      	ldr	r3, [r4, #0]
 8000818:	075d      	lsls	r5, r3, #29
 800081a:	d52a      	bpl.n	8000872 <HAL_RCC_OscConfig+0x7e>
    __HAL_RCC_PWR_CLK_ENABLE();
 800081c:	2300      	movs	r3, #0
 800081e:	9301      	str	r3, [sp, #4]
 8000820:	4baa      	ldr	r3, [pc, #680]	; (8000acc <HAL_RCC_OscConfig+0x2d8>)
    PWR->CR |= PWR_CR_DBP;
 8000822:	4dab      	ldr	r5, [pc, #684]	; (8000ad0 <HAL_RCC_OscConfig+0x2dc>)
    __HAL_RCC_PWR_CLK_ENABLE();
 8000824:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000826:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800082a:	641a      	str	r2, [r3, #64]	; 0x40
 800082c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800082e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000832:	9301      	str	r3, [sp, #4]
 8000834:	9b01      	ldr	r3, [sp, #4]
    PWR->CR |= PWR_CR_DBP;
 8000836:	682b      	ldr	r3, [r5, #0]
 8000838:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800083c:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 800083e:	f7ff fe85 	bl	800054c <HAL_GetTick>
 8000842:	4606      	mov	r6, r0
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8000844:	682b      	ldr	r3, [r5, #0]
 8000846:	05da      	lsls	r2, r3, #23
 8000848:	f140 80cd 	bpl.w	80009e6 <HAL_RCC_OscConfig+0x1f2>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800084c:	68a3      	ldr	r3, [r4, #8]
 800084e:	4d9f      	ldr	r5, [pc, #636]	; (8000acc <HAL_RCC_OscConfig+0x2d8>)
 8000850:	2b01      	cmp	r3, #1
 8000852:	f040 80cf 	bne.w	80009f4 <HAL_RCC_OscConfig+0x200>
 8000856:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000858:	f043 0301 	orr.w	r3, r3, #1
 800085c:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 800085e:	f7ff fe75 	bl	800054c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000862:	4d9a      	ldr	r5, [pc, #616]	; (8000acc <HAL_RCC_OscConfig+0x2d8>)
      tickstart = HAL_GetTick();
 8000864:	4606      	mov	r6, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000866:	f241 3788 	movw	r7, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800086a:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800086c:	079b      	lsls	r3, r3, #30
 800086e:	f140 80e2 	bpl.w	8000a36 <HAL_RCC_OscConfig+0x242>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000872:	69a2      	ldr	r2, [r4, #24]
 8000874:	2a00      	cmp	r2, #0
 8000876:	f040 80e5 	bne.w	8000a44 <HAL_RCC_OscConfig+0x250>
  return HAL_OK;
 800087a:	2000      	movs	r0, #0
 800087c:	e7be      	b.n	80007fc <HAL_RCC_OscConfig+0x8>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800087e:	4b93      	ldr	r3, [pc, #588]	; (8000acc <HAL_RCC_OscConfig+0x2d8>)
 8000880:	689a      	ldr	r2, [r3, #8]
 8000882:	f002 020c 	and.w	r2, r2, #12
 8000886:	2a04      	cmp	r2, #4
 8000888:	d007      	beq.n	800089a <HAL_RCC_OscConfig+0xa6>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800088a:	689a      	ldr	r2, [r3, #8]
 800088c:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000890:	2a08      	cmp	r2, #8
 8000892:	d10a      	bne.n	80008aa <HAL_RCC_OscConfig+0xb6>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000894:	685b      	ldr	r3, [r3, #4]
 8000896:	025a      	lsls	r2, r3, #9
 8000898:	d507      	bpl.n	80008aa <HAL_RCC_OscConfig+0xb6>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800089a:	4b8c      	ldr	r3, [pc, #560]	; (8000acc <HAL_RCC_OscConfig+0x2d8>)
 800089c:	681b      	ldr	r3, [r3, #0]
 800089e:	039b      	lsls	r3, r3, #14
 80008a0:	d5b1      	bpl.n	8000806 <HAL_RCC_OscConfig+0x12>
 80008a2:	6863      	ldr	r3, [r4, #4]
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d1ae      	bne.n	8000806 <HAL_RCC_OscConfig+0x12>
 80008a8:	e7a7      	b.n	80007fa <HAL_RCC_OscConfig+0x6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80008aa:	6863      	ldr	r3, [r4, #4]
 80008ac:	4d87      	ldr	r5, [pc, #540]	; (8000acc <HAL_RCC_OscConfig+0x2d8>)
 80008ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80008b2:	d111      	bne.n	80008d8 <HAL_RCC_OscConfig+0xe4>
 80008b4:	682b      	ldr	r3, [r5, #0]
 80008b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80008ba:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80008bc:	f7ff fe46 	bl	800054c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80008c0:	4d82      	ldr	r5, [pc, #520]	; (8000acc <HAL_RCC_OscConfig+0x2d8>)
        tickstart = HAL_GetTick();
 80008c2:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80008c4:	682b      	ldr	r3, [r5, #0]
 80008c6:	039f      	lsls	r7, r3, #14
 80008c8:	d49d      	bmi.n	8000806 <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80008ca:	f7ff fe3f 	bl	800054c <HAL_GetTick>
 80008ce:	1b80      	subs	r0, r0, r6
 80008d0:	2864      	cmp	r0, #100	; 0x64
 80008d2:	d9f7      	bls.n	80008c4 <HAL_RCC_OscConfig+0xd0>
            return HAL_TIMEOUT;
 80008d4:	2003      	movs	r0, #3
 80008d6:	e791      	b.n	80007fc <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80008d8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80008dc:	d104      	bne.n	80008e8 <HAL_RCC_OscConfig+0xf4>
 80008de:	682b      	ldr	r3, [r5, #0]
 80008e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80008e4:	602b      	str	r3, [r5, #0]
 80008e6:	e7e5      	b.n	80008b4 <HAL_RCC_OscConfig+0xc0>
 80008e8:	682a      	ldr	r2, [r5, #0]
 80008ea:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80008ee:	602a      	str	r2, [r5, #0]
 80008f0:	682a      	ldr	r2, [r5, #0]
 80008f2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80008f6:	602a      	str	r2, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d1df      	bne.n	80008bc <HAL_RCC_OscConfig+0xc8>
        tickstart = HAL_GetTick();
 80008fc:	f7ff fe26 	bl	800054c <HAL_GetTick>
 8000900:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000902:	682b      	ldr	r3, [r5, #0]
 8000904:	0398      	lsls	r0, r3, #14
 8000906:	f57f af7e 	bpl.w	8000806 <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800090a:	f7ff fe1f 	bl	800054c <HAL_GetTick>
 800090e:	1b80      	subs	r0, r0, r6
 8000910:	2864      	cmp	r0, #100	; 0x64
 8000912:	d9f6      	bls.n	8000902 <HAL_RCC_OscConfig+0x10e>
 8000914:	e7de      	b.n	80008d4 <HAL_RCC_OscConfig+0xe0>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000916:	4b6d      	ldr	r3, [pc, #436]	; (8000acc <HAL_RCC_OscConfig+0x2d8>)
 8000918:	689a      	ldr	r2, [r3, #8]
 800091a:	f012 0f0c 	tst.w	r2, #12
 800091e:	d007      	beq.n	8000930 <HAL_RCC_OscConfig+0x13c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000920:	689a      	ldr	r2, [r3, #8]
 8000922:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000926:	2a08      	cmp	r2, #8
 8000928:	d112      	bne.n	8000950 <HAL_RCC_OscConfig+0x15c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800092a:	685b      	ldr	r3, [r3, #4]
 800092c:	0259      	lsls	r1, r3, #9
 800092e:	d40f      	bmi.n	8000950 <HAL_RCC_OscConfig+0x15c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000930:	4b66      	ldr	r3, [pc, #408]	; (8000acc <HAL_RCC_OscConfig+0x2d8>)
 8000932:	681a      	ldr	r2, [r3, #0]
 8000934:	0792      	lsls	r2, r2, #30
 8000936:	d503      	bpl.n	8000940 <HAL_RCC_OscConfig+0x14c>
 8000938:	68e2      	ldr	r2, [r4, #12]
 800093a:	2a01      	cmp	r2, #1
 800093c:	f47f af5d 	bne.w	80007fa <HAL_RCC_OscConfig+0x6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000940:	681a      	ldr	r2, [r3, #0]
 8000942:	6921      	ldr	r1, [r4, #16]
 8000944:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8000948:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 800094c:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800094e:	e75e      	b.n	800080e <HAL_RCC_OscConfig+0x1a>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000950:	68e2      	ldr	r2, [r4, #12]
 8000952:	4b60      	ldr	r3, [pc, #384]	; (8000ad4 <HAL_RCC_OscConfig+0x2e0>)
 8000954:	b1b2      	cbz	r2, 8000984 <HAL_RCC_OscConfig+0x190>
        __HAL_RCC_HSI_ENABLE();
 8000956:	2201      	movs	r2, #1
 8000958:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800095a:	f7ff fdf7 	bl	800054c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800095e:	4d5b      	ldr	r5, [pc, #364]	; (8000acc <HAL_RCC_OscConfig+0x2d8>)
        tickstart = HAL_GetTick();
 8000960:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000962:	682b      	ldr	r3, [r5, #0]
 8000964:	079b      	lsls	r3, r3, #30
 8000966:	d507      	bpl.n	8000978 <HAL_RCC_OscConfig+0x184>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000968:	682b      	ldr	r3, [r5, #0]
 800096a:	6922      	ldr	r2, [r4, #16]
 800096c:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000970:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000974:	602b      	str	r3, [r5, #0]
 8000976:	e74a      	b.n	800080e <HAL_RCC_OscConfig+0x1a>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000978:	f7ff fde8 	bl	800054c <HAL_GetTick>
 800097c:	1b80      	subs	r0, r0, r6
 800097e:	2802      	cmp	r0, #2
 8000980:	d9ef      	bls.n	8000962 <HAL_RCC_OscConfig+0x16e>
 8000982:	e7a7      	b.n	80008d4 <HAL_RCC_OscConfig+0xe0>
        __HAL_RCC_HSI_DISABLE();
 8000984:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000986:	f7ff fde1 	bl	800054c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800098a:	4d50      	ldr	r5, [pc, #320]	; (8000acc <HAL_RCC_OscConfig+0x2d8>)
        tickstart = HAL_GetTick();
 800098c:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800098e:	682b      	ldr	r3, [r5, #0]
 8000990:	079f      	lsls	r7, r3, #30
 8000992:	f57f af3c 	bpl.w	800080e <HAL_RCC_OscConfig+0x1a>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000996:	f7ff fdd9 	bl	800054c <HAL_GetTick>
 800099a:	1b80      	subs	r0, r0, r6
 800099c:	2802      	cmp	r0, #2
 800099e:	d9f6      	bls.n	800098e <HAL_RCC_OscConfig+0x19a>
 80009a0:	e798      	b.n	80008d4 <HAL_RCC_OscConfig+0xe0>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80009a2:	6962      	ldr	r2, [r4, #20]
 80009a4:	4b4c      	ldr	r3, [pc, #304]	; (8000ad8 <HAL_RCC_OscConfig+0x2e4>)
 80009a6:	b17a      	cbz	r2, 80009c8 <HAL_RCC_OscConfig+0x1d4>
      __HAL_RCC_LSI_ENABLE();
 80009a8:	2201      	movs	r2, #1
 80009aa:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80009ac:	f7ff fdce 	bl	800054c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80009b0:	4d46      	ldr	r5, [pc, #280]	; (8000acc <HAL_RCC_OscConfig+0x2d8>)
      tickstart = HAL_GetTick();
 80009b2:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80009b4:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80009b6:	0798      	lsls	r0, r3, #30
 80009b8:	f53f af2d 	bmi.w	8000816 <HAL_RCC_OscConfig+0x22>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80009bc:	f7ff fdc6 	bl	800054c <HAL_GetTick>
 80009c0:	1b80      	subs	r0, r0, r6
 80009c2:	2802      	cmp	r0, #2
 80009c4:	d9f6      	bls.n	80009b4 <HAL_RCC_OscConfig+0x1c0>
 80009c6:	e785      	b.n	80008d4 <HAL_RCC_OscConfig+0xe0>
      __HAL_RCC_LSI_DISABLE();
 80009c8:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80009ca:	f7ff fdbf 	bl	800054c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80009ce:	4d3f      	ldr	r5, [pc, #252]	; (8000acc <HAL_RCC_OscConfig+0x2d8>)
      tickstart = HAL_GetTick();
 80009d0:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80009d2:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80009d4:	0799      	lsls	r1, r3, #30
 80009d6:	f57f af1e 	bpl.w	8000816 <HAL_RCC_OscConfig+0x22>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80009da:	f7ff fdb7 	bl	800054c <HAL_GetTick>
 80009de:	1b80      	subs	r0, r0, r6
 80009e0:	2802      	cmp	r0, #2
 80009e2:	d9f6      	bls.n	80009d2 <HAL_RCC_OscConfig+0x1de>
 80009e4:	e776      	b.n	80008d4 <HAL_RCC_OscConfig+0xe0>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80009e6:	f7ff fdb1 	bl	800054c <HAL_GetTick>
 80009ea:	1b80      	subs	r0, r0, r6
 80009ec:	2802      	cmp	r0, #2
 80009ee:	f67f af29 	bls.w	8000844 <HAL_RCC_OscConfig+0x50>
 80009f2:	e76f      	b.n	80008d4 <HAL_RCC_OscConfig+0xe0>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80009f4:	2b05      	cmp	r3, #5
 80009f6:	d104      	bne.n	8000a02 <HAL_RCC_OscConfig+0x20e>
 80009f8:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80009fa:	f043 0304 	orr.w	r3, r3, #4
 80009fe:	672b      	str	r3, [r5, #112]	; 0x70
 8000a00:	e729      	b.n	8000856 <HAL_RCC_OscConfig+0x62>
 8000a02:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8000a04:	f022 0201 	bic.w	r2, r2, #1
 8000a08:	672a      	str	r2, [r5, #112]	; 0x70
 8000a0a:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8000a0c:	f022 0204 	bic.w	r2, r2, #4
 8000a10:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	f47f af23 	bne.w	800085e <HAL_RCC_OscConfig+0x6a>
      tickstart = HAL_GetTick();
 8000a18:	f7ff fd98 	bl	800054c <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000a1c:	f241 3788 	movw	r7, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8000a20:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000a22:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000a24:	0798      	lsls	r0, r3, #30
 8000a26:	f57f af24 	bpl.w	8000872 <HAL_RCC_OscConfig+0x7e>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000a2a:	f7ff fd8f 	bl	800054c <HAL_GetTick>
 8000a2e:	1b80      	subs	r0, r0, r6
 8000a30:	42b8      	cmp	r0, r7
 8000a32:	d9f6      	bls.n	8000a22 <HAL_RCC_OscConfig+0x22e>
 8000a34:	e74e      	b.n	80008d4 <HAL_RCC_OscConfig+0xe0>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000a36:	f7ff fd89 	bl	800054c <HAL_GetTick>
 8000a3a:	1b80      	subs	r0, r0, r6
 8000a3c:	42b8      	cmp	r0, r7
 8000a3e:	f67f af14 	bls.w	800086a <HAL_RCC_OscConfig+0x76>
 8000a42:	e747      	b.n	80008d4 <HAL_RCC_OscConfig+0xe0>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8000a44:	4d21      	ldr	r5, [pc, #132]	; (8000acc <HAL_RCC_OscConfig+0x2d8>)
 8000a46:	68ab      	ldr	r3, [r5, #8]
 8000a48:	f003 030c 	and.w	r3, r3, #12
 8000a4c:	2b08      	cmp	r3, #8
 8000a4e:	f43f aed4 	beq.w	80007fa <HAL_RCC_OscConfig+0x6>
 8000a52:	4e22      	ldr	r6, [pc, #136]	; (8000adc <HAL_RCC_OscConfig+0x2e8>)
 8000a54:	2300      	movs	r3, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000a56:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8000a58:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000a5a:	d12a      	bne.n	8000ab2 <HAL_RCC_OscConfig+0x2be>
        tickstart = HAL_GetTick();
 8000a5c:	f7ff fd76 	bl	800054c <HAL_GetTick>
 8000a60:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000a62:	682b      	ldr	r3, [r5, #0]
 8000a64:	0199      	lsls	r1, r3, #6
 8000a66:	d41e      	bmi.n	8000aa6 <HAL_RCC_OscConfig+0x2b2>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000a68:	e9d4 3207 	ldrd	r3, r2, [r4, #28]
 8000a6c:	4313      	orrs	r3, r2
 8000a6e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000a70:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8000a74:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8000a76:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8000a7a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000a7c:	4c13      	ldr	r4, [pc, #76]	; (8000acc <HAL_RCC_OscConfig+0x2d8>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000a7e:	0852      	lsrs	r2, r2, #1
 8000a80:	3a01      	subs	r2, #1
 8000a82:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000a86:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8000a88:	2301      	movs	r3, #1
 8000a8a:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8000a8c:	f7ff fd5e 	bl	800054c <HAL_GetTick>
 8000a90:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000a92:	6823      	ldr	r3, [r4, #0]
 8000a94:	019a      	lsls	r2, r3, #6
 8000a96:	f53f aef0 	bmi.w	800087a <HAL_RCC_OscConfig+0x86>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000a9a:	f7ff fd57 	bl	800054c <HAL_GetTick>
 8000a9e:	1b40      	subs	r0, r0, r5
 8000aa0:	2802      	cmp	r0, #2
 8000aa2:	d9f6      	bls.n	8000a92 <HAL_RCC_OscConfig+0x29e>
 8000aa4:	e716      	b.n	80008d4 <HAL_RCC_OscConfig+0xe0>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000aa6:	f7ff fd51 	bl	800054c <HAL_GetTick>
 8000aaa:	1bc0      	subs	r0, r0, r7
 8000aac:	2802      	cmp	r0, #2
 8000aae:	d9d8      	bls.n	8000a62 <HAL_RCC_OscConfig+0x26e>
 8000ab0:	e710      	b.n	80008d4 <HAL_RCC_OscConfig+0xe0>
        tickstart = HAL_GetTick();
 8000ab2:	f7ff fd4b 	bl	800054c <HAL_GetTick>
 8000ab6:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000ab8:	682b      	ldr	r3, [r5, #0]
 8000aba:	019b      	lsls	r3, r3, #6
 8000abc:	f57f aedd 	bpl.w	800087a <HAL_RCC_OscConfig+0x86>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000ac0:	f7ff fd44 	bl	800054c <HAL_GetTick>
 8000ac4:	1b00      	subs	r0, r0, r4
 8000ac6:	2802      	cmp	r0, #2
 8000ac8:	d9f6      	bls.n	8000ab8 <HAL_RCC_OscConfig+0x2c4>
 8000aca:	e703      	b.n	80008d4 <HAL_RCC_OscConfig+0xe0>
 8000acc:	40023800 	.word	0x40023800
 8000ad0:	40007000 	.word	0x40007000
 8000ad4:	42470000 	.word	0x42470000
 8000ad8:	42470e80 	.word	0x42470e80
 8000adc:	42470060 	.word	0x42470060

08000ae0 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000ae0:	4913      	ldr	r1, [pc, #76]	; (8000b30 <HAL_RCC_GetSysClockFreq+0x50>)
{
 8000ae2:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000ae4:	688b      	ldr	r3, [r1, #8]
 8000ae6:	f003 030c 	and.w	r3, r3, #12
 8000aea:	2b04      	cmp	r3, #4
 8000aec:	d003      	beq.n	8000af6 <HAL_RCC_GetSysClockFreq+0x16>
 8000aee:	2b08      	cmp	r3, #8
 8000af0:	d003      	beq.n	8000afa <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8000af2:	4810      	ldr	r0, [pc, #64]	; (8000b34 <HAL_RCC_GetSysClockFreq+0x54>)
    {
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
 8000af4:	e000      	b.n	8000af8 <HAL_RCC_GetSysClockFreq+0x18>
      sysclockfreq = HSE_VALUE;
 8000af6:	4810      	ldr	r0, [pc, #64]	; (8000b38 <HAL_RCC_GetSysClockFreq+0x58>)
}
 8000af8:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000afa:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000afc:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000afe:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000b00:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000b04:	bf14      	ite	ne
 8000b06:	480c      	ldrne	r0, [pc, #48]	; (8000b38 <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000b08:	480a      	ldreq	r0, [pc, #40]	; (8000b34 <HAL_RCC_GetSysClockFreq+0x54>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000b0a:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8000b0e:	bf18      	it	ne
 8000b10:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000b12:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000b16:	fba1 0100 	umull	r0, r1, r1, r0
 8000b1a:	f7ff fb61 	bl	80001e0 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8000b1e:	4b04      	ldr	r3, [pc, #16]	; (8000b30 <HAL_RCC_GetSysClockFreq+0x50>)
 8000b20:	685b      	ldr	r3, [r3, #4]
 8000b22:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8000b26:	3301      	adds	r3, #1
 8000b28:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 8000b2a:	fbb0 f0f3 	udiv	r0, r0, r3
 8000b2e:	e7e3      	b.n	8000af8 <HAL_RCC_GetSysClockFreq+0x18>
 8000b30:	40023800 	.word	0x40023800
 8000b34:	00f42400 	.word	0x00f42400
 8000b38:	007a1200 	.word	0x007a1200

08000b3c <HAL_RCC_ClockConfig>:
{
 8000b3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000b40:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8000b42:	4604      	mov	r4, r0
 8000b44:	b910      	cbnz	r0, 8000b4c <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8000b46:	2001      	movs	r0, #1
}
 8000b48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000b4c:	4b43      	ldr	r3, [pc, #268]	; (8000c5c <HAL_RCC_ClockConfig+0x120>)
 8000b4e:	681a      	ldr	r2, [r3, #0]
 8000b50:	f002 020f 	and.w	r2, r2, #15
 8000b54:	428a      	cmp	r2, r1
 8000b56:	d327      	bcc.n	8000ba8 <HAL_RCC_ClockConfig+0x6c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000b58:	6821      	ldr	r1, [r4, #0]
 8000b5a:	078f      	lsls	r7, r1, #30
 8000b5c:	d42c      	bmi.n	8000bb8 <HAL_RCC_ClockConfig+0x7c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000b5e:	07c8      	lsls	r0, r1, #31
 8000b60:	d43f      	bmi.n	8000be2 <HAL_RCC_ClockConfig+0xa6>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8000b62:	4b3e      	ldr	r3, [pc, #248]	; (8000c5c <HAL_RCC_ClockConfig+0x120>)
 8000b64:	681a      	ldr	r2, [r3, #0]
 8000b66:	f002 020f 	and.w	r2, r2, #15
 8000b6a:	42aa      	cmp	r2, r5
 8000b6c:	d864      	bhi.n	8000c38 <HAL_RCC_ClockConfig+0xfc>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000b6e:	6822      	ldr	r2, [r4, #0]
 8000b70:	0751      	lsls	r1, r2, #29
 8000b72:	d46a      	bmi.n	8000c4a <HAL_RCC_ClockConfig+0x10e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000b74:	0713      	lsls	r3, r2, #28
 8000b76:	d507      	bpl.n	8000b88 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8000b78:	4a39      	ldr	r2, [pc, #228]	; (8000c60 <HAL_RCC_ClockConfig+0x124>)
 8000b7a:	6921      	ldr	r1, [r4, #16]
 8000b7c:	6893      	ldr	r3, [r2, #8]
 8000b7e:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8000b82:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000b86:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000b88:	f7ff ffaa 	bl	8000ae0 <HAL_RCC_GetSysClockFreq>
 8000b8c:	4b34      	ldr	r3, [pc, #208]	; (8000c60 <HAL_RCC_ClockConfig+0x124>)
 8000b8e:	4a35      	ldr	r2, [pc, #212]	; (8000c64 <HAL_RCC_ClockConfig+0x128>)
 8000b90:	689b      	ldr	r3, [r3, #8]
 8000b92:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000b96:	5cd3      	ldrb	r3, [r2, r3]
 8000b98:	40d8      	lsrs	r0, r3
 8000b9a:	4b33      	ldr	r3, [pc, #204]	; (8000c68 <HAL_RCC_ClockConfig+0x12c>)
 8000b9c:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8000b9e:	200f      	movs	r0, #15
 8000ba0:	f7ff fc9e 	bl	80004e0 <HAL_InitTick>
  return HAL_OK;
 8000ba4:	2000      	movs	r0, #0
 8000ba6:	e7cf      	b.n	8000b48 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000ba8:	b2ca      	uxtb	r2, r1
 8000baa:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	f003 030f 	and.w	r3, r3, #15
 8000bb2:	428b      	cmp	r3, r1
 8000bb4:	d1c7      	bne.n	8000b46 <HAL_RCC_ClockConfig+0xa>
 8000bb6:	e7cf      	b.n	8000b58 <HAL_RCC_ClockConfig+0x1c>
 8000bb8:	4b29      	ldr	r3, [pc, #164]	; (8000c60 <HAL_RCC_ClockConfig+0x124>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000bba:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000bbe:	bf1e      	ittt	ne
 8000bc0:	689a      	ldrne	r2, [r3, #8]
 8000bc2:	f442 52e0 	orrne.w	r2, r2, #7168	; 0x1c00
 8000bc6:	609a      	strne	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000bc8:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000bca:	bf42      	ittt	mi
 8000bcc:	689a      	ldrmi	r2, [r3, #8]
 8000bce:	f442 4260 	orrmi.w	r2, r2, #57344	; 0xe000
 8000bd2:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000bd4:	689a      	ldr	r2, [r3, #8]
 8000bd6:	68a0      	ldr	r0, [r4, #8]
 8000bd8:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8000bdc:	4302      	orrs	r2, r0
 8000bde:	609a      	str	r2, [r3, #8]
 8000be0:	e7bd      	b.n	8000b5e <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000be2:	6862      	ldr	r2, [r4, #4]
 8000be4:	4b1e      	ldr	r3, [pc, #120]	; (8000c60 <HAL_RCC_ClockConfig+0x124>)
 8000be6:	2a01      	cmp	r2, #1
 8000be8:	d11c      	bne.n	8000c24 <HAL_RCC_ClockConfig+0xe8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000bf0:	d0a9      	beq.n	8000b46 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000bf2:	4e1b      	ldr	r6, [pc, #108]	; (8000c60 <HAL_RCC_ClockConfig+0x124>)
 8000bf4:	68b3      	ldr	r3, [r6, #8]
 8000bf6:	f023 0303 	bic.w	r3, r3, #3
 8000bfa:	4313      	orrs	r3, r2
 8000bfc:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8000bfe:	f7ff fca5 	bl	800054c <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000c02:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8000c06:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000c08:	68b3      	ldr	r3, [r6, #8]
 8000c0a:	6862      	ldr	r2, [r4, #4]
 8000c0c:	f003 030c 	and.w	r3, r3, #12
 8000c10:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8000c14:	d0a5      	beq.n	8000b62 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000c16:	f7ff fc99 	bl	800054c <HAL_GetTick>
 8000c1a:	1bc0      	subs	r0, r0, r7
 8000c1c:	4540      	cmp	r0, r8
 8000c1e:	d9f3      	bls.n	8000c08 <HAL_RCC_ClockConfig+0xcc>
        return HAL_TIMEOUT;
 8000c20:	2003      	movs	r0, #3
 8000c22:	e791      	b.n	8000b48 <HAL_RCC_ClockConfig+0xc>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000c24:	1e91      	subs	r1, r2, #2
 8000c26:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000c28:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000c2a:	d802      	bhi.n	8000c32 <HAL_RCC_ClockConfig+0xf6>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000c2c:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8000c30:	e7de      	b.n	8000bf0 <HAL_RCC_ClockConfig+0xb4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000c32:	f013 0f02 	tst.w	r3, #2
 8000c36:	e7db      	b.n	8000bf0 <HAL_RCC_ClockConfig+0xb4>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000c38:	b2ea      	uxtb	r2, r5
 8000c3a:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	f003 030f 	and.w	r3, r3, #15
 8000c42:	42ab      	cmp	r3, r5
 8000c44:	f47f af7f 	bne.w	8000b46 <HAL_RCC_ClockConfig+0xa>
 8000c48:	e791      	b.n	8000b6e <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000c4a:	4905      	ldr	r1, [pc, #20]	; (8000c60 <HAL_RCC_ClockConfig+0x124>)
 8000c4c:	68e0      	ldr	r0, [r4, #12]
 8000c4e:	688b      	ldr	r3, [r1, #8]
 8000c50:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8000c54:	4303      	orrs	r3, r0
 8000c56:	608b      	str	r3, [r1, #8]
 8000c58:	e78c      	b.n	8000b74 <HAL_RCC_ClockConfig+0x38>
 8000c5a:	bf00      	nop
 8000c5c:	40023c00 	.word	0x40023c00
 8000c60:	40023800 	.word	0x40023800
 8000c64:	0800297e 	.word	0x0800297e
 8000c68:	20000004 	.word	0x20000004

08000c6c <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8000c6c:	4b01      	ldr	r3, [pc, #4]	; (8000c74 <HAL_RCC_GetHCLKFreq+0x8>)
 8000c6e:	6818      	ldr	r0, [r3, #0]
 8000c70:	4770      	bx	lr
 8000c72:	bf00      	nop
 8000c74:	20000004 	.word	0x20000004

08000c78 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8000c78:	4b04      	ldr	r3, [pc, #16]	; (8000c8c <HAL_RCC_GetPCLK1Freq+0x14>)
 8000c7a:	4a05      	ldr	r2, [pc, #20]	; (8000c90 <HAL_RCC_GetPCLK1Freq+0x18>)
 8000c7c:	689b      	ldr	r3, [r3, #8]
 8000c7e:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8000c82:	5cd3      	ldrb	r3, [r2, r3]
 8000c84:	4a03      	ldr	r2, [pc, #12]	; (8000c94 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8000c86:	6810      	ldr	r0, [r2, #0]
}
 8000c88:	40d8      	lsrs	r0, r3
 8000c8a:	4770      	bx	lr
 8000c8c:	40023800 	.word	0x40023800
 8000c90:	0800298e 	.word	0x0800298e
 8000c94:	20000004 	.word	0x20000004

08000c98 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8000c98:	4b04      	ldr	r3, [pc, #16]	; (8000cac <HAL_RCC_GetPCLK2Freq+0x14>)
 8000c9a:	4a05      	ldr	r2, [pc, #20]	; (8000cb0 <HAL_RCC_GetPCLK2Freq+0x18>)
 8000c9c:	689b      	ldr	r3, [r3, #8]
 8000c9e:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8000ca2:	5cd3      	ldrb	r3, [r2, r3]
 8000ca4:	4a03      	ldr	r2, [pc, #12]	; (8000cb4 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8000ca6:	6810      	ldr	r0, [r2, #0]
}
 8000ca8:	40d8      	lsrs	r0, r3
 8000caa:	4770      	bx	lr
 8000cac:	40023800 	.word	0x40023800
 8000cb0:	0800298e 	.word	0x0800298e
 8000cb4:	20000004 	.word	0x20000004

08000cb8 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1 = 0U;
  tmpcr1 = TIMx->CR1;
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 8000cb8:	4a2e      	ldr	r2, [pc, #184]	; (8000d74 <TIM_Base_SetConfig+0xbc>)
  tmpcr1 = TIMx->CR1;
 8000cba:	6803      	ldr	r3, [r0, #0]
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 8000cbc:	4290      	cmp	r0, r2
 8000cbe:	d012      	beq.n	8000ce6 <TIM_Base_SetConfig+0x2e>
 8000cc0:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8000cc4:	d00f      	beq.n	8000ce6 <TIM_Base_SetConfig+0x2e>
 8000cc6:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8000cca:	4290      	cmp	r0, r2
 8000ccc:	d00b      	beq.n	8000ce6 <TIM_Base_SetConfig+0x2e>
 8000cce:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000cd2:	4290      	cmp	r0, r2
 8000cd4:	d007      	beq.n	8000ce6 <TIM_Base_SetConfig+0x2e>
 8000cd6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000cda:	4290      	cmp	r0, r2
 8000cdc:	d003      	beq.n	8000ce6 <TIM_Base_SetConfig+0x2e>
 8000cde:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8000ce2:	4290      	cmp	r0, r2
 8000ce4:	d119      	bne.n	8000d1a <TIM_Base_SetConfig+0x62>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 8000ce6:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8000ce8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8000cec:	4313      	orrs	r3, r2
  }
 
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 8000cee:	4a21      	ldr	r2, [pc, #132]	; (8000d74 <TIM_Base_SetConfig+0xbc>)
 8000cf0:	4290      	cmp	r0, r2
 8000cf2:	d029      	beq.n	8000d48 <TIM_Base_SetConfig+0x90>
 8000cf4:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8000cf8:	d026      	beq.n	8000d48 <TIM_Base_SetConfig+0x90>
 8000cfa:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8000cfe:	4290      	cmp	r0, r2
 8000d00:	d022      	beq.n	8000d48 <TIM_Base_SetConfig+0x90>
 8000d02:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000d06:	4290      	cmp	r0, r2
 8000d08:	d01e      	beq.n	8000d48 <TIM_Base_SetConfig+0x90>
 8000d0a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000d0e:	4290      	cmp	r0, r2
 8000d10:	d01a      	beq.n	8000d48 <TIM_Base_SetConfig+0x90>
 8000d12:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8000d16:	4290      	cmp	r0, r2
 8000d18:	d016      	beq.n	8000d48 <TIM_Base_SetConfig+0x90>
 8000d1a:	4a17      	ldr	r2, [pc, #92]	; (8000d78 <TIM_Base_SetConfig+0xc0>)
 8000d1c:	4290      	cmp	r0, r2
 8000d1e:	d013      	beq.n	8000d48 <TIM_Base_SetConfig+0x90>
 8000d20:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000d24:	4290      	cmp	r0, r2
 8000d26:	d00f      	beq.n	8000d48 <TIM_Base_SetConfig+0x90>
 8000d28:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000d2c:	4290      	cmp	r0, r2
 8000d2e:	d00b      	beq.n	8000d48 <TIM_Base_SetConfig+0x90>
 8000d30:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8000d34:	4290      	cmp	r0, r2
 8000d36:	d007      	beq.n	8000d48 <TIM_Base_SetConfig+0x90>
 8000d38:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000d3c:	4290      	cmp	r0, r2
 8000d3e:	d003      	beq.n	8000d48 <TIM_Base_SetConfig+0x90>
 8000d40:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000d44:	4290      	cmp	r0, r2
 8000d46:	d103      	bne.n	8000d50 <TIM_Base_SetConfig+0x98>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8000d48:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8000d4a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8000d4e:	4313      	orrs	r3, r2
  }

  TIMx->CR1 = tmpcr1;
 8000d50:	6003      	str	r3, [r0, #0]

  /* Set the Auto-reload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8000d52:	688b      	ldr	r3, [r1, #8]
 8000d54:	62c3      	str	r3, [r0, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8000d56:	680b      	ldr	r3, [r1, #0]
 8000d58:	6283      	str	r3, [r0, #40]	; 0x28
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
 8000d5a:	4b06      	ldr	r3, [pc, #24]	; (8000d74 <TIM_Base_SetConfig+0xbc>)
 8000d5c:	4298      	cmp	r0, r3
 8000d5e:	d003      	beq.n	8000d68 <TIM_Base_SetConfig+0xb0>
 8000d60:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000d64:	4298      	cmp	r0, r3
 8000d66:	d101      	bne.n	8000d6c <TIM_Base_SetConfig+0xb4>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8000d68:	690b      	ldr	r3, [r1, #16]
 8000d6a:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8000d6c:	2301      	movs	r3, #1
 8000d6e:	6143      	str	r3, [r0, #20]
}
 8000d70:	4770      	bx	lr
 8000d72:	bf00      	nop
 8000d74:	40010000 	.word	0x40010000
 8000d78:	40014000 	.word	0x40014000

08000d7c <HAL_TIM_Base_Init>:
{ 
 8000d7c:	b510      	push	{r4, lr}
  if(htim == NULL)
 8000d7e:	4604      	mov	r4, r0
 8000d80:	b1a0      	cbz	r0, 8000dac <HAL_TIM_Base_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 8000d82:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8000d86:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000d8a:	b91b      	cbnz	r3, 8000d94 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8000d8c:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_TIM_Base_MspInit(htim);
 8000d90:	f001 fcf6 	bl	8002780 <HAL_TIM_Base_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 8000d94:	2302      	movs	r3, #2
 8000d96:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8000d9a:	6820      	ldr	r0, [r4, #0]
 8000d9c:	1d21      	adds	r1, r4, #4
 8000d9e:	f7ff ff8b 	bl	8000cb8 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8000da2:	2301      	movs	r3, #1
 8000da4:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  return HAL_OK;
 8000da8:	2000      	movs	r0, #0
}
 8000daa:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8000dac:	2001      	movs	r0, #1
 8000dae:	e7fc      	b.n	8000daa <HAL_TIM_Base_Init+0x2e>

08000db0 <HAL_TIMEx_MasterConfigSynchronization>:
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
  
  __HAL_LOCK(htim);
 8000db0:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8000db4:	2b01      	cmp	r3, #1
{
 8000db6:	b510      	push	{r4, lr}
 8000db8:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(htim);
 8000dbc:	d018      	beq.n	8000df0 <HAL_TIMEx_MasterConfigSynchronization+0x40>
  
  htim->State = HAL_TIM_STATE_BUSY;
 8000dbe:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8000dc2:	6803      	ldr	r3, [r0, #0]
  /* Select the TRGO source */
  htim->Instance->CR2 |= sMasterConfig->MasterOutputTrigger;
 8000dc4:	680c      	ldr	r4, [r1, #0]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8000dc6:	685a      	ldr	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8000dc8:	6849      	ldr	r1, [r1, #4]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8000dca:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8000dce:	605a      	str	r2, [r3, #4]
  htim->Instance->CR2 |= sMasterConfig->MasterOutputTrigger;
 8000dd0:	685a      	ldr	r2, [r3, #4]
 8000dd2:	4322      	orrs	r2, r4
 8000dd4:	605a      	str	r2, [r3, #4]
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 8000dd6:	689a      	ldr	r2, [r3, #8]
 8000dd8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000ddc:	609a      	str	r2, [r3, #8]
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8000dde:	689a      	ldr	r2, [r3, #8]
 8000de0:	430a      	orrs	r2, r1
 8000de2:	609a      	str	r2, [r3, #8]
  
  htim->State = HAL_TIM_STATE_READY;
 8000de4:	2301      	movs	r3, #1
 8000de6:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  
  __HAL_UNLOCK(htim);
 8000dea:	2300      	movs	r3, #0
 8000dec:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  __HAL_LOCK(htim);
 8000df0:	4618      	mov	r0, r3
  
  return HAL_OK;
} 
 8000df2:	bd10      	pop	{r4, pc}

08000df4 <UART_SetConfig>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8000df4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
  assert_param(IS_UART_PARITY(huart->Init.Parity));
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = huart->Instance->CR2;
 8000df8:	6803      	ldr	r3, [r0, #0]

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);

  /* Configure the UART Stop Bits: Set STOP[13:12] bits according to huart->Init.StopBits value */
  tmpreg |= (uint32_t)huart->Init.StopBits;
 8000dfa:	68c1      	ldr	r1, [r0, #12]
  tmpreg = huart->Instance->CR2;
 8000dfc:	691a      	ldr	r2, [r3, #16]
{
 8000dfe:	4604      	mov	r4, r0
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 8000e00:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
  tmpreg |= (uint32_t)huart->Init.StopBits;
 8000e04:	430a      	orrs	r2, r1
  
  /* Write to USART CR2 */
  WRITE_REG(huart->Instance->CR2, (uint32_t)tmpreg);
 8000e06:	611a      	str	r2, [r3, #16]
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8000e08:	6925      	ldr	r5, [r4, #16]
 8000e0a:	68a2      	ldr	r2, [r4, #8]
  tmpreg = huart->Instance->CR1;
 8000e0c:	68d9      	ldr	r1, [r3, #12]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8000e0e:	69c0      	ldr	r0, [r0, #28]
 8000e10:	432a      	orrs	r2, r5
 8000e12:	6965      	ldr	r5, [r4, #20]
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 8000e14:	f421 4116 	bic.w	r1, r1, #38400	; 0x9600
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8000e18:	432a      	orrs	r2, r5
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 8000e1a:	f021 010c 	bic.w	r1, r1, #12
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8000e1e:	4302      	orrs	r2, r0
 8000e20:	430a      	orrs	r2, r1
  
  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 8000e22:	60da      	str	r2, [r3, #12]
  
  /*-------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = huart->Instance->CR3;
 8000e24:	695a      	ldr	r2, [r3, #20]
  
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
  
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  tmpreg |= huart->Init.HwFlowCtl;
 8000e26:	69a1      	ldr	r1, [r4, #24]
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
 8000e28:	f422 7240 	bic.w	r2, r2, #768	; 0x300
  tmpreg |= huart->Init.HwFlowCtl;
 8000e2c:	430a      	orrs	r2, r1
  
  /* Write to USART CR3 */
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
  
  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8000e2e:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
 8000e32:	615a      	str	r2, [r3, #20]
 8000e34:	4a7a      	ldr	r2, [pc, #488]	; (8001020 <UART_SetConfig+0x22c>)
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8000e36:	d17b      	bne.n	8000f30 <UART_SetConfig+0x13c>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6) 
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 8000e38:	4293      	cmp	r3, r2
 8000e3a:	d003      	beq.n	8000e44 <UART_SetConfig+0x50>
 8000e3c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000e40:	4293      	cmp	r3, r2
 8000e42:	d144      	bne.n	8000ece <UART_SetConfig+0xda>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8000e44:	f7ff ff28 	bl	8000c98 <HAL_RCC_GetPCLK2Freq>
 8000e48:	6867      	ldr	r7, [r4, #4]
 8000e4a:	2519      	movs	r5, #25
 8000e4c:	f04f 0864 	mov.w	r8, #100	; 0x64
 8000e50:	fb05 f300 	mul.w	r3, r5, r0
 8000e54:	007f      	lsls	r7, r7, #1
 8000e56:	fbb3 f3f7 	udiv	r3, r3, r7
 8000e5a:	fbb3 f3f8 	udiv	r3, r3, r8
 8000e5e:	011f      	lsls	r7, r3, #4
 8000e60:	f7ff ff1a 	bl	8000c98 <HAL_RCC_GetPCLK2Freq>
 8000e64:	6863      	ldr	r3, [r4, #4]
 8000e66:	4368      	muls	r0, r5
 8000e68:	005b      	lsls	r3, r3, #1
 8000e6a:	fbb0 f6f3 	udiv	r6, r0, r3
 8000e6e:	f7ff ff13 	bl	8000c98 <HAL_RCC_GetPCLK2Freq>
 8000e72:	6863      	ldr	r3, [r4, #4]
 8000e74:	4368      	muls	r0, r5
 8000e76:	005b      	lsls	r3, r3, #1
 8000e78:	fbb0 f3f3 	udiv	r3, r0, r3
 8000e7c:	fbb3 f3f8 	udiv	r3, r3, r8
 8000e80:	fb08 6313 	mls	r3, r8, r3, r6
 8000e84:	00db      	lsls	r3, r3, #3
 8000e86:	3332      	adds	r3, #50	; 0x32
 8000e88:	fbb3 f3f8 	udiv	r3, r3, r8
 8000e8c:	005b      	lsls	r3, r3, #1
 8000e8e:	f403 76f8 	and.w	r6, r3, #496	; 0x1f0
 8000e92:	f7ff ff01 	bl	8000c98 <HAL_RCC_GetPCLK2Freq>
 8000e96:	6862      	ldr	r2, [r4, #4]
 8000e98:	4368      	muls	r0, r5
 8000e9a:	0052      	lsls	r2, r2, #1
 8000e9c:	fbb0 f9f2 	udiv	r9, r0, r2
 8000ea0:	f7ff fefa 	bl	8000c98 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }	
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8000ea4:	6863      	ldr	r3, [r4, #4]
 8000ea6:	6822      	ldr	r2, [r4, #0]
 8000ea8:	4368      	muls	r0, r5
 8000eaa:	005b      	lsls	r3, r3, #1
 8000eac:	fbb0 f3f3 	udiv	r3, r0, r3
 8000eb0:	fbb3 f3f8 	udiv	r3, r3, r8
 8000eb4:	fb08 9313 	mls	r3, r8, r3, r9
 8000eb8:	00db      	lsls	r3, r3, #3
 8000eba:	3332      	adds	r3, #50	; 0x32
 8000ebc:	fbb3 f3f8 	udiv	r3, r3, r8
 8000ec0:	f003 0307 	and.w	r3, r3, #7
 8000ec4:	443b      	add	r3, r7
 8000ec6:	4433      	add	r3, r6
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }	
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8000ec8:	6093      	str	r3, [r2, #8]
    }
  }
}
 8000eca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8000ece:	f7ff fed3 	bl	8000c78 <HAL_RCC_GetPCLK1Freq>
 8000ed2:	6867      	ldr	r7, [r4, #4]
 8000ed4:	2519      	movs	r5, #25
 8000ed6:	f04f 0864 	mov.w	r8, #100	; 0x64
 8000eda:	fb05 f300 	mul.w	r3, r5, r0
 8000ede:	007f      	lsls	r7, r7, #1
 8000ee0:	fbb3 f3f7 	udiv	r3, r3, r7
 8000ee4:	fbb3 f3f8 	udiv	r3, r3, r8
 8000ee8:	011f      	lsls	r7, r3, #4
 8000eea:	f7ff fec5 	bl	8000c78 <HAL_RCC_GetPCLK1Freq>
 8000eee:	6863      	ldr	r3, [r4, #4]
 8000ef0:	4368      	muls	r0, r5
 8000ef2:	005b      	lsls	r3, r3, #1
 8000ef4:	fbb0 f6f3 	udiv	r6, r0, r3
 8000ef8:	f7ff febe 	bl	8000c78 <HAL_RCC_GetPCLK1Freq>
 8000efc:	6863      	ldr	r3, [r4, #4]
 8000efe:	4368      	muls	r0, r5
 8000f00:	005b      	lsls	r3, r3, #1
 8000f02:	fbb0 f3f3 	udiv	r3, r0, r3
 8000f06:	fbb3 f3f8 	udiv	r3, r3, r8
 8000f0a:	fb08 6313 	mls	r3, r8, r3, r6
 8000f0e:	00db      	lsls	r3, r3, #3
 8000f10:	3332      	adds	r3, #50	; 0x32
 8000f12:	fbb3 f3f8 	udiv	r3, r3, r8
 8000f16:	005b      	lsls	r3, r3, #1
 8000f18:	f403 76f8 	and.w	r6, r3, #496	; 0x1f0
 8000f1c:	f7ff feac 	bl	8000c78 <HAL_RCC_GetPCLK1Freq>
 8000f20:	6862      	ldr	r2, [r4, #4]
 8000f22:	4368      	muls	r0, r5
 8000f24:	0052      	lsls	r2, r2, #1
 8000f26:	fbb0 f9f2 	udiv	r9, r0, r2
 8000f2a:	f7ff fea5 	bl	8000c78 <HAL_RCC_GetPCLK1Freq>
 8000f2e:	e7b9      	b.n	8000ea4 <UART_SetConfig+0xb0>
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 8000f30:	4293      	cmp	r3, r2
 8000f32:	d002      	beq.n	8000f3a <UART_SetConfig+0x146>
 8000f34:	4a3b      	ldr	r2, [pc, #236]	; (8001024 <UART_SetConfig+0x230>)
 8000f36:	4293      	cmp	r3, r2
 8000f38:	d141      	bne.n	8000fbe <UART_SetConfig+0x1ca>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8000f3a:	f7ff fead 	bl	8000c98 <HAL_RCC_GetPCLK2Freq>
 8000f3e:	6867      	ldr	r7, [r4, #4]
 8000f40:	2519      	movs	r5, #25
 8000f42:	f04f 0864 	mov.w	r8, #100	; 0x64
 8000f46:	fb05 f300 	mul.w	r3, r5, r0
 8000f4a:	00bf      	lsls	r7, r7, #2
 8000f4c:	fbb3 f3f7 	udiv	r3, r3, r7
 8000f50:	fbb3 f3f8 	udiv	r3, r3, r8
 8000f54:	011f      	lsls	r7, r3, #4
 8000f56:	f7ff fe9f 	bl	8000c98 <HAL_RCC_GetPCLK2Freq>
 8000f5a:	6863      	ldr	r3, [r4, #4]
 8000f5c:	4368      	muls	r0, r5
 8000f5e:	009b      	lsls	r3, r3, #2
 8000f60:	fbb0 f6f3 	udiv	r6, r0, r3
 8000f64:	f7ff fe98 	bl	8000c98 <HAL_RCC_GetPCLK2Freq>
 8000f68:	6863      	ldr	r3, [r4, #4]
 8000f6a:	4368      	muls	r0, r5
 8000f6c:	009b      	lsls	r3, r3, #2
 8000f6e:	fbb0 f3f3 	udiv	r3, r0, r3
 8000f72:	fbb3 f3f8 	udiv	r3, r3, r8
 8000f76:	fb08 6313 	mls	r3, r8, r3, r6
 8000f7a:	011b      	lsls	r3, r3, #4
 8000f7c:	3332      	adds	r3, #50	; 0x32
 8000f7e:	fbb3 f3f8 	udiv	r3, r3, r8
 8000f82:	f003 06f0 	and.w	r6, r3, #240	; 0xf0
 8000f86:	f7ff fe87 	bl	8000c98 <HAL_RCC_GetPCLK2Freq>
 8000f8a:	6862      	ldr	r2, [r4, #4]
 8000f8c:	4368      	muls	r0, r5
 8000f8e:	0092      	lsls	r2, r2, #2
 8000f90:	fbb0 f9f2 	udiv	r9, r0, r2
 8000f94:	f7ff fe80 	bl	8000c98 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8000f98:	6863      	ldr	r3, [r4, #4]
 8000f9a:	6822      	ldr	r2, [r4, #0]
 8000f9c:	4368      	muls	r0, r5
 8000f9e:	009b      	lsls	r3, r3, #2
 8000fa0:	fbb0 f3f3 	udiv	r3, r0, r3
 8000fa4:	fbb3 f3f8 	udiv	r3, r3, r8
 8000fa8:	fb08 9313 	mls	r3, r8, r3, r9
 8000fac:	011b      	lsls	r3, r3, #4
 8000fae:	3332      	adds	r3, #50	; 0x32
 8000fb0:	fbb3 f3f8 	udiv	r3, r3, r8
 8000fb4:	f003 030f 	and.w	r3, r3, #15
 8000fb8:	4333      	orrs	r3, r6
 8000fba:	443b      	add	r3, r7
 8000fbc:	e784      	b.n	8000ec8 <UART_SetConfig+0xd4>
 8000fbe:	f7ff fe5b 	bl	8000c78 <HAL_RCC_GetPCLK1Freq>
 8000fc2:	6867      	ldr	r7, [r4, #4]
 8000fc4:	2519      	movs	r5, #25
 8000fc6:	f04f 0864 	mov.w	r8, #100	; 0x64
 8000fca:	fb05 f300 	mul.w	r3, r5, r0
 8000fce:	00bf      	lsls	r7, r7, #2
 8000fd0:	fbb3 f3f7 	udiv	r3, r3, r7
 8000fd4:	fbb3 f3f8 	udiv	r3, r3, r8
 8000fd8:	011f      	lsls	r7, r3, #4
 8000fda:	f7ff fe4d 	bl	8000c78 <HAL_RCC_GetPCLK1Freq>
 8000fde:	6863      	ldr	r3, [r4, #4]
 8000fe0:	4368      	muls	r0, r5
 8000fe2:	009b      	lsls	r3, r3, #2
 8000fe4:	fbb0 f6f3 	udiv	r6, r0, r3
 8000fe8:	f7ff fe46 	bl	8000c78 <HAL_RCC_GetPCLK1Freq>
 8000fec:	6863      	ldr	r3, [r4, #4]
 8000fee:	4368      	muls	r0, r5
 8000ff0:	009b      	lsls	r3, r3, #2
 8000ff2:	fbb0 f3f3 	udiv	r3, r0, r3
 8000ff6:	fbb3 f3f8 	udiv	r3, r3, r8
 8000ffa:	fb08 6313 	mls	r3, r8, r3, r6
 8000ffe:	011b      	lsls	r3, r3, #4
 8001000:	3332      	adds	r3, #50	; 0x32
 8001002:	fbb3 f3f8 	udiv	r3, r3, r8
 8001006:	f003 06f0 	and.w	r6, r3, #240	; 0xf0
 800100a:	f7ff fe35 	bl	8000c78 <HAL_RCC_GetPCLK1Freq>
 800100e:	6862      	ldr	r2, [r4, #4]
 8001010:	4368      	muls	r0, r5
 8001012:	0092      	lsls	r2, r2, #2
 8001014:	fbb0 f9f2 	udiv	r9, r0, r2
 8001018:	f7ff fe2e 	bl	8000c78 <HAL_RCC_GetPCLK1Freq>
 800101c:	e7bc      	b.n	8000f98 <UART_SetConfig+0x1a4>
 800101e:	bf00      	nop
 8001020:	40011000 	.word	0x40011000
 8001024:	40011400 	.word	0x40011400

08001028 <UART_WaitOnFlagUntilTimeout.constprop.3>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
 8001028:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800102a:	4604      	mov	r4, r0
 800102c:	460e      	mov	r6, r1
 800102e:	4617      	mov	r7, r2
 8001030:	461d      	mov	r5, r3
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 8001032:	6821      	ldr	r1, [r4, #0]
 8001034:	680b      	ldr	r3, [r1, #0]
 8001036:	ea36 0303 	bics.w	r3, r6, r3
 800103a:	d101      	bne.n	8001040 <UART_WaitOnFlagUntilTimeout.constprop.3+0x18>
  return HAL_OK;
 800103c:	2000      	movs	r0, #0
 800103e:	e014      	b.n	800106a <UART_WaitOnFlagUntilTimeout.constprop.3+0x42>
    if(Timeout != HAL_MAX_DELAY)
 8001040:	1c6b      	adds	r3, r5, #1
 8001042:	d0f7      	beq.n	8001034 <UART_WaitOnFlagUntilTimeout.constprop.3+0xc>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8001044:	b995      	cbnz	r5, 800106c <UART_WaitOnFlagUntilTimeout.constprop.3+0x44>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001046:	6823      	ldr	r3, [r4, #0]
 8001048:	68da      	ldr	r2, [r3, #12]
 800104a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800104e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001050:	695a      	ldr	r2, [r3, #20]
 8001052:	f022 0201 	bic.w	r2, r2, #1
 8001056:	615a      	str	r2, [r3, #20]
        huart->gState  = HAL_UART_STATE_READY;
 8001058:	2320      	movs	r3, #32
 800105a:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800105e:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
        __HAL_UNLOCK(huart);
 8001062:	2300      	movs	r3, #0
 8001064:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
 8001068:	2003      	movs	r0, #3
}
 800106a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 800106c:	f7ff fa6e 	bl	800054c <HAL_GetTick>
 8001070:	1bc0      	subs	r0, r0, r7
 8001072:	4285      	cmp	r5, r0
 8001074:	d2dd      	bcs.n	8001032 <UART_WaitOnFlagUntilTimeout.constprop.3+0xa>
 8001076:	e7e6      	b.n	8001046 <UART_WaitOnFlagUntilTimeout.constprop.3+0x1e>

08001078 <HAL_UART_Init>:
{
 8001078:	b510      	push	{r4, lr}
  if(huart == NULL)
 800107a:	4604      	mov	r4, r0
 800107c:	b340      	cbz	r0, 80010d0 <HAL_UART_Init+0x58>
  if(huart->gState == HAL_UART_STATE_RESET)
 800107e:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8001082:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001086:	b91b      	cbnz	r3, 8001090 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8001088:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 800108c:	f001 fb90 	bl	80027b0 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8001090:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8001092:	2324      	movs	r3, #36	; 0x24
 8001094:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8001098:	68d3      	ldr	r3, [r2, #12]
 800109a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800109e:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 80010a0:	4620      	mov	r0, r4
 80010a2:	f7ff fea7 	bl	8000df4 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80010a6:	6823      	ldr	r3, [r4, #0]
 80010a8:	691a      	ldr	r2, [r3, #16]
 80010aa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80010ae:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80010b0:	695a      	ldr	r2, [r3, #20]
 80010b2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80010b6:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 80010b8:	68da      	ldr	r2, [r3, #12]
 80010ba:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80010be:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80010c0:	2000      	movs	r0, #0
  huart->gState= HAL_UART_STATE_READY;
 80010c2:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80010c4:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 80010c6:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 80010ca:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
}
 80010ce:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80010d0:	2001      	movs	r0, #1
 80010d2:	e7fc      	b.n	80010ce <HAL_UART_Init+0x56>

080010d4 <HAL_UART_Transmit>:
{
 80010d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80010d8:	461f      	mov	r7, r3
  if(huart->gState == HAL_UART_STATE_READY) 
 80010da:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80010de:	2b20      	cmp	r3, #32
{
 80010e0:	4604      	mov	r4, r0
 80010e2:	460d      	mov	r5, r1
 80010e4:	4690      	mov	r8, r2
  if(huart->gState == HAL_UART_STATE_READY) 
 80010e6:	d14d      	bne.n	8001184 <HAL_UART_Transmit+0xb0>
    if((pData == NULL ) || (Size == 0)) 
 80010e8:	2900      	cmp	r1, #0
 80010ea:	d049      	beq.n	8001180 <HAL_UART_Transmit+0xac>
 80010ec:	2a00      	cmp	r2, #0
 80010ee:	d047      	beq.n	8001180 <HAL_UART_Transmit+0xac>
    __HAL_LOCK(huart);
 80010f0:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 80010f4:	2b01      	cmp	r3, #1
 80010f6:	d045      	beq.n	8001184 <HAL_UART_Transmit+0xb0>
 80010f8:	2301      	movs	r3, #1
 80010fa:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80010fe:	2300      	movs	r3, #0
 8001100:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001102:	2321      	movs	r3, #33	; 0x21
 8001104:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    tickstart = HAL_GetTick();
 8001108:	f7ff fa20 	bl	800054c <HAL_GetTick>
    huart->TxXferSize = Size;
 800110c:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    tickstart = HAL_GetTick();
 8001110:	4606      	mov	r6, r0
    huart->TxXferCount = Size;
 8001112:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    while(huart->TxXferCount > 0U)
 8001116:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8001118:	b29b      	uxth	r3, r3
 800111a:	b963      	cbnz	r3, 8001136 <HAL_UART_Transmit+0x62>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800111c:	463b      	mov	r3, r7
 800111e:	4632      	mov	r2, r6
 8001120:	2140      	movs	r1, #64	; 0x40
 8001122:	4620      	mov	r0, r4
 8001124:	f7ff ff80 	bl	8001028 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8001128:	b9a8      	cbnz	r0, 8001156 <HAL_UART_Transmit+0x82>
      huart->gState = HAL_UART_STATE_READY;
 800112a:	2320      	movs	r3, #32
 800112c:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    __HAL_UNLOCK(huart);
 8001130:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
    return HAL_OK;
 8001134:	e010      	b.n	8001158 <HAL_UART_Transmit+0x84>
      huart->TxXferCount--;
 8001136:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8001138:	3b01      	subs	r3, #1
 800113a:	b29b      	uxth	r3, r3
 800113c:	84e3      	strh	r3, [r4, #38]	; 0x26
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 800113e:	68a3      	ldr	r3, [r4, #8]
 8001140:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001144:	4632      	mov	r2, r6
 8001146:	463b      	mov	r3, r7
 8001148:	f04f 0180 	mov.w	r1, #128	; 0x80
 800114c:	4620      	mov	r0, r4
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 800114e:	d10e      	bne.n	800116e <HAL_UART_Transmit+0x9a>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001150:	f7ff ff6a 	bl	8001028 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8001154:	b110      	cbz	r0, 800115c <HAL_UART_Transmit+0x88>
          return HAL_TIMEOUT;
 8001156:	2003      	movs	r0, #3
}
 8001158:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800115c:	882b      	ldrh	r3, [r5, #0]
 800115e:	6822      	ldr	r2, [r4, #0]
 8001160:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001164:	6053      	str	r3, [r2, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 8001166:	6923      	ldr	r3, [r4, #16]
 8001168:	b943      	cbnz	r3, 800117c <HAL_UART_Transmit+0xa8>
          pData +=2U;
 800116a:	3502      	adds	r5, #2
 800116c:	e7d3      	b.n	8001116 <HAL_UART_Transmit+0x42>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800116e:	f7ff ff5b 	bl	8001028 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8001172:	2800      	cmp	r0, #0
 8001174:	d1ef      	bne.n	8001156 <HAL_UART_Transmit+0x82>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8001176:	6823      	ldr	r3, [r4, #0]
 8001178:	782a      	ldrb	r2, [r5, #0]
 800117a:	605a      	str	r2, [r3, #4]
 800117c:	3501      	adds	r5, #1
 800117e:	e7ca      	b.n	8001116 <HAL_UART_Transmit+0x42>
      return  HAL_ERROR;
 8001180:	2001      	movs	r0, #1
 8001182:	e7e9      	b.n	8001158 <HAL_UART_Transmit+0x84>
    return HAL_BUSY;
 8001184:	2002      	movs	r0, #2
 8001186:	e7e7      	b.n	8001158 <HAL_UART_Transmit+0x84>

08001188 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8001188:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 800118a:	f000 fe41 	bl	8001e10 <vTaskStartScheduler>
  
  return osOK;
}
 800118e:	2000      	movs	r0, #0
 8001190:	bd08      	pop	{r3, pc}

08001192 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8001192:	b530      	push	{r4, r5, lr}

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001194:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
 8001198:	8a02      	ldrh	r2, [r0, #16]
{
 800119a:	460b      	mov	r3, r1
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800119c:	e9d0 1500 	ldrd	r1, r5, [r0]
{
 80011a0:	b085      	sub	sp, #20
  if (priority != osPriorityError) {
 80011a2:	2c84      	cmp	r4, #132	; 0x84
    fpriority += (priority - osPriorityIdle);
 80011a4:	bf14      	ite	ne
 80011a6:	3403      	addne	r4, #3
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80011a8:	2400      	moveq	r4, #0
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80011aa:	a803      	add	r0, sp, #12
 80011ac:	e9cd 4000 	strd	r4, r0, [sp]
 80011b0:	4628      	mov	r0, r5
 80011b2:	f000 fd5d 	bl	8001c70 <xTaskCreate>
 80011b6:	2801      	cmp	r0, #1
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80011b8:	bf0c      	ite	eq
 80011ba:	9803      	ldreq	r0, [sp, #12]
    return NULL;
 80011bc:	2000      	movne	r0, #0
}
 80011be:	b005      	add	sp, #20
 80011c0:	bd30      	pop	{r4, r5, pc}

080011c2 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80011c2:	b508      	push	{r3, lr}
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80011c4:	2800      	cmp	r0, #0
 80011c6:	bf08      	it	eq
 80011c8:	2001      	moveq	r0, #1
 80011ca:	f000 ff6d 	bl	80020a8 <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80011ce:	2000      	movs	r0, #0
 80011d0:	bd08      	pop	{r3, pc}

080011d2 <osSystickHandler>:
* @brief  Handles the tick increment
* @param  none.
* @retval none.
*/
void osSystickHandler(void)
{
 80011d2:	b508      	push	{r3, lr}

#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80011d4:	f001 f8ac 	bl	8002330 <xTaskGetSchedulerState>
 80011d8:	2801      	cmp	r0, #1
 80011da:	d003      	beq.n	80011e4 <osSystickHandler+0x12>
#endif  /* INCLUDE_xTaskGetSchedulerState */  
    xPortSysTickHandler();
#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  }
#endif  /* INCLUDE_xTaskGetSchedulerState */  
}
 80011dc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    xPortSysTickHandler();
 80011e0:	f000 b9f0 	b.w	80015c4 <xPortSysTickHandler>
}
 80011e4:	bd08      	pop	{r3, pc}
	...

080011e8 <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80011e8:	b510      	push	{r4, lr}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80011ea:	4b0f      	ldr	r3, [pc, #60]	; (8001228 <prvInsertBlockIntoFreeList+0x40>)
 80011ec:	681a      	ldr	r2, [r3, #0]
 80011ee:	4282      	cmp	r2, r0
 80011f0:	d318      	bcc.n	8001224 <prvInsertBlockIntoFreeList+0x3c>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80011f2:	685c      	ldr	r4, [r3, #4]
 80011f4:	1919      	adds	r1, r3, r4
 80011f6:	4288      	cmp	r0, r1
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80011f8:	bf01      	itttt	eq
 80011fa:	6841      	ldreq	r1, [r0, #4]
 80011fc:	4618      	moveq	r0, r3
 80011fe:	1909      	addeq	r1, r1, r4
 8001200:	6059      	streq	r1, [r3, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8001202:	6844      	ldr	r4, [r0, #4]
 8001204:	1901      	adds	r1, r0, r4
 8001206:	428a      	cmp	r2, r1
 8001208:	d107      	bne.n	800121a <prvInsertBlockIntoFreeList+0x32>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800120a:	4908      	ldr	r1, [pc, #32]	; (800122c <prvInsertBlockIntoFreeList+0x44>)
 800120c:	6809      	ldr	r1, [r1, #0]
 800120e:	428a      	cmp	r2, r1
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8001210:	bf1f      	itttt	ne
 8001212:	6851      	ldrne	r1, [r2, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8001214:	6812      	ldrne	r2, [r2, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8001216:	1909      	addne	r1, r1, r4
 8001218:	6041      	strne	r1, [r0, #4]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800121a:	4298      	cmp	r0, r3
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800121c:	6002      	str	r2, [r0, #0]
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800121e:	bf18      	it	ne
 8001220:	6018      	strne	r0, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8001222:	bd10      	pop	{r4, pc}
 8001224:	4613      	mov	r3, r2
 8001226:	e7e1      	b.n	80011ec <prvInsertBlockIntoFreeList+0x4>
 8001228:	20003c34 	.word	0x20003c34
 800122c:	20000024 	.word	0x20000024

08001230 <pvPortMalloc>:
{
 8001230:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001234:	4604      	mov	r4, r0
	vTaskSuspendAll();
 8001236:	f000 fe27 	bl	8001e88 <vTaskSuspendAll>
		if( pxEnd == NULL )
 800123a:	493d      	ldr	r1, [pc, #244]	; (8001330 <pvPortMalloc+0x100>)
 800123c:	4d3d      	ldr	r5, [pc, #244]	; (8001334 <pvPortMalloc+0x104>)
 800123e:	680b      	ldr	r3, [r1, #0]
 8001240:	b9fb      	cbnz	r3, 8001282 <pvPortMalloc+0x52>
	uxAddress = ( size_t ) ucHeap;
 8001242:	4a3d      	ldr	r2, [pc, #244]	; (8001338 <pvPortMalloc+0x108>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8001244:	0756      	lsls	r6, r2, #29
 8001246:	f502 5370 	add.w	r3, r2, #15360	; 0x3c00
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800124a:	bf1d      	ittte	ne
 800124c:	3207      	addne	r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800124e:	f022 0207 	bicne.w	r2, r2, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8001252:	1a9b      	subne	r3, r3, r2
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8001254:	f44f 5370 	moveq.w	r3, #15360	; 0x3c00
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8001258:	4413      	add	r3, r2
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800125a:	4e38      	ldr	r6, [pc, #224]	; (800133c <pvPortMalloc+0x10c>)
	uxAddress -= xHeapStructSize;
 800125c:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800125e:	f023 0307 	bic.w	r3, r3, #7
	xStart.xBlockSize = ( size_t ) 0;
 8001262:	2000      	movs	r0, #0
 8001264:	6070      	str	r0, [r6, #4]
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8001266:	6032      	str	r2, [r6, #0]
	pxEnd->pxNextFreeBlock = NULL;
 8001268:	e9c3 0000 	strd	r0, r0, [r3]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800126c:	1a98      	subs	r0, r3, r2
	pxEnd = ( void * ) uxAddress;
 800126e:	600b      	str	r3, [r1, #0]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8001270:	e9c2 3000 	strd	r3, r0, [r2]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001274:	4b32      	ldr	r3, [pc, #200]	; (8001340 <pvPortMalloc+0x110>)
 8001276:	6018      	str	r0, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001278:	4b32      	ldr	r3, [pc, #200]	; (8001344 <pvPortMalloc+0x114>)
 800127a:	6018      	str	r0, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800127c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8001280:	602b      	str	r3, [r5, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8001282:	682f      	ldr	r7, [r5, #0]
 8001284:	4227      	tst	r7, r4
 8001286:	d14e      	bne.n	8001326 <pvPortMalloc+0xf6>
			if( xWantedSize > 0 )
 8001288:	2c00      	cmp	r4, #0
 800128a:	d03f      	beq.n	800130c <pvPortMalloc+0xdc>
				xWantedSize += xHeapStructSize;
 800128c:	f104 0308 	add.w	r3, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8001290:	0758      	lsls	r0, r3, #29
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8001292:	bf1c      	itt	ne
 8001294:	f023 0307 	bicne.w	r3, r3, #7
 8001298:	3308      	addne	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800129a:	2b00      	cmp	r3, #0
 800129c:	d043      	beq.n	8001326 <pvPortMalloc+0xf6>
 800129e:	4a29      	ldr	r2, [pc, #164]	; (8001344 <pvPortMalloc+0x114>)
 80012a0:	6816      	ldr	r6, [r2, #0]
 80012a2:	429e      	cmp	r6, r3
 80012a4:	4690      	mov	r8, r2
 80012a6:	d33e      	bcc.n	8001326 <pvPortMalloc+0xf6>
				pxBlock = xStart.pxNextFreeBlock;
 80012a8:	4a24      	ldr	r2, [pc, #144]	; (800133c <pvPortMalloc+0x10c>)
 80012aa:	6815      	ldr	r5, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80012ac:	6868      	ldr	r0, [r5, #4]
 80012ae:	4298      	cmp	r0, r3
 80012b0:	d201      	bcs.n	80012b6 <pvPortMalloc+0x86>
 80012b2:	682c      	ldr	r4, [r5, #0]
 80012b4:	b9a4      	cbnz	r4, 80012e0 <pvPortMalloc+0xb0>
				if( pxBlock != pxEnd )
 80012b6:	6809      	ldr	r1, [r1, #0]
 80012b8:	42a9      	cmp	r1, r5
 80012ba:	d034      	beq.n	8001326 <pvPortMalloc+0xf6>
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80012bc:	6829      	ldr	r1, [r5, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80012be:	6814      	ldr	r4, [r2, #0]
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80012c0:	6011      	str	r1, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80012c2:	1ac2      	subs	r2, r0, r3
 80012c4:	2a10      	cmp	r2, #16
 80012c6:	d912      	bls.n	80012ee <pvPortMalloc+0xbe>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80012c8:	18e8      	adds	r0, r5, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80012ca:	0741      	lsls	r1, r0, #29
 80012cc:	d00b      	beq.n	80012e6 <pvPortMalloc+0xb6>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80012ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80012d2:	f383 8811 	msr	BASEPRI, r3
 80012d6:	f3bf 8f6f 	isb	sy
 80012da:	f3bf 8f4f 	dsb	sy
 80012de:	e7fe      	b.n	80012de <pvPortMalloc+0xae>
 80012e0:	462a      	mov	r2, r5
 80012e2:	4625      	mov	r5, r4
 80012e4:	e7e2      	b.n	80012ac <pvPortMalloc+0x7c>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80012e6:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 80012e8:	606b      	str	r3, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80012ea:	f7ff ff7d 	bl	80011e8 <prvInsertBlockIntoFreeList>
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80012ee:	4914      	ldr	r1, [pc, #80]	; (8001340 <pvPortMalloc+0x110>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80012f0:	686b      	ldr	r3, [r5, #4]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80012f2:	6808      	ldr	r0, [r1, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80012f4:	1af6      	subs	r6, r6, r3
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80012f6:	431f      	orrs	r7, r3
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80012f8:	4286      	cmp	r6, r0
					pxBlock->pxNextFreeBlock = NULL;
 80012fa:	f04f 0300 	mov.w	r3, #0
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80012fe:	f8c8 6000 	str.w	r6, [r8]
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8001302:	bf38      	it	cc
 8001304:	600e      	strcc	r6, [r1, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8001306:	3408      	adds	r4, #8
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8001308:	606f      	str	r7, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800130a:	602b      	str	r3, [r5, #0]
	( void ) xTaskResumeAll();
 800130c:	f000 fe56 	bl	8001fbc <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8001310:	0763      	lsls	r3, r4, #29
 8001312:	d00a      	beq.n	800132a <pvPortMalloc+0xfa>
 8001314:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001318:	f383 8811 	msr	BASEPRI, r3
 800131c:	f3bf 8f6f 	isb	sy
 8001320:	f3bf 8f4f 	dsb	sy
 8001324:	e7fe      	b.n	8001324 <pvPortMalloc+0xf4>
void *pvReturn = NULL;
 8001326:	2400      	movs	r4, #0
 8001328:	e7f0      	b.n	800130c <pvPortMalloc+0xdc>
}
 800132a:	4620      	mov	r0, r4
 800132c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001330:	20000024 	.word	0x20000024
 8001334:	20003c28 	.word	0x20003c28
 8001338:	20000028 	.word	0x20000028
 800133c:	20003c34 	.word	0x20003c34
 8001340:	20003c30 	.word	0x20003c30
 8001344:	20003c2c 	.word	0x20003c2c

08001348 <vPortFree>:
{
 8001348:	b510      	push	{r4, lr}
	if( pv != NULL )
 800134a:	4604      	mov	r4, r0
 800134c:	b370      	cbz	r0, 80013ac <vPortFree+0x64>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800134e:	4a18      	ldr	r2, [pc, #96]	; (80013b0 <vPortFree+0x68>)
 8001350:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8001354:	6812      	ldr	r2, [r2, #0]
 8001356:	4213      	tst	r3, r2
 8001358:	d108      	bne.n	800136c <vPortFree+0x24>
 800135a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800135e:	f383 8811 	msr	BASEPRI, r3
 8001362:	f3bf 8f6f 	isb	sy
 8001366:	f3bf 8f4f 	dsb	sy
 800136a:	e7fe      	b.n	800136a <vPortFree+0x22>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800136c:	f850 1c08 	ldr.w	r1, [r0, #-8]
 8001370:	b141      	cbz	r1, 8001384 <vPortFree+0x3c>
 8001372:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001376:	f383 8811 	msr	BASEPRI, r3
 800137a:	f3bf 8f6f 	isb	sy
 800137e:	f3bf 8f4f 	dsb	sy
 8001382:	e7fe      	b.n	8001382 <vPortFree+0x3a>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8001384:	ea23 0302 	bic.w	r3, r3, r2
 8001388:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 800138c:	f000 fd7c 	bl	8001e88 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 8001390:	4a08      	ldr	r2, [pc, #32]	; (80013b4 <vPortFree+0x6c>)
 8001392:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8001396:	6811      	ldr	r1, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8001398:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 800139c:	440b      	add	r3, r1
 800139e:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80013a0:	f7ff ff22 	bl	80011e8 <prvInsertBlockIntoFreeList>
}
 80013a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				( void ) xTaskResumeAll();
 80013a8:	f000 be08 	b.w	8001fbc <xTaskResumeAll>
}
 80013ac:	bd10      	pop	{r4, pc}
 80013ae:	bf00      	nop
 80013b0:	20003c28 	.word	0x20003c28
 80013b4:	20003c2c 	.word	0x20003c2c

080013b8 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80013b8:	f100 0308 	add.w	r3, r0, #8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80013bc:	f04f 32ff 	mov.w	r2, #4294967295
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80013c0:	6043      	str	r3, [r0, #4]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80013c2:	e9c0 2302 	strd	r2, r3, [r0, #8]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80013c6:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80013c8:	2300      	movs	r3, #0
 80013ca:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80013cc:	4770      	bx	lr

080013ce <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80013ce:	2300      	movs	r3, #0
 80013d0:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80013d2:	4770      	bx	lr

080013d4 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 80013d4:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80013d6:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80013d8:	689a      	ldr	r2, [r3, #8]
 80013da:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80013dc:	689a      	ldr	r2, [r3, #8]
 80013de:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80013e0:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 80013e2:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 80013e4:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 80013e6:	3301      	adds	r3, #1
 80013e8:	6003      	str	r3, [r0, #0]
}
 80013ea:	4770      	bx	lr

080013ec <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80013ec:	680a      	ldr	r2, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80013ee:	1c53      	adds	r3, r2, #1
{
 80013f0:	b530      	push	{r4, r5, lr}
	if( xValueOfInsertion == portMAX_DELAY )
 80013f2:	d10a      	bne.n	800140a <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80013f4:	6903      	ldr	r3, [r0, #16]
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80013f6:	685a      	ldr	r2, [r3, #4]
 80013f8:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80013fa:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80013fc:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 80013fe:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 8001400:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 8001402:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8001404:	3301      	adds	r3, #1
 8001406:	6003      	str	r3, [r0, #0]
}
 8001408:	bd30      	pop	{r4, r5, pc}
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800140a:	f100 0308 	add.w	r3, r0, #8
 800140e:	685c      	ldr	r4, [r3, #4]
 8001410:	6825      	ldr	r5, [r4, #0]
 8001412:	4295      	cmp	r5, r2
 8001414:	d8ef      	bhi.n	80013f6 <vListInsert+0xa>
 8001416:	4623      	mov	r3, r4
 8001418:	e7f9      	b.n	800140e <vListInsert+0x22>

0800141a <uxListRemove>:
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800141a:	e9d0 1201 	ldrd	r1, r2, [r0, #4]
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800141e:	6903      	ldr	r3, [r0, #16]
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001420:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001422:	6882      	ldr	r2, [r0, #8]
 8001424:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8001426:	6859      	ldr	r1, [r3, #4]
 8001428:	4281      	cmp	r1, r0
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800142a:	bf08      	it	eq
 800142c:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800142e:	2200      	movs	r2, #0
 8001430:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8001432:	6818      	ldr	r0, [r3, #0]
 8001434:	3801      	subs	r0, #1
 8001436:	6018      	str	r0, [r3, #0]

	return pxList->uxNumberOfItems;
}
 8001438:	4770      	bx	lr
	...

0800143c <prvTaskExitError>:
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800143c:	4b0a      	ldr	r3, [pc, #40]	; (8001468 <prvTaskExitError+0x2c>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	3301      	adds	r3, #1
 8001442:	d008      	beq.n	8001456 <prvTaskExitError+0x1a>
 8001444:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001448:	f383 8811 	msr	BASEPRI, r3
 800144c:	f3bf 8f6f 	isb	sy
 8001450:	f3bf 8f4f 	dsb	sy
 8001454:	e7fe      	b.n	8001454 <prvTaskExitError+0x18>
 8001456:	f04f 0350 	mov.w	r3, #80	; 0x50
 800145a:	f383 8811 	msr	BASEPRI, r3
 800145e:	f3bf 8f6f 	isb	sy
 8001462:	f3bf 8f4f 	dsb	sy
 8001466:	e7fe      	b.n	8001466 <prvTaskExitError+0x2a>
 8001468:	20000000 	.word	0x20000000

0800146c <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 800146c:	4806      	ldr	r0, [pc, #24]	; (8001488 <prvPortStartFirstTask+0x1c>)
 800146e:	6800      	ldr	r0, [r0, #0]
 8001470:	6800      	ldr	r0, [r0, #0]
 8001472:	f380 8808 	msr	MSP, r0
 8001476:	b662      	cpsie	i
 8001478:	b661      	cpsie	f
 800147a:	f3bf 8f4f 	dsb	sy
 800147e:	f3bf 8f6f 	isb	sy
 8001482:	df00      	svc	0
 8001484:	bf00      	nop
 8001486:	0000      	.short	0x0000
 8001488:	e000ed08 	.word	0xe000ed08

0800148c <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800148c:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800149c <vPortEnableVFP+0x10>
 8001490:	6801      	ldr	r1, [r0, #0]
 8001492:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8001496:	6001      	str	r1, [r0, #0]
 8001498:	4770      	bx	lr
 800149a:	0000      	.short	0x0000
 800149c:	e000ed88 	.word	0xe000ed88

080014a0 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80014a0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80014a4:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80014a8:	4b07      	ldr	r3, [pc, #28]	; (80014c8 <pxPortInitialiseStack+0x28>)
 80014aa:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80014ae:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
 80014b2:	f06f 0302 	mvn.w	r3, #2
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80014b6:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80014ba:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
 80014be:	f840 3c24 	str.w	r3, [r0, #-36]
}
 80014c2:	3844      	subs	r0, #68	; 0x44
 80014c4:	4770      	bx	lr
 80014c6:	bf00      	nop
 80014c8:	0800143d 	.word	0x0800143d
 80014cc:	00000000 	.word	0x00000000

080014d0 <SVC_Handler>:
	__asm volatile (
 80014d0:	4b07      	ldr	r3, [pc, #28]	; (80014f0 <pxCurrentTCBConst2>)
 80014d2:	6819      	ldr	r1, [r3, #0]
 80014d4:	6808      	ldr	r0, [r1, #0]
 80014d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80014da:	f380 8809 	msr	PSP, r0
 80014de:	f3bf 8f6f 	isb	sy
 80014e2:	f04f 0000 	mov.w	r0, #0
 80014e6:	f380 8811 	msr	BASEPRI, r0
 80014ea:	4770      	bx	lr
 80014ec:	f3af 8000 	nop.w

080014f0 <pxCurrentTCBConst2>:
 80014f0:	20003c44 	.word	0x20003c44

080014f4 <vPortEnterCritical>:
 80014f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80014f8:	f383 8811 	msr	BASEPRI, r3
 80014fc:	f3bf 8f6f 	isb	sy
 8001500:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 8001504:	4a0a      	ldr	r2, [pc, #40]	; (8001530 <vPortEnterCritical+0x3c>)
 8001506:	6813      	ldr	r3, [r2, #0]
 8001508:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 800150a:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 800150c:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 800150e:	d10d      	bne.n	800152c <vPortEnterCritical+0x38>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8001510:	4b08      	ldr	r3, [pc, #32]	; (8001534 <vPortEnterCritical+0x40>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	f013 0fff 	tst.w	r3, #255	; 0xff
 8001518:	d008      	beq.n	800152c <vPortEnterCritical+0x38>
 800151a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800151e:	f383 8811 	msr	BASEPRI, r3
 8001522:	f3bf 8f6f 	isb	sy
 8001526:	f3bf 8f4f 	dsb	sy
 800152a:	e7fe      	b.n	800152a <vPortEnterCritical+0x36>
}
 800152c:	4770      	bx	lr
 800152e:	bf00      	nop
 8001530:	20000000 	.word	0x20000000
 8001534:	e000ed04 	.word	0xe000ed04

08001538 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 8001538:	4a08      	ldr	r2, [pc, #32]	; (800155c <vPortExitCritical+0x24>)
 800153a:	6813      	ldr	r3, [r2, #0]
 800153c:	b943      	cbnz	r3, 8001550 <vPortExitCritical+0x18>
 800153e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001542:	f383 8811 	msr	BASEPRI, r3
 8001546:	f3bf 8f6f 	isb	sy
 800154a:	f3bf 8f4f 	dsb	sy
 800154e:	e7fe      	b.n	800154e <vPortExitCritical+0x16>
	uxCriticalNesting--;
 8001550:	3b01      	subs	r3, #1
 8001552:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8001554:	b90b      	cbnz	r3, 800155a <vPortExitCritical+0x22>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8001556:	f383 8811 	msr	BASEPRI, r3
}
 800155a:	4770      	bx	lr
 800155c:	20000000 	.word	0x20000000

08001560 <PendSV_Handler>:
	__asm volatile
 8001560:	f3ef 8009 	mrs	r0, PSP
 8001564:	f3bf 8f6f 	isb	sy
 8001568:	4b15      	ldr	r3, [pc, #84]	; (80015c0 <pxCurrentTCBConst>)
 800156a:	681a      	ldr	r2, [r3, #0]
 800156c:	f01e 0f10 	tst.w	lr, #16
 8001570:	bf08      	it	eq
 8001572:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8001576:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800157a:	6010      	str	r0, [r2, #0]
 800157c:	f84d 3d04 	str.w	r3, [sp, #-4]!
 8001580:	f04f 0050 	mov.w	r0, #80	; 0x50
 8001584:	f380 8811 	msr	BASEPRI, r0
 8001588:	f3bf 8f4f 	dsb	sy
 800158c:	f3bf 8f6f 	isb	sy
 8001590:	f000 fde8 	bl	8002164 <vTaskSwitchContext>
 8001594:	f04f 0000 	mov.w	r0, #0
 8001598:	f380 8811 	msr	BASEPRI, r0
 800159c:	bc08      	pop	{r3}
 800159e:	6819      	ldr	r1, [r3, #0]
 80015a0:	6808      	ldr	r0, [r1, #0]
 80015a2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80015a6:	f01e 0f10 	tst.w	lr, #16
 80015aa:	bf08      	it	eq
 80015ac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80015b0:	f380 8809 	msr	PSP, r0
 80015b4:	f3bf 8f6f 	isb	sy
 80015b8:	4770      	bx	lr
 80015ba:	bf00      	nop
 80015bc:	f3af 8000 	nop.w

080015c0 <pxCurrentTCBConst>:
 80015c0:	20003c44 	.word	0x20003c44

080015c4 <xPortSysTickHandler>:
{
 80015c4:	b508      	push	{r3, lr}
	__asm volatile
 80015c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80015ca:	f383 8811 	msr	BASEPRI, r3
 80015ce:	f3bf 8f6f 	isb	sy
 80015d2:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 80015d6:	f000 fc5f 	bl	8001e98 <xTaskIncrementTick>
 80015da:	b118      	cbz	r0, 80015e4 <xPortSysTickHandler+0x20>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80015dc:	4b03      	ldr	r3, [pc, #12]	; (80015ec <xPortSysTickHandler+0x28>)
 80015de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80015e2:	601a      	str	r2, [r3, #0]
	__asm volatile
 80015e4:	2300      	movs	r3, #0
 80015e6:	f383 8811 	msr	BASEPRI, r3
}
 80015ea:	bd08      	pop	{r3, pc}
 80015ec:	e000ed04 	.word	0xe000ed04

080015f0 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80015f0:	4b06      	ldr	r3, [pc, #24]	; (800160c <vPortSetupTimerInterrupt+0x1c>)
 80015f2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	fbb3 f3f2 	udiv	r3, r3, r2
 80015fc:	4a04      	ldr	r2, [pc, #16]	; (8001610 <vPortSetupTimerInterrupt+0x20>)
 80015fe:	3b01      	subs	r3, #1
 8001600:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8001602:	4b04      	ldr	r3, [pc, #16]	; (8001614 <vPortSetupTimerInterrupt+0x24>)
 8001604:	2207      	movs	r2, #7
 8001606:	601a      	str	r2, [r3, #0]
}
 8001608:	4770      	bx	lr
 800160a:	bf00      	nop
 800160c:	20000004 	.word	0x20000004
 8001610:	e000e014 	.word	0xe000e014
 8001614:	e000e010 	.word	0xe000e010

08001618 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8001618:	4b31      	ldr	r3, [pc, #196]	; (80016e0 <xPortStartScheduler+0xc8>)
 800161a:	4a32      	ldr	r2, [pc, #200]	; (80016e4 <xPortStartScheduler+0xcc>)
{
 800161c:	b513      	push	{r0, r1, r4, lr}
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800161e:	6819      	ldr	r1, [r3, #0]
 8001620:	4291      	cmp	r1, r2
 8001622:	d108      	bne.n	8001636 <xPortStartScheduler+0x1e>
	__asm volatile
 8001624:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001628:	f383 8811 	msr	BASEPRI, r3
 800162c:	f3bf 8f6f 	isb	sy
 8001630:	f3bf 8f4f 	dsb	sy
 8001634:	e7fe      	b.n	8001634 <xPortStartScheduler+0x1c>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8001636:	681a      	ldr	r2, [r3, #0]
 8001638:	4b2b      	ldr	r3, [pc, #172]	; (80016e8 <xPortStartScheduler+0xd0>)
 800163a:	429a      	cmp	r2, r3
 800163c:	d108      	bne.n	8001650 <xPortStartScheduler+0x38>
 800163e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001642:	f383 8811 	msr	BASEPRI, r3
 8001646:	f3bf 8f6f 	isb	sy
 800164a:	f3bf 8f4f 	dsb	sy
 800164e:	e7fe      	b.n	800164e <xPortStartScheduler+0x36>
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8001650:	4b26      	ldr	r3, [pc, #152]	; (80016ec <xPortStartScheduler+0xd4>)
 8001652:	781a      	ldrb	r2, [r3, #0]
 8001654:	b2d2      	uxtb	r2, r2
 8001656:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8001658:	22ff      	movs	r2, #255	; 0xff
 800165a:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800165c:	781b      	ldrb	r3, [r3, #0]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800165e:	4a24      	ldr	r2, [pc, #144]	; (80016f0 <xPortStartScheduler+0xd8>)
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8001660:	b2db      	uxtb	r3, r3
 8001662:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8001666:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800166a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800166e:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8001670:	4b20      	ldr	r3, [pc, #128]	; (80016f4 <xPortStartScheduler+0xdc>)
 8001672:	2207      	movs	r2, #7
 8001674:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8001676:	2100      	movs	r1, #0
 8001678:	f89d 0003 	ldrb.w	r0, [sp, #3]
 800167c:	0600      	lsls	r0, r0, #24
 800167e:	f102 34ff 	add.w	r4, r2, #4294967295
 8001682:	d423      	bmi.n	80016cc <xPortStartScheduler+0xb4>
 8001684:	b101      	cbz	r1, 8001688 <xPortStartScheduler+0x70>
 8001686:	601a      	str	r2, [r3, #0]
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8001688:	681a      	ldr	r2, [r3, #0]
 800168a:	0212      	lsls	r2, r2, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800168c:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8001690:	601a      	str	r2, [r3, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8001692:	9b01      	ldr	r3, [sp, #4]
 8001694:	4a15      	ldr	r2, [pc, #84]	; (80016ec <xPortStartScheduler+0xd4>)
 8001696:	b2db      	uxtb	r3, r3
 8001698:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800169a:	4b17      	ldr	r3, [pc, #92]	; (80016f8 <xPortStartScheduler+0xe0>)
 800169c:	681a      	ldr	r2, [r3, #0]
 800169e:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 80016a2:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80016a4:	681a      	ldr	r2, [r3, #0]
 80016a6:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 80016aa:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
 80016ac:	f7ff ffa0 	bl	80015f0 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 80016b0:	4b12      	ldr	r3, [pc, #72]	; (80016fc <xPortStartScheduler+0xe4>)
 80016b2:	2200      	movs	r2, #0
 80016b4:	601a      	str	r2, [r3, #0]
	vPortEnableVFP();
 80016b6:	f7ff fee9 	bl	800148c <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80016ba:	4a11      	ldr	r2, [pc, #68]	; (8001700 <xPortStartScheduler+0xe8>)
 80016bc:	6813      	ldr	r3, [r2, #0]
 80016be:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80016c2:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
 80016c4:	f7ff fed2 	bl	800146c <prvPortStartFirstTask>
	prvTaskExitError();
 80016c8:	f7ff feb8 	bl	800143c <prvTaskExitError>
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80016cc:	f89d 2003 	ldrb.w	r2, [sp, #3]
 80016d0:	0052      	lsls	r2, r2, #1
 80016d2:	b2d2      	uxtb	r2, r2
 80016d4:	f88d 2003 	strb.w	r2, [sp, #3]
 80016d8:	2101      	movs	r1, #1
 80016da:	4622      	mov	r2, r4
 80016dc:	e7cc      	b.n	8001678 <xPortStartScheduler+0x60>
 80016de:	bf00      	nop
 80016e0:	e000ed00 	.word	0xe000ed00
 80016e4:	410fc271 	.word	0x410fc271
 80016e8:	410fc270 	.word	0x410fc270
 80016ec:	e000e400 	.word	0xe000e400
 80016f0:	20003c3c 	.word	0x20003c3c
 80016f4:	20003c40 	.word	0x20003c40
 80016f8:	e000ed20 	.word	0xe000ed20
 80016fc:	20000000 	.word	0x20000000
 8001700:	e000ef34 	.word	0xe000ef34

08001704 <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8001704:	b570      	push	{r4, r5, r6, lr}
 8001706:	4615      	mov	r5, r2

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8001708:	6c02      	ldr	r2, [r0, #64]	; 0x40
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800170a:	6b86      	ldr	r6, [r0, #56]	; 0x38
{
 800170c:	4604      	mov	r4, r0
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800170e:	b942      	cbnz	r2, 8001722 <prvCopyDataToQueue+0x1e>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8001710:	6805      	ldr	r5, [r0, #0]
 8001712:	b99d      	cbnz	r5, 800173c <prvCopyDataToQueue+0x38>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8001714:	6840      	ldr	r0, [r0, #4]
 8001716:	f000 fe63 	bl	80023e0 <xTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
 800171a:	6065      	str	r5, [r4, #4]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
 800171c:	3601      	adds	r6, #1
 800171e:	63a6      	str	r6, [r4, #56]	; 0x38

	return xReturn;
}
 8001720:	bd70      	pop	{r4, r5, r6, pc}
	else if( xPosition == queueSEND_TO_BACK )
 8001722:	b96d      	cbnz	r5, 8001740 <prvCopyDataToQueue+0x3c>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8001724:	6880      	ldr	r0, [r0, #8]
 8001726:	f001 f8ed 	bl	8002904 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800172a:	68a3      	ldr	r3, [r4, #8]
 800172c:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800172e:	4413      	add	r3, r2
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8001730:	6862      	ldr	r2, [r4, #4]
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8001732:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8001734:	4293      	cmp	r3, r2
 8001736:	d301      	bcc.n	800173c <prvCopyDataToQueue+0x38>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8001738:	6823      	ldr	r3, [r4, #0]
 800173a:	60a3      	str	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
 800173c:	2000      	movs	r0, #0
 800173e:	e7ed      	b.n	800171c <prvCopyDataToQueue+0x18>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001740:	68c0      	ldr	r0, [r0, #12]
 8001742:	f001 f8df 	bl	8002904 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8001746:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001748:	68e2      	ldr	r2, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800174a:	6821      	ldr	r1, [r4, #0]
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800174c:	425b      	negs	r3, r3
 800174e:	441a      	add	r2, r3
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8001750:	428a      	cmp	r2, r1
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8001752:	60e2      	str	r2, [r4, #12]
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8001754:	bf3e      	ittt	cc
 8001756:	6862      	ldrcc	r2, [r4, #4]
 8001758:	189b      	addcc	r3, r3, r2
 800175a:	60e3      	strcc	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 800175c:	2d02      	cmp	r5, #2
 800175e:	d1ed      	bne.n	800173c <prvCopyDataToQueue+0x38>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8001760:	b10e      	cbz	r6, 8001766 <prvCopyDataToQueue+0x62>
				--uxMessagesWaiting;
 8001762:	3e01      	subs	r6, #1
 8001764:	e7ea      	b.n	800173c <prvCopyDataToQueue+0x38>
BaseType_t xReturn = pdFALSE;
 8001766:	4630      	mov	r0, r6
 8001768:	e7d8      	b.n	800171c <prvCopyDataToQueue+0x18>

0800176a <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800176a:	4603      	mov	r3, r0
 800176c:	b410      	push	{r4}
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800176e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
{
 8001770:	4608      	mov	r0, r1
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8001772:	b162      	cbz	r2, 800178e <prvCopyDataFromQueue+0x24>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8001774:	68d9      	ldr	r1, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8001776:	685c      	ldr	r4, [r3, #4]
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8001778:	4411      	add	r1, r2
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800177a:	42a1      	cmp	r1, r4
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800177c:	60d9      	str	r1, [r3, #12]
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800177e:	bf24      	itt	cs
 8001780:	6819      	ldrcs	r1, [r3, #0]
 8001782:	60d9      	strcs	r1, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8001784:	68d9      	ldr	r1, [r3, #12]
	}
}
 8001786:	f85d 4b04 	ldr.w	r4, [sp], #4
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800178a:	f001 b8bb 	b.w	8002904 <memcpy>
}
 800178e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001792:	4770      	bx	lr

08001794 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8001794:	b570      	push	{r4, r5, r6, lr}
 8001796:	4604      	mov	r4, r0

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8001798:	f7ff feac 	bl	80014f4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800179c:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80017a0:	f104 0624 	add.w	r6, r4, #36	; 0x24
		int8_t cTxLock = pxQueue->cTxLock;
 80017a4:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80017a6:	2d00      	cmp	r5, #0
 80017a8:	dc14      	bgt.n	80017d4 <prvUnlockQueue+0x40>
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80017aa:	23ff      	movs	r3, #255	; 0xff
 80017ac:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80017b0:	f7ff fec2 	bl	8001538 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80017b4:	f7ff fe9e 	bl	80014f4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80017b8:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44

		while( cRxLock > queueLOCKED_UNMODIFIED )
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80017bc:	f104 0610 	add.w	r6, r4, #16
		int8_t cRxLock = pxQueue->cRxLock;
 80017c0:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80017c2:	2d00      	cmp	r5, #0
 80017c4:	dc12      	bgt.n	80017ec <prvUnlockQueue+0x58>
			{
				break;
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80017c6:	23ff      	movs	r3, #255	; 0xff
 80017c8:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
}
 80017cc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
 80017d0:	f7ff beb2 	b.w	8001538 <vPortExitCritical>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80017d4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d0e7      	beq.n	80017aa <prvUnlockQueue+0x16>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80017da:	4630      	mov	r0, r6
 80017dc:	f000 fd16 	bl	800220c <xTaskRemoveFromEventList>
 80017e0:	b108      	cbz	r0, 80017e6 <prvUnlockQueue+0x52>
						vTaskMissedYield();
 80017e2:	f000 fd9f 	bl	8002324 <vTaskMissedYield>
 80017e6:	3d01      	subs	r5, #1
 80017e8:	b26d      	sxtb	r5, r5
 80017ea:	e7dc      	b.n	80017a6 <prvUnlockQueue+0x12>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80017ec:	6923      	ldr	r3, [r4, #16]
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d0e9      	beq.n	80017c6 <prvUnlockQueue+0x32>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80017f2:	4630      	mov	r0, r6
 80017f4:	f000 fd0a 	bl	800220c <xTaskRemoveFromEventList>
 80017f8:	b108      	cbz	r0, 80017fe <prvUnlockQueue+0x6a>
					vTaskMissedYield();
 80017fa:	f000 fd93 	bl	8002324 <vTaskMissedYield>
 80017fe:	3d01      	subs	r5, #1
 8001800:	b26d      	sxtb	r5, r5
 8001802:	e7de      	b.n	80017c2 <prvUnlockQueue+0x2e>

08001804 <xQueueGenericReset>:
{
 8001804:	b538      	push	{r3, r4, r5, lr}
 8001806:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 8001808:	4604      	mov	r4, r0
 800180a:	b940      	cbnz	r0, 800181e <xQueueGenericReset+0x1a>
 800180c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001810:	f383 8811 	msr	BASEPRI, r3
 8001814:	f3bf 8f6f 	isb	sy
 8001818:	f3bf 8f4f 	dsb	sy
 800181c:	e7fe      	b.n	800181c <xQueueGenericReset+0x18>
	taskENTER_CRITICAL();
 800181e:	f7ff fe69 	bl	80014f4 <vPortEnterCritical>
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8001822:	e9d4 300f 	ldrd	r3, r0, [r4, #60]	; 0x3c
 8001826:	6822      	ldr	r2, [r4, #0]
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8001828:	60a2      	str	r2, [r4, #8]
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800182a:	4343      	muls	r3, r0
 800182c:	18d1      	adds	r1, r2, r3
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800182e:	1a1b      	subs	r3, r3, r0
 8001830:	4413      	add	r3, r2
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8001832:	6061      	str	r1, [r4, #4]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8001834:	60e3      	str	r3, [r4, #12]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8001836:	2100      	movs	r1, #0
		pxQueue->cRxLock = queueUNLOCKED;
 8001838:	23ff      	movs	r3, #255	; 0xff
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800183a:	63a1      	str	r1, [r4, #56]	; 0x38
		pxQueue->cRxLock = queueUNLOCKED;
 800183c:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8001840:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
 8001844:	b995      	cbnz	r5, 800186c <xQueueGenericReset+0x68>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001846:	6923      	ldr	r3, [r4, #16]
 8001848:	b163      	cbz	r3, 8001864 <xQueueGenericReset+0x60>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800184a:	f104 0010 	add.w	r0, r4, #16
 800184e:	f000 fcdd 	bl	800220c <xTaskRemoveFromEventList>
 8001852:	b138      	cbz	r0, 8001864 <xQueueGenericReset+0x60>
					queueYIELD_IF_USING_PREEMPTION();
 8001854:	4b0a      	ldr	r3, [pc, #40]	; (8001880 <xQueueGenericReset+0x7c>)
 8001856:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800185a:	601a      	str	r2, [r3, #0]
 800185c:	f3bf 8f4f 	dsb	sy
 8001860:	f3bf 8f6f 	isb	sy
	taskEXIT_CRITICAL();
 8001864:	f7ff fe68 	bl	8001538 <vPortExitCritical>
}
 8001868:	2001      	movs	r0, #1
 800186a:	bd38      	pop	{r3, r4, r5, pc}
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800186c:	f104 0010 	add.w	r0, r4, #16
 8001870:	f7ff fda2 	bl	80013b8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8001874:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8001878:	f7ff fd9e 	bl	80013b8 <vListInitialise>
 800187c:	e7f2      	b.n	8001864 <xQueueGenericReset+0x60>
 800187e:	bf00      	nop
 8001880:	e000ed04 	.word	0xe000ed04

08001884 <xQueueGenericCreate>:
	{
 8001884:	b570      	push	{r4, r5, r6, lr}
 8001886:	460d      	mov	r5, r1
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8001888:	4606      	mov	r6, r0
 800188a:	b940      	cbnz	r0, 800189e <xQueueGenericCreate+0x1a>
 800188c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001890:	f383 8811 	msr	BASEPRI, r3
 8001894:	f3bf 8f6f 	isb	sy
 8001898:	f3bf 8f4f 	dsb	sy
 800189c:	e7fe      	b.n	800189c <xQueueGenericCreate+0x18>
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800189e:	4348      	muls	r0, r1
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 80018a0:	3048      	adds	r0, #72	; 0x48
 80018a2:	f7ff fcc5 	bl	8001230 <pvPortMalloc>
		if( pxNewQueue != NULL )
 80018a6:	4604      	mov	r4, r0
 80018a8:	b138      	cbz	r0, 80018ba <xQueueGenericCreate+0x36>
	if( uxItemSize == ( UBaseType_t ) 0 )
 80018aa:	b945      	cbnz	r5, 80018be <xQueueGenericCreate+0x3a>
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80018ac:	6020      	str	r0, [r4, #0]
	pxNewQueue->uxItemSize = uxItemSize;
 80018ae:	e9c4 650f 	strd	r6, r5, [r4, #60]	; 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80018b2:	2101      	movs	r1, #1
 80018b4:	4620      	mov	r0, r4
 80018b6:	f7ff ffa5 	bl	8001804 <xQueueGenericReset>
	}
 80018ba:	4620      	mov	r0, r4
 80018bc:	bd70      	pop	{r4, r5, r6, pc}
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 80018be:	f100 0348 	add.w	r3, r0, #72	; 0x48
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80018c2:	6003      	str	r3, [r0, #0]
 80018c4:	e7f3      	b.n	80018ae <xQueueGenericCreate+0x2a>
	...

080018c8 <xQueueGenericSend>:
{
 80018c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80018cc:	4688      	mov	r8, r1
 80018ce:	9201      	str	r2, [sp, #4]
 80018d0:	461f      	mov	r7, r3
	configASSERT( pxQueue );
 80018d2:	4604      	mov	r4, r0
 80018d4:	b940      	cbnz	r0, 80018e8 <xQueueGenericSend+0x20>
 80018d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80018da:	f383 8811 	msr	BASEPRI, r3
 80018de:	f3bf 8f6f 	isb	sy
 80018e2:	f3bf 8f4f 	dsb	sy
 80018e6:	e7fe      	b.n	80018e6 <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80018e8:	b951      	cbnz	r1, 8001900 <xQueueGenericSend+0x38>
 80018ea:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80018ec:	b143      	cbz	r3, 8001900 <xQueueGenericSend+0x38>
 80018ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80018f2:	f383 8811 	msr	BASEPRI, r3
 80018f6:	f3bf 8f6f 	isb	sy
 80018fa:	f3bf 8f4f 	dsb	sy
 80018fe:	e7fe      	b.n	80018fe <xQueueGenericSend+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8001900:	2f02      	cmp	r7, #2
 8001902:	d10b      	bne.n	800191c <xQueueGenericSend+0x54>
 8001904:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001906:	2b01      	cmp	r3, #1
 8001908:	d008      	beq.n	800191c <xQueueGenericSend+0x54>
 800190a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800190e:	f383 8811 	msr	BASEPRI, r3
 8001912:	f3bf 8f6f 	isb	sy
 8001916:	f3bf 8f4f 	dsb	sy
 800191a:	e7fe      	b.n	800191a <xQueueGenericSend+0x52>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800191c:	f000 fd08 	bl	8002330 <xTaskGetSchedulerState>
 8001920:	b950      	cbnz	r0, 8001938 <xQueueGenericSend+0x70>
 8001922:	9e01      	ldr	r6, [sp, #4]
 8001924:	b14e      	cbz	r6, 800193a <xQueueGenericSend+0x72>
 8001926:	f04f 0350 	mov.w	r3, #80	; 0x50
 800192a:	f383 8811 	msr	BASEPRI, r3
 800192e:	f3bf 8f6f 	isb	sy
 8001932:	f3bf 8f4f 	dsb	sy
 8001936:	e7fe      	b.n	8001936 <xQueueGenericSend+0x6e>
 8001938:	2600      	movs	r6, #0
		prvLockQueue( pxQueue );
 800193a:	f04f 0900 	mov.w	r9, #0
					portYIELD_WITHIN_API();
 800193e:	f8df a0e8 	ldr.w	sl, [pc, #232]	; 8001a28 <xQueueGenericSend+0x160>
 8001942:	e037      	b.n	80019b4 <xQueueGenericSend+0xec>
				if( xTicksToWait == ( TickType_t ) 0 )
 8001944:	9d01      	ldr	r5, [sp, #4]
 8001946:	b91d      	cbnz	r5, 8001950 <xQueueGenericSend+0x88>
					taskEXIT_CRITICAL();
 8001948:	f7ff fdf6 	bl	8001538 <vPortExitCritical>
			return errQUEUE_FULL;
 800194c:	2000      	movs	r0, #0
 800194e:	e050      	b.n	80019f2 <xQueueGenericSend+0x12a>
				else if( xEntryTimeSet == pdFALSE )
 8001950:	b916      	cbnz	r6, 8001958 <xQueueGenericSend+0x90>
					vTaskSetTimeOutState( &xTimeOut );
 8001952:	a802      	add	r0, sp, #8
 8001954:	f000 fc9c 	bl	8002290 <vTaskSetTimeOutState>
		taskEXIT_CRITICAL();
 8001958:	f7ff fdee 	bl	8001538 <vPortExitCritical>
		vTaskSuspendAll();
 800195c:	f000 fa94 	bl	8001e88 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8001960:	f7ff fdc8 	bl	80014f4 <vPortEnterCritical>
 8001964:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8001968:	2bff      	cmp	r3, #255	; 0xff
 800196a:	bf08      	it	eq
 800196c:	f884 9044 	strbeq.w	r9, [r4, #68]	; 0x44
 8001970:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8001974:	2bff      	cmp	r3, #255	; 0xff
 8001976:	bf08      	it	eq
 8001978:	f884 9045 	strbeq.w	r9, [r4, #69]	; 0x45
 800197c:	f7ff fddc 	bl	8001538 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8001980:	a901      	add	r1, sp, #4
 8001982:	a802      	add	r0, sp, #8
 8001984:	f000 fc94 	bl	80022b0 <xTaskCheckForTimeOut>
 8001988:	2800      	cmp	r0, #0
 800198a:	d146      	bne.n	8001a1a <xQueueGenericSend+0x152>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800198c:	f7ff fdb2 	bl	80014f4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8001990:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8001992:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001994:	429a      	cmp	r2, r3
 8001996:	d12f      	bne.n	80019f8 <xQueueGenericSend+0x130>
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 8001998:	f7ff fdce 	bl	8001538 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800199c:	9901      	ldr	r1, [sp, #4]
 800199e:	f104 0010 	add.w	r0, r4, #16
 80019a2:	f000 fc19 	bl	80021d8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80019a6:	4620      	mov	r0, r4
 80019a8:	f7ff fef4 	bl	8001794 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80019ac:	f000 fb06 	bl	8001fbc <xTaskResumeAll>
 80019b0:	b350      	cbz	r0, 8001a08 <xQueueGenericSend+0x140>
 80019b2:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 80019b4:	f7ff fd9e 	bl	80014f4 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80019b8:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80019ba:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80019bc:	429a      	cmp	r2, r3
 80019be:	d301      	bcc.n	80019c4 <xQueueGenericSend+0xfc>
 80019c0:	2f02      	cmp	r7, #2
 80019c2:	d1bf      	bne.n	8001944 <xQueueGenericSend+0x7c>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80019c4:	463a      	mov	r2, r7
 80019c6:	4641      	mov	r1, r8
 80019c8:	4620      	mov	r0, r4
 80019ca:	f7ff fe9b 	bl	8001704 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80019ce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80019d0:	b11b      	cbz	r3, 80019da <xQueueGenericSend+0x112>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80019d2:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80019d6:	f000 fc19 	bl	800220c <xTaskRemoveFromEventList>
					else if( xYieldRequired != pdFALSE )
 80019da:	b138      	cbz	r0, 80019ec <xQueueGenericSend+0x124>
						queueYIELD_IF_USING_PREEMPTION();
 80019dc:	4b12      	ldr	r3, [pc, #72]	; (8001a28 <xQueueGenericSend+0x160>)
 80019de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80019e2:	601a      	str	r2, [r3, #0]
 80019e4:	f3bf 8f4f 	dsb	sy
 80019e8:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 80019ec:	f7ff fda4 	bl	8001538 <vPortExitCritical>
				return pdPASS;
 80019f0:	2001      	movs	r0, #1
}
 80019f2:	b004      	add	sp, #16
 80019f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	taskEXIT_CRITICAL();
 80019f8:	f7ff fd9e 	bl	8001538 <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 80019fc:	4620      	mov	r0, r4
 80019fe:	f7ff fec9 	bl	8001794 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8001a02:	f000 fadb 	bl	8001fbc <xTaskResumeAll>
 8001a06:	e7d4      	b.n	80019b2 <xQueueGenericSend+0xea>
					portYIELD_WITHIN_API();
 8001a08:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001a0c:	f8ca 3000 	str.w	r3, [sl]
 8001a10:	f3bf 8f4f 	dsb	sy
 8001a14:	f3bf 8f6f 	isb	sy
 8001a18:	e7cb      	b.n	80019b2 <xQueueGenericSend+0xea>
			prvUnlockQueue( pxQueue );
 8001a1a:	4620      	mov	r0, r4
 8001a1c:	f7ff feba 	bl	8001794 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8001a20:	f000 facc 	bl	8001fbc <xTaskResumeAll>
 8001a24:	e792      	b.n	800194c <xQueueGenericSend+0x84>
 8001a26:	bf00      	nop
 8001a28:	e000ed04 	.word	0xe000ed04

08001a2c <xQueueGenericReceive>:
{
 8001a2c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001a30:	460f      	mov	r7, r1
 8001a32:	9201      	str	r2, [sp, #4]
 8001a34:	4699      	mov	r9, r3
	configASSERT( pxQueue );
 8001a36:	4604      	mov	r4, r0
 8001a38:	b940      	cbnz	r0, 8001a4c <xQueueGenericReceive+0x20>
 8001a3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001a3e:	f383 8811 	msr	BASEPRI, r3
 8001a42:	f3bf 8f6f 	isb	sy
 8001a46:	f3bf 8f4f 	dsb	sy
 8001a4a:	e7fe      	b.n	8001a4a <xQueueGenericReceive+0x1e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001a4c:	b951      	cbnz	r1, 8001a64 <xQueueGenericReceive+0x38>
 8001a4e:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8001a50:	b143      	cbz	r3, 8001a64 <xQueueGenericReceive+0x38>
 8001a52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001a56:	f383 8811 	msr	BASEPRI, r3
 8001a5a:	f3bf 8f6f 	isb	sy
 8001a5e:	f3bf 8f4f 	dsb	sy
 8001a62:	e7fe      	b.n	8001a62 <xQueueGenericReceive+0x36>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8001a64:	f000 fc64 	bl	8002330 <xTaskGetSchedulerState>
 8001a68:	b950      	cbnz	r0, 8001a80 <xQueueGenericReceive+0x54>
 8001a6a:	9d01      	ldr	r5, [sp, #4]
 8001a6c:	b14d      	cbz	r5, 8001a82 <xQueueGenericReceive+0x56>
 8001a6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001a72:	f383 8811 	msr	BASEPRI, r3
 8001a76:	f3bf 8f6f 	isb	sy
 8001a7a:	f3bf 8f4f 	dsb	sy
 8001a7e:	e7fe      	b.n	8001a7e <xQueueGenericReceive+0x52>
 8001a80:	2500      	movs	r5, #0
		prvLockQueue( pxQueue );
 8001a82:	f04f 0800 	mov.w	r8, #0
					portYIELD_WITHIN_API();
 8001a86:	f8df a120 	ldr.w	sl, [pc, #288]	; 8001ba8 <xQueueGenericReceive+0x17c>
 8001a8a:	e055      	b.n	8001b38 <xQueueGenericReceive+0x10c>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001a8c:	6a63      	ldr	r3, [r4, #36]	; 0x24
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
 8001a8e:	60e5      	str	r5, [r4, #12]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d074      	beq.n	8001b7e <xQueueGenericReceive+0x152>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001a94:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8001a98:	e066      	b.n	8001b68 <xQueueGenericReceive+0x13c>
				if( xTicksToWait == ( TickType_t ) 0 )
 8001a9a:	9b01      	ldr	r3, [sp, #4]
 8001a9c:	b91b      	cbnz	r3, 8001aa6 <xQueueGenericReceive+0x7a>
					taskEXIT_CRITICAL();
 8001a9e:	f7ff fd4b 	bl	8001538 <vPortExitCritical>
					return errQUEUE_EMPTY;
 8001aa2:	2000      	movs	r0, #0
 8001aa4:	e06e      	b.n	8001b84 <xQueueGenericReceive+0x158>
				else if( xEntryTimeSet == pdFALSE )
 8001aa6:	b915      	cbnz	r5, 8001aae <xQueueGenericReceive+0x82>
					vTaskSetTimeOutState( &xTimeOut );
 8001aa8:	a802      	add	r0, sp, #8
 8001aaa:	f000 fbf1 	bl	8002290 <vTaskSetTimeOutState>
		taskEXIT_CRITICAL();
 8001aae:	f7ff fd43 	bl	8001538 <vPortExitCritical>
		vTaskSuspendAll();
 8001ab2:	f000 f9e9 	bl	8001e88 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8001ab6:	f7ff fd1d 	bl	80014f4 <vPortEnterCritical>
 8001aba:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8001abe:	2bff      	cmp	r3, #255	; 0xff
 8001ac0:	bf08      	it	eq
 8001ac2:	f884 8044 	strbeq.w	r8, [r4, #68]	; 0x44
 8001ac6:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8001aca:	2bff      	cmp	r3, #255	; 0xff
 8001acc:	bf08      	it	eq
 8001ace:	f884 8045 	strbeq.w	r8, [r4, #69]	; 0x45
 8001ad2:	f7ff fd31 	bl	8001538 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8001ad6:	a901      	add	r1, sp, #4
 8001ad8:	a802      	add	r0, sp, #8
 8001ada:	f000 fbe9 	bl	80022b0 <xTaskCheckForTimeOut>
 8001ade:	2800      	cmp	r0, #0
 8001ae0:	d153      	bne.n	8001b8a <xQueueGenericReceive+0x15e>
	taskENTER_CRITICAL();
 8001ae2:	f7ff fd07 	bl	80014f4 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8001ae6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001ae8:	b9f3      	cbnz	r3, 8001b28 <xQueueGenericReceive+0xfc>
	taskEXIT_CRITICAL();
 8001aea:	f7ff fd25 	bl	8001538 <vPortExitCritical>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8001aee:	6823      	ldr	r3, [r4, #0]
 8001af0:	b933      	cbnz	r3, 8001b00 <xQueueGenericReceive+0xd4>
						taskENTER_CRITICAL();
 8001af2:	f7ff fcff 	bl	80014f4 <vPortEnterCritical>
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8001af6:	6860      	ldr	r0, [r4, #4]
 8001af8:	f000 fc2a 	bl	8002350 <vTaskPriorityInherit>
						taskEXIT_CRITICAL();
 8001afc:	f7ff fd1c 	bl	8001538 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8001b00:	9901      	ldr	r1, [sp, #4]
 8001b02:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8001b06:	f000 fb67 	bl	80021d8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8001b0a:	4620      	mov	r0, r4
 8001b0c:	f7ff fe42 	bl	8001794 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8001b10:	f000 fa54 	bl	8001fbc <xTaskResumeAll>
 8001b14:	b978      	cbnz	r0, 8001b36 <xQueueGenericReceive+0x10a>
					portYIELD_WITHIN_API();
 8001b16:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001b1a:	f8ca 3000 	str.w	r3, [sl]
 8001b1e:	f3bf 8f4f 	dsb	sy
 8001b22:	f3bf 8f6f 	isb	sy
 8001b26:	e006      	b.n	8001b36 <xQueueGenericReceive+0x10a>
	taskEXIT_CRITICAL();
 8001b28:	f7ff fd06 	bl	8001538 <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 8001b2c:	4620      	mov	r0, r4
 8001b2e:	f7ff fe31 	bl	8001794 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8001b32:	f000 fa43 	bl	8001fbc <xTaskResumeAll>
 8001b36:	2501      	movs	r5, #1
		taskENTER_CRITICAL();
 8001b38:	f7ff fcdc 	bl	80014f4 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8001b3c:	6ba6      	ldr	r6, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8001b3e:	2e00      	cmp	r6, #0
 8001b40:	d0ab      	beq.n	8001a9a <xQueueGenericReceive+0x6e>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8001b42:	4639      	mov	r1, r7
 8001b44:	4620      	mov	r0, r4
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
 8001b46:	68e5      	ldr	r5, [r4, #12]
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8001b48:	f7ff fe0f 	bl	800176a <prvCopyDataFromQueue>
				if( xJustPeeking == pdFALSE )
 8001b4c:	f1b9 0f00 	cmp.w	r9, #0
 8001b50:	d19c      	bne.n	8001a8c <xQueueGenericReceive+0x60>
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8001b52:	6823      	ldr	r3, [r4, #0]
					pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
 8001b54:	3e01      	subs	r6, #1
 8001b56:	63a6      	str	r6, [r4, #56]	; 0x38
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8001b58:	b913      	cbnz	r3, 8001b60 <xQueueGenericReceive+0x134>
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8001b5a:	f000 fc91 	bl	8002480 <pvTaskIncrementMutexHeldCount>
 8001b5e:	6060      	str	r0, [r4, #4]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001b60:	6923      	ldr	r3, [r4, #16]
 8001b62:	b163      	cbz	r3, 8001b7e <xQueueGenericReceive+0x152>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001b64:	f104 0010 	add.w	r0, r4, #16
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001b68:	f000 fb50 	bl	800220c <xTaskRemoveFromEventList>
 8001b6c:	b138      	cbz	r0, 8001b7e <xQueueGenericReceive+0x152>
							queueYIELD_IF_USING_PREEMPTION();
 8001b6e:	4b0e      	ldr	r3, [pc, #56]	; (8001ba8 <xQueueGenericReceive+0x17c>)
 8001b70:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001b74:	601a      	str	r2, [r3, #0]
 8001b76:	f3bf 8f4f 	dsb	sy
 8001b7a:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8001b7e:	f7ff fcdb 	bl	8001538 <vPortExitCritical>
				return pdPASS;
 8001b82:	2001      	movs	r0, #1
}
 8001b84:	b004      	add	sp, #16
 8001b86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			prvUnlockQueue( pxQueue );
 8001b8a:	4620      	mov	r0, r4
 8001b8c:	f7ff fe02 	bl	8001794 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8001b90:	f000 fa14 	bl	8001fbc <xTaskResumeAll>
	taskENTER_CRITICAL();
 8001b94:	f7ff fcae 	bl	80014f4 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8001b98:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	f43f af7f 	beq.w	8001a9e <xQueueGenericReceive+0x72>
	taskEXIT_CRITICAL();
 8001ba0:	f7ff fcca 	bl	8001538 <vPortExitCritical>
 8001ba4:	e7c7      	b.n	8001b36 <xQueueGenericReceive+0x10a>
 8001ba6:	bf00      	nop
 8001ba8:	e000ed04 	.word	0xe000ed04

08001bac <prvTaskIsTaskSuspended.part.0>:
 8001bac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001bb0:	f383 8811 	msr	BASEPRI, r3
 8001bb4:	f3bf 8f6f 	isb	sy
 8001bb8:	f3bf 8f4f 	dsb	sy
 8001bbc:	e7fe      	b.n	8001bbc <prvTaskIsTaskSuspended.part.0+0x10>
	...

08001bc0 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001bc0:	4a06      	ldr	r2, [pc, #24]	; (8001bdc <prvResetNextTaskUnblockTime+0x1c>)
 8001bc2:	6813      	ldr	r3, [r2, #0]
 8001bc4:	6819      	ldr	r1, [r3, #0]
 8001bc6:	4b06      	ldr	r3, [pc, #24]	; (8001be0 <prvResetNextTaskUnblockTime+0x20>)
 8001bc8:	b919      	cbnz	r1, 8001bd2 <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8001bca:	f04f 32ff 	mov.w	r2, #4294967295
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8001bce:	601a      	str	r2, [r3, #0]
	}
}
 8001bd0:	4770      	bx	lr
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8001bd2:	6812      	ldr	r2, [r2, #0]
 8001bd4:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8001bd6:	68d2      	ldr	r2, [r2, #12]
 8001bd8:	6852      	ldr	r2, [r2, #4]
 8001bda:	e7f8      	b.n	8001bce <prvResetNextTaskUnblockTime+0xe>
 8001bdc:	20003c48 	.word	0x20003c48
 8001be0:	20003d20 	.word	0x20003d20

08001be4 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8001be4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8001be6:	4b1b      	ldr	r3, [pc, #108]	; (8001c54 <prvAddCurrentTaskToDelayedList+0x70>)
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001be8:	4e1b      	ldr	r6, [pc, #108]	; (8001c58 <prvAddCurrentTaskToDelayedList+0x74>)
const TickType_t xConstTickCount = xTickCount;
 8001bea:	681c      	ldr	r4, [r3, #0]
{
 8001bec:	4605      	mov	r5, r0
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001bee:	6830      	ldr	r0, [r6, #0]
 8001bf0:	3004      	adds	r0, #4
{
 8001bf2:	460f      	mov	r7, r1
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001bf4:	f7ff fc11 	bl	800141a <uxListRemove>
 8001bf8:	4633      	mov	r3, r6
 8001bfa:	b940      	cbnz	r0, 8001c0e <prvAddCurrentTaskToDelayedList+0x2a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8001bfc:	6831      	ldr	r1, [r6, #0]
 8001bfe:	4e17      	ldr	r6, [pc, #92]	; (8001c5c <prvAddCurrentTaskToDelayedList+0x78>)
 8001c00:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 8001c02:	6832      	ldr	r2, [r6, #0]
 8001c04:	2001      	movs	r0, #1
 8001c06:	4088      	lsls	r0, r1
 8001c08:	ea22 0200 	bic.w	r2, r2, r0
 8001c0c:	6032      	str	r2, [r6, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8001c0e:	1c6a      	adds	r2, r5, #1
 8001c10:	d107      	bne.n	8001c22 <prvAddCurrentTaskToDelayedList+0x3e>
 8001c12:	b137      	cbz	r7, 8001c22 <prvAddCurrentTaskToDelayedList+0x3e>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001c14:	6819      	ldr	r1, [r3, #0]
 8001c16:	4812      	ldr	r0, [pc, #72]	; (8001c60 <prvAddCurrentTaskToDelayedList+0x7c>)
 8001c18:	3104      	adds	r1, #4

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8001c1a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001c1e:	f7ff bbd9 	b.w	80013d4 <vListInsertEnd>
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8001c22:	681a      	ldr	r2, [r3, #0]
 8001c24:	1964      	adds	r4, r4, r5
 8001c26:	6054      	str	r4, [r2, #4]
			if( xTimeToWake < xConstTickCount )
 8001c28:	d307      	bcc.n	8001c3a <prvAddCurrentTaskToDelayedList+0x56>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001c2a:	4a0e      	ldr	r2, [pc, #56]	; (8001c64 <prvAddCurrentTaskToDelayedList+0x80>)
 8001c2c:	6810      	ldr	r0, [r2, #0]
 8001c2e:	6819      	ldr	r1, [r3, #0]
}
 8001c30:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001c34:	3104      	adds	r1, #4
 8001c36:	f7ff bbd9 	b.w	80013ec <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001c3a:	4a0b      	ldr	r2, [pc, #44]	; (8001c68 <prvAddCurrentTaskToDelayedList+0x84>)
 8001c3c:	6810      	ldr	r0, [r2, #0]
 8001c3e:	6819      	ldr	r1, [r3, #0]
 8001c40:	3104      	adds	r1, #4
 8001c42:	f7ff fbd3 	bl	80013ec <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8001c46:	4b09      	ldr	r3, [pc, #36]	; (8001c6c <prvAddCurrentTaskToDelayedList+0x88>)
 8001c48:	681a      	ldr	r2, [r3, #0]
 8001c4a:	42a2      	cmp	r2, r4
					xNextTaskUnblockTime = xTimeToWake;
 8001c4c:	bf88      	it	hi
 8001c4e:	601c      	strhi	r4, [r3, #0]
}
 8001c50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001c52:	bf00      	nop
 8001c54:	20003d68 	.word	0x20003d68
 8001c58:	20003c44 	.word	0x20003c44
 8001c5c:	20003cf0 	.word	0x20003cf0
 8001c60:	20003d40 	.word	0x20003d40
 8001c64:	20003c4c 	.word	0x20003c4c
 8001c68:	20003c48 	.word	0x20003c48
 8001c6c:	20003d20 	.word	0x20003d20

08001c70 <xTaskCreate>:
	{
 8001c70:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001c74:	ea4f 0a82 	mov.w	sl, r2, lsl #2
	{
 8001c78:	4680      	mov	r8, r0
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001c7a:	4650      	mov	r0, sl
	{
 8001c7c:	460f      	mov	r7, r1
 8001c7e:	4699      	mov	r9, r3
 8001c80:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001c82:	f7ff fad5 	bl	8001230 <pvPortMalloc>
			if( pxStack != NULL )
 8001c86:	4605      	mov	r5, r0
 8001c88:	2800      	cmp	r0, #0
 8001c8a:	f000 8097 	beq.w	8001dbc <xTaskCreate+0x14c>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8001c8e:	2054      	movs	r0, #84	; 0x54
 8001c90:	f7ff face 	bl	8001230 <pvPortMalloc>
				if( pxNewTCB != NULL )
 8001c94:	4604      	mov	r4, r0
 8001c96:	2800      	cmp	r0, #0
 8001c98:	f000 808d 	beq.w	8001db6 <xTaskCreate+0x146>
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8001c9c:	f1aa 0a04 	sub.w	sl, sl, #4
					pxNewTCB->pxStack = pxStack;
 8001ca0:	6305      	str	r5, [r0, #48]	; 0x30
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8001ca2:	4455      	add	r5, sl
 8001ca4:	1e7b      	subs	r3, r7, #1
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8001ca6:	f025 0a07 	bic.w	sl, r5, #7
 8001caa:	f100 0234 	add.w	r2, r0, #52	; 0x34
 8001cae:	370f      	adds	r7, #15
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8001cb0:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 8001cb4:	f802 1b01 	strb.w	r1, [r2], #1
		if( pcName[ x ] == 0x00 )
 8001cb8:	7819      	ldrb	r1, [r3, #0]
 8001cba:	b109      	cbz	r1, 8001cc0 <xTaskCreate+0x50>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001cbc:	429f      	cmp	r7, r3
 8001cbe:	d1f7      	bne.n	8001cb0 <xTaskCreate+0x40>
 8001cc0:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8001cc2:	2d06      	cmp	r5, #6
 8001cc4:	bf28      	it	cs
 8001cc6:	2506      	movcs	r5, #6
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8001cc8:	f04f 0b00 	mov.w	fp, #0
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8001ccc:	1d27      	adds	r7, r4, #4
	pxNewTCB->uxPriority = uxPriority;
 8001cce:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxMutexesHeld = 0;
 8001cd0:	e9c4 5b11 	strd	r5, fp, [r4, #68]	; 0x44
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8001cd4:	4638      	mov	r0, r7
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8001cd6:	f884 b043 	strb.w	fp, [r4, #67]	; 0x43
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8001cda:	f7ff fb78 	bl	80013ce <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001cde:	f1c5 0507 	rsb	r5, r5, #7
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8001ce2:	f104 0018 	add.w	r0, r4, #24
 8001ce6:	f7ff fb72 	bl	80013ce <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
 8001cea:	f8c4 b04c 	str.w	fp, [r4, #76]	; 0x4c
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8001cee:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001cf0:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8001cf2:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8001cf4:	f884 b050 	strb.w	fp, [r4, #80]	; 0x50
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8001cf8:	464a      	mov	r2, r9
 8001cfa:	4641      	mov	r1, r8
 8001cfc:	4650      	mov	r0, sl
 8001cfe:	f7ff fbcf 	bl	80014a0 <pxPortInitialiseStack>
 8001d02:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
 8001d04:	b106      	cbz	r6, 8001d08 <xTaskCreate+0x98>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8001d06:	6034      	str	r4, [r6, #0]
	taskENTER_CRITICAL();
 8001d08:	f7ff fbf4 	bl	80014f4 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 8001d0c:	4b32      	ldr	r3, [pc, #200]	; (8001dd8 <xTaskCreate+0x168>)
		if( pxCurrentTCB == NULL )
 8001d0e:	4e33      	ldr	r6, [pc, #204]	; (8001ddc <xTaskCreate+0x16c>)
		uxCurrentNumberOfTasks++;
 8001d10:	681a      	ldr	r2, [r3, #0]
 8001d12:	f8df 80f4 	ldr.w	r8, [pc, #244]	; 8001e08 <xTaskCreate+0x198>
 8001d16:	3201      	adds	r2, #1
 8001d18:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 8001d1a:	6835      	ldr	r5, [r6, #0]
 8001d1c:	2d00      	cmp	r5, #0
 8001d1e:	d150      	bne.n	8001dc2 <xTaskCreate+0x152>
			pxCurrentTCB = pxNewTCB;
 8001d20:	6034      	str	r4, [r6, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	2b01      	cmp	r3, #1
 8001d26:	d11f      	bne.n	8001d68 <xTaskCreate+0xf8>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8001d28:	f04f 0914 	mov.w	r9, #20
 8001d2c:	fb09 8005 	mla	r0, r9, r5, r8
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001d30:	3501      	adds	r5, #1
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8001d32:	f7ff fb41 	bl	80013b8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001d36:	2d07      	cmp	r5, #7
 8001d38:	d1f8      	bne.n	8001d2c <xTaskCreate+0xbc>
	vListInitialise( &xDelayedTaskList1 );
 8001d3a:	f8df 90d0 	ldr.w	r9, [pc, #208]	; 8001e0c <xTaskCreate+0x19c>
	vListInitialise( &xDelayedTaskList2 );
 8001d3e:	4d28      	ldr	r5, [pc, #160]	; (8001de0 <xTaskCreate+0x170>)
	vListInitialise( &xDelayedTaskList1 );
 8001d40:	4648      	mov	r0, r9
 8001d42:	f7ff fb39 	bl	80013b8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8001d46:	4628      	mov	r0, r5
 8001d48:	f7ff fb36 	bl	80013b8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8001d4c:	4825      	ldr	r0, [pc, #148]	; (8001de4 <xTaskCreate+0x174>)
 8001d4e:	f7ff fb33 	bl	80013b8 <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 8001d52:	4825      	ldr	r0, [pc, #148]	; (8001de8 <xTaskCreate+0x178>)
 8001d54:	f7ff fb30 	bl	80013b8 <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 8001d58:	4824      	ldr	r0, [pc, #144]	; (8001dec <xTaskCreate+0x17c>)
 8001d5a:	f7ff fb2d 	bl	80013b8 <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 8001d5e:	4b24      	ldr	r3, [pc, #144]	; (8001df0 <xTaskCreate+0x180>)
 8001d60:	f8c3 9000 	str.w	r9, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8001d64:	4b23      	ldr	r3, [pc, #140]	; (8001df4 <xTaskCreate+0x184>)
 8001d66:	601d      	str	r5, [r3, #0]
		uxTaskNumber++;
 8001d68:	4a23      	ldr	r2, [pc, #140]	; (8001df8 <xTaskCreate+0x188>)
		prvAddTaskToReadyList( pxNewTCB );
 8001d6a:	4924      	ldr	r1, [pc, #144]	; (8001dfc <xTaskCreate+0x18c>)
		uxTaskNumber++;
 8001d6c:	6813      	ldr	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8001d6e:	6808      	ldr	r0, [r1, #0]
		uxTaskNumber++;
 8001d70:	3301      	adds	r3, #1
 8001d72:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8001d74:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001d76:	2501      	movs	r5, #1
 8001d78:	fa05 f302 	lsl.w	r3, r5, r2
 8001d7c:	4303      	orrs	r3, r0
 8001d7e:	2014      	movs	r0, #20
 8001d80:	600b      	str	r3, [r1, #0]
 8001d82:	fb00 8002 	mla	r0, r0, r2, r8
 8001d86:	4639      	mov	r1, r7
 8001d88:	f7ff fb24 	bl	80013d4 <vListInsertEnd>
	taskEXIT_CRITICAL();
 8001d8c:	f7ff fbd4 	bl	8001538 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 8001d90:	4b1b      	ldr	r3, [pc, #108]	; (8001e00 <xTaskCreate+0x190>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	b163      	cbz	r3, 8001db0 <xTaskCreate+0x140>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8001d96:	6833      	ldr	r3, [r6, #0]
 8001d98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d9a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001d9c:	429a      	cmp	r2, r3
 8001d9e:	d207      	bcs.n	8001db0 <xTaskCreate+0x140>
			taskYIELD_IF_USING_PREEMPTION();
 8001da0:	4b18      	ldr	r3, [pc, #96]	; (8001e04 <xTaskCreate+0x194>)
 8001da2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001da6:	601a      	str	r2, [r3, #0]
 8001da8:	f3bf 8f4f 	dsb	sy
 8001dac:	f3bf 8f6f 	isb	sy
	}
 8001db0:	4628      	mov	r0, r5
 8001db2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
					vPortFree( pxStack );
 8001db6:	4628      	mov	r0, r5
 8001db8:	f7ff fac6 	bl	8001348 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8001dbc:	f04f 35ff 	mov.w	r5, #4294967295
 8001dc0:	e7f6      	b.n	8001db0 <xTaskCreate+0x140>
			if( xSchedulerRunning == pdFALSE )
 8001dc2:	4b0f      	ldr	r3, [pc, #60]	; (8001e00 <xTaskCreate+0x190>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d1ce      	bne.n	8001d68 <xTaskCreate+0xf8>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8001dca:	6833      	ldr	r3, [r6, #0]
 8001dcc:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001dce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dd0:	429a      	cmp	r2, r3
					pxCurrentTCB = pxNewTCB;
 8001dd2:	bf28      	it	cs
 8001dd4:	6034      	strcs	r4, [r6, #0]
 8001dd6:	e7c7      	b.n	8001d68 <xTaskCreate+0xf8>
 8001dd8:	20003cdc 	.word	0x20003cdc
 8001ddc:	20003c44 	.word	0x20003c44
 8001de0:	20003d08 	.word	0x20003d08
 8001de4:	20003d28 	.word	0x20003d28
 8001de8:	20003d54 	.word	0x20003d54
 8001dec:	20003d40 	.word	0x20003d40
 8001df0:	20003c48 	.word	0x20003c48
 8001df4:	20003c4c 	.word	0x20003c4c
 8001df8:	20003cec 	.word	0x20003cec
 8001dfc:	20003cf0 	.word	0x20003cf0
 8001e00:	20003d3c 	.word	0x20003d3c
 8001e04:	e000ed04 	.word	0xe000ed04
 8001e08:	20003c50 	.word	0x20003c50
 8001e0c:	20003cf4 	.word	0x20003cf4

08001e10 <vTaskStartScheduler>:
{
 8001e10:	b513      	push	{r0, r1, r4, lr}
		xReturn = xTaskCreate(	prvIdleTask,
 8001e12:	4b17      	ldr	r3, [pc, #92]	; (8001e70 <vTaskStartScheduler+0x60>)
 8001e14:	9301      	str	r3, [sp, #4]
 8001e16:	2400      	movs	r4, #0
 8001e18:	9400      	str	r4, [sp, #0]
 8001e1a:	4623      	mov	r3, r4
 8001e1c:	2280      	movs	r2, #128	; 0x80
 8001e1e:	4915      	ldr	r1, [pc, #84]	; (8001e74 <vTaskStartScheduler+0x64>)
 8001e20:	4815      	ldr	r0, [pc, #84]	; (8001e78 <vTaskStartScheduler+0x68>)
 8001e22:	f7ff ff25 	bl	8001c70 <xTaskCreate>
	if( xReturn == pdPASS )
 8001e26:	2801      	cmp	r0, #1
 8001e28:	d114      	bne.n	8001e54 <vTaskStartScheduler+0x44>
 8001e2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e2e:	f383 8811 	msr	BASEPRI, r3
 8001e32:	f3bf 8f6f 	isb	sy
 8001e36:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 8001e3a:	4b10      	ldr	r3, [pc, #64]	; (8001e7c <vTaskStartScheduler+0x6c>)
 8001e3c:	f04f 32ff 	mov.w	r2, #4294967295
 8001e40:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8001e42:	4b0f      	ldr	r3, [pc, #60]	; (8001e80 <vTaskStartScheduler+0x70>)
 8001e44:	6018      	str	r0, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8001e46:	4b0f      	ldr	r3, [pc, #60]	; (8001e84 <vTaskStartScheduler+0x74>)
 8001e48:	601c      	str	r4, [r3, #0]
}
 8001e4a:	b002      	add	sp, #8
 8001e4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		if( xPortStartScheduler() != pdFALSE )
 8001e50:	f7ff bbe2 	b.w	8001618 <xPortStartScheduler>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8001e54:	3001      	adds	r0, #1
 8001e56:	d108      	bne.n	8001e6a <vTaskStartScheduler+0x5a>
 8001e58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e5c:	f383 8811 	msr	BASEPRI, r3
 8001e60:	f3bf 8f6f 	isb	sy
 8001e64:	f3bf 8f4f 	dsb	sy
 8001e68:	e7fe      	b.n	8001e68 <vTaskStartScheduler+0x58>
}
 8001e6a:	b002      	add	sp, #8
 8001e6c:	bd10      	pop	{r4, pc}
 8001e6e:	bf00      	nop
 8001e70:	20003d1c 	.word	0x20003d1c
 8001e74:	08002948 	.word	0x08002948
 8001e78:	080020f1 	.word	0x080020f1
 8001e7c:	20003d20 	.word	0x20003d20
 8001e80:	20003d3c 	.word	0x20003d3c
 8001e84:	20003d68 	.word	0x20003d68

08001e88 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8001e88:	4a02      	ldr	r2, [pc, #8]	; (8001e94 <vTaskSuspendAll+0xc>)
 8001e8a:	6813      	ldr	r3, [r2, #0]
 8001e8c:	3301      	adds	r3, #1
 8001e8e:	6013      	str	r3, [r2, #0]
}
 8001e90:	4770      	bx	lr
 8001e92:	bf00      	nop
 8001e94:	20003ce8 	.word	0x20003ce8

08001e98 <xTaskIncrementTick>:
{
 8001e98:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001e9c:	4b3c      	ldr	r3, [pc, #240]	; (8001f90 <xTaskIncrementTick+0xf8>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d16e      	bne.n	8001f82 <xTaskIncrementTick+0xea>
		const TickType_t xConstTickCount = xTickCount + 1;
 8001ea4:	4b3b      	ldr	r3, [pc, #236]	; (8001f94 <xTaskIncrementTick+0xfc>)
 8001ea6:	681c      	ldr	r4, [r3, #0]
 8001ea8:	3401      	adds	r4, #1
		xTickCount = xConstTickCount;
 8001eaa:	601c      	str	r4, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U )
 8001eac:	b9bc      	cbnz	r4, 8001ede <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 8001eae:	4b3a      	ldr	r3, [pc, #232]	; (8001f98 <xTaskIncrementTick+0x100>)
 8001eb0:	681a      	ldr	r2, [r3, #0]
 8001eb2:	6812      	ldr	r2, [r2, #0]
 8001eb4:	b142      	cbz	r2, 8001ec8 <xTaskIncrementTick+0x30>
 8001eb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001eba:	f383 8811 	msr	BASEPRI, r3
 8001ebe:	f3bf 8f6f 	isb	sy
 8001ec2:	f3bf 8f4f 	dsb	sy
 8001ec6:	e7fe      	b.n	8001ec6 <xTaskIncrementTick+0x2e>
 8001ec8:	4a34      	ldr	r2, [pc, #208]	; (8001f9c <xTaskIncrementTick+0x104>)
 8001eca:	6819      	ldr	r1, [r3, #0]
 8001ecc:	6810      	ldr	r0, [r2, #0]
 8001ece:	6018      	str	r0, [r3, #0]
 8001ed0:	6011      	str	r1, [r2, #0]
 8001ed2:	4a33      	ldr	r2, [pc, #204]	; (8001fa0 <xTaskIncrementTick+0x108>)
 8001ed4:	6813      	ldr	r3, [r2, #0]
 8001ed6:	3301      	adds	r3, #1
 8001ed8:	6013      	str	r3, [r2, #0]
 8001eda:	f7ff fe71 	bl	8001bc0 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 8001ede:	4d31      	ldr	r5, [pc, #196]	; (8001fa4 <xTaskIncrementTick+0x10c>)
 8001ee0:	4f31      	ldr	r7, [pc, #196]	; (8001fa8 <xTaskIncrementTick+0x110>)
 8001ee2:	682b      	ldr	r3, [r5, #0]
 8001ee4:	42a3      	cmp	r3, r4
BaseType_t xSwitchRequired = pdFALSE;
 8001ee6:	f04f 0b00 	mov.w	fp, #0
		if( xConstTickCount >= xNextTaskUnblockTime )
 8001eea:	d911      	bls.n	8001f10 <xTaskIncrementTick+0x78>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8001eec:	683a      	ldr	r2, [r7, #0]
 8001eee:	4b2f      	ldr	r3, [pc, #188]	; (8001fac <xTaskIncrementTick+0x114>)
 8001ef0:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001ef2:	2214      	movs	r2, #20
 8001ef4:	434a      	muls	r2, r1
 8001ef6:	589a      	ldr	r2, [r3, r2]
				xSwitchRequired = pdTRUE;
 8001ef8:	2a02      	cmp	r2, #2
 8001efa:	bf28      	it	cs
 8001efc:	f04f 0b01 	movcs.w	fp, #1
		if( xYieldPending != pdFALSE )
 8001f00:	4a2b      	ldr	r2, [pc, #172]	; (8001fb0 <xTaskIncrementTick+0x118>)
 8001f02:	6812      	ldr	r2, [r2, #0]
			xSwitchRequired = pdTRUE;
 8001f04:	2a00      	cmp	r2, #0
}
 8001f06:	bf0c      	ite	eq
 8001f08:	4658      	moveq	r0, fp
 8001f0a:	2001      	movne	r0, #1
 8001f0c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001f10:	f8df a084 	ldr.w	sl, [pc, #132]	; 8001f98 <xTaskIncrementTick+0x100>
					prvAddTaskToReadyList( pxTCB );
 8001f14:	f8df 90a0 	ldr.w	r9, [pc, #160]	; 8001fb8 <xTaskIncrementTick+0x120>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001f18:	f8da 2000 	ldr.w	r2, [sl]
 8001f1c:	6812      	ldr	r2, [r2, #0]
 8001f1e:	b91a      	cbnz	r2, 8001f28 <xTaskIncrementTick+0x90>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001f20:	f04f 32ff 	mov.w	r2, #4294967295
 8001f24:	602a      	str	r2, [r5, #0]
					break;
 8001f26:	e7e1      	b.n	8001eec <xTaskIncrementTick+0x54>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8001f28:	f8da 2000 	ldr.w	r2, [sl]
 8001f2c:	68d2      	ldr	r2, [r2, #12]
 8001f2e:	68d6      	ldr	r6, [r2, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8001f30:	6871      	ldr	r1, [r6, #4]
					if( xConstTickCount < xItemValue )
 8001f32:	428c      	cmp	r4, r1
 8001f34:	d201      	bcs.n	8001f3a <xTaskIncrementTick+0xa2>
						xNextTaskUnblockTime = xItemValue;
 8001f36:	6029      	str	r1, [r5, #0]
						break;
 8001f38:	e7d8      	b.n	8001eec <xTaskIncrementTick+0x54>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001f3a:	f106 0804 	add.w	r8, r6, #4
 8001f3e:	4640      	mov	r0, r8
 8001f40:	f7ff fa6b 	bl	800141a <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8001f44:	6ab1      	ldr	r1, [r6, #40]	; 0x28
 8001f46:	b119      	cbz	r1, 8001f50 <xTaskIncrementTick+0xb8>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001f48:	f106 0018 	add.w	r0, r6, #24
 8001f4c:	f7ff fa65 	bl	800141a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8001f50:	6af0      	ldr	r0, [r6, #44]	; 0x2c
 8001f52:	f8d9 3000 	ldr.w	r3, [r9]
 8001f56:	2201      	movs	r2, #1
 8001f58:	fa02 f100 	lsl.w	r1, r2, r0
 8001f5c:	4319      	orrs	r1, r3
 8001f5e:	4b13      	ldr	r3, [pc, #76]	; (8001fac <xTaskIncrementTick+0x114>)
 8001f60:	f8c9 1000 	str.w	r1, [r9]
 8001f64:	f04f 0c14 	mov.w	ip, #20
 8001f68:	4641      	mov	r1, r8
 8001f6a:	fb0c 3000 	mla	r0, ip, r0, r3
 8001f6e:	f7ff fa31 	bl	80013d4 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001f72:	6838      	ldr	r0, [r7, #0]
 8001f74:	6af1      	ldr	r1, [r6, #44]	; 0x2c
 8001f76:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
 8001f78:	4291      	cmp	r1, r2
 8001f7a:	bf28      	it	cs
 8001f7c:	f04f 0b01 	movcs.w	fp, #1
 8001f80:	e7ca      	b.n	8001f18 <xTaskIncrementTick+0x80>
		++uxPendedTicks;
 8001f82:	4a0c      	ldr	r2, [pc, #48]	; (8001fb4 <xTaskIncrementTick+0x11c>)
 8001f84:	6813      	ldr	r3, [r2, #0]
 8001f86:	3301      	adds	r3, #1
 8001f88:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 8001f8a:	f04f 0b00 	mov.w	fp, #0
 8001f8e:	e7b7      	b.n	8001f00 <xTaskIncrementTick+0x68>
 8001f90:	20003ce8 	.word	0x20003ce8
 8001f94:	20003d68 	.word	0x20003d68
 8001f98:	20003c48 	.word	0x20003c48
 8001f9c:	20003c4c 	.word	0x20003c4c
 8001fa0:	20003d24 	.word	0x20003d24
 8001fa4:	20003d20 	.word	0x20003d20
 8001fa8:	20003c44 	.word	0x20003c44
 8001fac:	20003c50 	.word	0x20003c50
 8001fb0:	20003d6c 	.word	0x20003d6c
 8001fb4:	20003ce4 	.word	0x20003ce4
 8001fb8:	20003cf0 	.word	0x20003cf0

08001fbc <xTaskResumeAll>:
{
 8001fbc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( uxSchedulerSuspended );
 8001fc0:	4c30      	ldr	r4, [pc, #192]	; (8002084 <xTaskResumeAll+0xc8>)
 8001fc2:	6823      	ldr	r3, [r4, #0]
 8001fc4:	b943      	cbnz	r3, 8001fd8 <xTaskResumeAll+0x1c>
 8001fc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001fca:	f383 8811 	msr	BASEPRI, r3
 8001fce:	f3bf 8f6f 	isb	sy
 8001fd2:	f3bf 8f4f 	dsb	sy
 8001fd6:	e7fe      	b.n	8001fd6 <xTaskResumeAll+0x1a>
	taskENTER_CRITICAL();
 8001fd8:	f7ff fa8c 	bl	80014f4 <vPortEnterCritical>
		--uxSchedulerSuspended;
 8001fdc:	6823      	ldr	r3, [r4, #0]
 8001fde:	3b01      	subs	r3, #1
 8001fe0:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001fe2:	6824      	ldr	r4, [r4, #0]
 8001fe4:	b12c      	cbz	r4, 8001ff2 <xTaskResumeAll+0x36>
BaseType_t xAlreadyYielded = pdFALSE;
 8001fe6:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8001fe8:	f7ff faa6 	bl	8001538 <vPortExitCritical>
}
 8001fec:	4620      	mov	r0, r4
 8001fee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8001ff2:	4b25      	ldr	r3, [pc, #148]	; (8002088 <xTaskResumeAll+0xcc>)
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d0f5      	beq.n	8001fe6 <xTaskResumeAll+0x2a>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001ffa:	4d24      	ldr	r5, [pc, #144]	; (800208c <xTaskResumeAll+0xd0>)
					prvAddTaskToReadyList( pxTCB );
 8001ffc:	4e24      	ldr	r6, [pc, #144]	; (8002090 <xTaskResumeAll+0xd4>)
 8001ffe:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 80020a4 <xTaskResumeAll+0xe8>
 8002002:	e01f      	b.n	8002044 <xTaskResumeAll+0x88>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8002004:	68eb      	ldr	r3, [r5, #12]
 8002006:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002008:	f104 0904 	add.w	r9, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800200c:	f104 0018 	add.w	r0, r4, #24
 8002010:	f7ff fa03 	bl	800141a <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002014:	4648      	mov	r0, r9
 8002016:	f7ff fa00 	bl	800141a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800201a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800201c:	6831      	ldr	r1, [r6, #0]
 800201e:	2701      	movs	r7, #1
 8002020:	fa07 f302 	lsl.w	r3, r7, r2
 8002024:	2014      	movs	r0, #20
 8002026:	430b      	orrs	r3, r1
 8002028:	fb00 8002 	mla	r0, r0, r2, r8
 800202c:	4649      	mov	r1, r9
 800202e:	6033      	str	r3, [r6, #0]
 8002030:	f7ff f9d0 	bl	80013d4 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002034:	4b17      	ldr	r3, [pc, #92]	; (8002094 <xTaskResumeAll+0xd8>)
 8002036:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800203c:	429a      	cmp	r2, r3
 800203e:	d301      	bcc.n	8002044 <xTaskResumeAll+0x88>
						xYieldPending = pdTRUE;
 8002040:	4b15      	ldr	r3, [pc, #84]	; (8002098 <xTaskResumeAll+0xdc>)
 8002042:	601f      	str	r7, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002044:	682b      	ldr	r3, [r5, #0]
 8002046:	2b00      	cmp	r3, #0
 8002048:	d1dc      	bne.n	8002004 <xTaskResumeAll+0x48>
				if( pxTCB != NULL )
 800204a:	b10c      	cbz	r4, 8002050 <xTaskResumeAll+0x94>
					prvResetNextTaskUnblockTime();
 800204c:	f7ff fdb8 	bl	8001bc0 <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8002050:	4d12      	ldr	r5, [pc, #72]	; (800209c <xTaskResumeAll+0xe0>)
 8002052:	682c      	ldr	r4, [r5, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8002054:	b144      	cbz	r4, 8002068 <xTaskResumeAll+0xac>
								xYieldPending = pdTRUE;
 8002056:	4e10      	ldr	r6, [pc, #64]	; (8002098 <xTaskResumeAll+0xdc>)
 8002058:	2701      	movs	r7, #1
							if( xTaskIncrementTick() != pdFALSE )
 800205a:	f7ff ff1d 	bl	8001e98 <xTaskIncrementTick>
 800205e:	b100      	cbz	r0, 8002062 <xTaskResumeAll+0xa6>
								xYieldPending = pdTRUE;
 8002060:	6037      	str	r7, [r6, #0]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8002062:	3c01      	subs	r4, #1
 8002064:	d1f9      	bne.n	800205a <xTaskResumeAll+0x9e>
						uxPendedTicks = 0;
 8002066:	602c      	str	r4, [r5, #0]
				if( xYieldPending != pdFALSE )
 8002068:	4b0b      	ldr	r3, [pc, #44]	; (8002098 <xTaskResumeAll+0xdc>)
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	2b00      	cmp	r3, #0
 800206e:	d0ba      	beq.n	8001fe6 <xTaskResumeAll+0x2a>
					taskYIELD_IF_USING_PREEMPTION();
 8002070:	4b0b      	ldr	r3, [pc, #44]	; (80020a0 <xTaskResumeAll+0xe4>)
 8002072:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002076:	601a      	str	r2, [r3, #0]
 8002078:	f3bf 8f4f 	dsb	sy
 800207c:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 8002080:	2401      	movs	r4, #1
 8002082:	e7b1      	b.n	8001fe8 <xTaskResumeAll+0x2c>
 8002084:	20003ce8 	.word	0x20003ce8
 8002088:	20003cdc 	.word	0x20003cdc
 800208c:	20003d28 	.word	0x20003d28
 8002090:	20003cf0 	.word	0x20003cf0
 8002094:	20003c44 	.word	0x20003c44
 8002098:	20003d6c 	.word	0x20003d6c
 800209c:	20003ce4 	.word	0x20003ce4
 80020a0:	e000ed04 	.word	0xe000ed04
 80020a4:	20003c50 	.word	0x20003c50

080020a8 <vTaskDelay>:
	{
 80020a8:	b508      	push	{r3, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 80020aa:	b940      	cbnz	r0, 80020be <vTaskDelay+0x16>
			portYIELD_WITHIN_API();
 80020ac:	4b0e      	ldr	r3, [pc, #56]	; (80020e8 <vTaskDelay+0x40>)
 80020ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80020b2:	601a      	str	r2, [r3, #0]
 80020b4:	f3bf 8f4f 	dsb	sy
 80020b8:	f3bf 8f6f 	isb	sy
	}
 80020bc:	bd08      	pop	{r3, pc}
			configASSERT( uxSchedulerSuspended == 0 );
 80020be:	4b0b      	ldr	r3, [pc, #44]	; (80020ec <vTaskDelay+0x44>)
 80020c0:	6819      	ldr	r1, [r3, #0]
 80020c2:	b141      	cbz	r1, 80020d6 <vTaskDelay+0x2e>
 80020c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80020c8:	f383 8811 	msr	BASEPRI, r3
 80020cc:	f3bf 8f6f 	isb	sy
 80020d0:	f3bf 8f4f 	dsb	sy
 80020d4:	e7fe      	b.n	80020d4 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 80020d6:	f7ff fed7 	bl	8001e88 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80020da:	f7ff fd83 	bl	8001be4 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 80020de:	f7ff ff6d 	bl	8001fbc <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 80020e2:	2800      	cmp	r0, #0
 80020e4:	d0e2      	beq.n	80020ac <vTaskDelay+0x4>
 80020e6:	e7e9      	b.n	80020bc <vTaskDelay+0x14>
 80020e8:	e000ed04 	.word	0xe000ed04
 80020ec:	20003ce8 	.word	0x20003ce8

080020f0 <prvIdleTask>:
{
 80020f0:	b508      	push	{r3, lr}
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 80020f2:	4e17      	ldr	r6, [pc, #92]	; (8002150 <prvIdleTask+0x60>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80020f4:	4c17      	ldr	r4, [pc, #92]	; (8002154 <prvIdleTask+0x64>)
 80020f6:	6823      	ldr	r3, [r4, #0]
 80020f8:	b963      	cbnz	r3, 8002114 <prvIdleTask+0x24>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80020fa:	4b17      	ldr	r3, [pc, #92]	; (8002158 <prvIdleTask+0x68>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	2b01      	cmp	r3, #1
 8002100:	d9f8      	bls.n	80020f4 <prvIdleTask+0x4>
				taskYIELD();
 8002102:	4b16      	ldr	r3, [pc, #88]	; (800215c <prvIdleTask+0x6c>)
 8002104:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002108:	601a      	str	r2, [r3, #0]
 800210a:	f3bf 8f4f 	dsb	sy
 800210e:	f3bf 8f6f 	isb	sy
 8002112:	e7ef      	b.n	80020f4 <prvIdleTask+0x4>
			vTaskSuspendAll();
 8002114:	f7ff feb8 	bl	8001e88 <vTaskSuspendAll>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 8002118:	6835      	ldr	r5, [r6, #0]
			( void ) xTaskResumeAll();
 800211a:	f7ff ff4f 	bl	8001fbc <xTaskResumeAll>
			if( xListIsEmpty == pdFALSE )
 800211e:	2d00      	cmp	r5, #0
 8002120:	d0e9      	beq.n	80020f6 <prvIdleTask+0x6>
				taskENTER_CRITICAL();
 8002122:	f7ff f9e7 	bl	80014f4 <vPortEnterCritical>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8002126:	68f3      	ldr	r3, [r6, #12]
 8002128:	68dd      	ldr	r5, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800212a:	1d28      	adds	r0, r5, #4
 800212c:	f7ff f975 	bl	800141a <uxListRemove>
					--uxCurrentNumberOfTasks;
 8002130:	4a0b      	ldr	r2, [pc, #44]	; (8002160 <prvIdleTask+0x70>)
 8002132:	6813      	ldr	r3, [r2, #0]
 8002134:	3b01      	subs	r3, #1
 8002136:	6013      	str	r3, [r2, #0]
					--uxDeletedTasksWaitingCleanUp;
 8002138:	6823      	ldr	r3, [r4, #0]
 800213a:	3b01      	subs	r3, #1
 800213c:	6023      	str	r3, [r4, #0]
				taskEXIT_CRITICAL();
 800213e:	f7ff f9fb 	bl	8001538 <vPortExitCritical>
			vPortFree( pxTCB->pxStack );
 8002142:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8002144:	f7ff f900 	bl	8001348 <vPortFree>
			vPortFree( pxTCB );
 8002148:	4628      	mov	r0, r5
 800214a:	f7ff f8fd 	bl	8001348 <vPortFree>
 800214e:	e7d2      	b.n	80020f6 <prvIdleTask+0x6>
 8002150:	20003d54 	.word	0x20003d54
 8002154:	20003ce0 	.word	0x20003ce0
 8002158:	20003c50 	.word	0x20003c50
 800215c:	e000ed04 	.word	0xe000ed04
 8002160:	20003cdc 	.word	0x20003cdc

08002164 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002164:	4b17      	ldr	r3, [pc, #92]	; (80021c4 <vTaskSwitchContext+0x60>)
 8002166:	681a      	ldr	r2, [r3, #0]
 8002168:	4b17      	ldr	r3, [pc, #92]	; (80021c8 <vTaskSwitchContext+0x64>)
{
 800216a:	b510      	push	{r4, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800216c:	b112      	cbz	r2, 8002174 <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 800216e:	2201      	movs	r2, #1
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8002170:	601a      	str	r2, [r3, #0]
}
 8002172:	bd10      	pop	{r4, pc}
		xYieldPending = pdFALSE;
 8002174:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8002176:	4b15      	ldr	r3, [pc, #84]	; (80021cc <vTaskSwitchContext+0x68>)
 8002178:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
 800217a:	fab3 f383 	clz	r3, r3
 800217e:	b2db      	uxtb	r3, r3
 8002180:	f1c3 031f 	rsb	r3, r3, #31
 8002184:	2214      	movs	r2, #20
 8002186:	4912      	ldr	r1, [pc, #72]	; (80021d0 <vTaskSwitchContext+0x6c>)
 8002188:	435a      	muls	r2, r3
 800218a:	1888      	adds	r0, r1, r2
 800218c:	588c      	ldr	r4, [r1, r2]
 800218e:	b944      	cbnz	r4, 80021a2 <vTaskSwitchContext+0x3e>
	__asm volatile
 8002190:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002194:	f383 8811 	msr	BASEPRI, r3
 8002198:	f3bf 8f6f 	isb	sy
 800219c:	f3bf 8f4f 	dsb	sy
 80021a0:	e7fe      	b.n	80021a0 <vTaskSwitchContext+0x3c>
 80021a2:	6844      	ldr	r4, [r0, #4]
 80021a4:	3208      	adds	r2, #8
 80021a6:	6864      	ldr	r4, [r4, #4]
 80021a8:	6044      	str	r4, [r0, #4]
 80021aa:	440a      	add	r2, r1
 80021ac:	4294      	cmp	r4, r2
 80021ae:	bf04      	itt	eq
 80021b0:	6862      	ldreq	r2, [r4, #4]
 80021b2:	6042      	streq	r2, [r0, #4]
 80021b4:	2214      	movs	r2, #20
 80021b6:	fb02 1303 	mla	r3, r2, r3, r1
 80021ba:	685b      	ldr	r3, [r3, #4]
 80021bc:	68da      	ldr	r2, [r3, #12]
 80021be:	4b05      	ldr	r3, [pc, #20]	; (80021d4 <vTaskSwitchContext+0x70>)
 80021c0:	e7d6      	b.n	8002170 <vTaskSwitchContext+0xc>
 80021c2:	bf00      	nop
 80021c4:	20003ce8 	.word	0x20003ce8
 80021c8:	20003d6c 	.word	0x20003d6c
 80021cc:	20003cf0 	.word	0x20003cf0
 80021d0:	20003c50 	.word	0x20003c50
 80021d4:	20003c44 	.word	0x20003c44

080021d8 <vTaskPlaceOnEventList>:
{
 80021d8:	b510      	push	{r4, lr}
 80021da:	460c      	mov	r4, r1
	configASSERT( pxEventList );
 80021dc:	b940      	cbnz	r0, 80021f0 <vTaskPlaceOnEventList+0x18>
 80021de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80021e2:	f383 8811 	msr	BASEPRI, r3
 80021e6:	f3bf 8f6f 	isb	sy
 80021ea:	f3bf 8f4f 	dsb	sy
 80021ee:	e7fe      	b.n	80021ee <vTaskPlaceOnEventList+0x16>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80021f0:	4b05      	ldr	r3, [pc, #20]	; (8002208 <vTaskPlaceOnEventList+0x30>)
 80021f2:	6819      	ldr	r1, [r3, #0]
 80021f4:	3118      	adds	r1, #24
 80021f6:	f7ff f8f9 	bl	80013ec <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80021fa:	4620      	mov	r0, r4
 80021fc:	2101      	movs	r1, #1
}
 80021fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8002202:	f7ff bcef 	b.w	8001be4 <prvAddCurrentTaskToDelayedList>
 8002206:	bf00      	nop
 8002208:	20003c44 	.word	0x20003c44

0800220c <xTaskRemoveFromEventList>:
{
 800220c:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800220e:	68c3      	ldr	r3, [r0, #12]
 8002210:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 8002212:	b944      	cbnz	r4, 8002226 <xTaskRemoveFromEventList+0x1a>
 8002214:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002218:	f383 8811 	msr	BASEPRI, r3
 800221c:	f3bf 8f6f 	isb	sy
 8002220:	f3bf 8f4f 	dsb	sy
 8002224:	e7fe      	b.n	8002224 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8002226:	f104 0518 	add.w	r5, r4, #24
 800222a:	4628      	mov	r0, r5
 800222c:	f7ff f8f5 	bl	800141a <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002230:	4b11      	ldr	r3, [pc, #68]	; (8002278 <xTaskRemoveFromEventList+0x6c>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	b9e3      	cbnz	r3, 8002270 <xTaskRemoveFromEventList+0x64>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8002236:	1d25      	adds	r5, r4, #4
 8002238:	4628      	mov	r0, r5
 800223a:	f7ff f8ee 	bl	800141a <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800223e:	490f      	ldr	r1, [pc, #60]	; (800227c <xTaskRemoveFromEventList+0x70>)
 8002240:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002242:	6808      	ldr	r0, [r1, #0]
 8002244:	2301      	movs	r3, #1
 8002246:	4093      	lsls	r3, r2
 8002248:	4303      	orrs	r3, r0
 800224a:	600b      	str	r3, [r1, #0]
 800224c:	4b0c      	ldr	r3, [pc, #48]	; (8002280 <xTaskRemoveFromEventList+0x74>)
 800224e:	2014      	movs	r0, #20
 8002250:	4629      	mov	r1, r5
 8002252:	fb00 3002 	mla	r0, r0, r2, r3
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8002256:	f7ff f8bd 	bl	80013d4 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800225a:	4b0a      	ldr	r3, [pc, #40]	; (8002284 <xTaskRemoveFromEventList+0x78>)
 800225c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002262:	429a      	cmp	r2, r3
		xYieldPending = pdTRUE;
 8002264:	bf83      	ittte	hi
 8002266:	4b08      	ldrhi	r3, [pc, #32]	; (8002288 <xTaskRemoveFromEventList+0x7c>)
 8002268:	2001      	movhi	r0, #1
 800226a:	6018      	strhi	r0, [r3, #0]
		xReturn = pdFALSE;
 800226c:	2000      	movls	r0, #0
}
 800226e:	bd38      	pop	{r3, r4, r5, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8002270:	4629      	mov	r1, r5
 8002272:	4806      	ldr	r0, [pc, #24]	; (800228c <xTaskRemoveFromEventList+0x80>)
 8002274:	e7ef      	b.n	8002256 <xTaskRemoveFromEventList+0x4a>
 8002276:	bf00      	nop
 8002278:	20003ce8 	.word	0x20003ce8
 800227c:	20003cf0 	.word	0x20003cf0
 8002280:	20003c50 	.word	0x20003c50
 8002284:	20003c44 	.word	0x20003c44
 8002288:	20003d6c 	.word	0x20003d6c
 800228c:	20003d28 	.word	0x20003d28

08002290 <vTaskSetTimeOutState>:
{
 8002290:	b508      	push	{r3, lr}
	configASSERT( pxTimeOut );
 8002292:	b908      	cbnz	r0, 8002298 <vTaskSetTimeOutState+0x8>
 8002294:	f7ff fc8a 	bl	8001bac <prvTaskIsTaskSuspended.part.0>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8002298:	4b03      	ldr	r3, [pc, #12]	; (80022a8 <vTaskSetTimeOutState+0x18>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800229e:	4b03      	ldr	r3, [pc, #12]	; (80022ac <vTaskSetTimeOutState+0x1c>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	6043      	str	r3, [r0, #4]
}
 80022a4:	bd08      	pop	{r3, pc}
 80022a6:	bf00      	nop
 80022a8:	20003d24 	.word	0x20003d24
 80022ac:	20003d68 	.word	0x20003d68

080022b0 <xTaskCheckForTimeOut>:
{
 80022b0:	b570      	push	{r4, r5, r6, lr}
 80022b2:	460d      	mov	r5, r1
	configASSERT( pxTimeOut );
 80022b4:	4604      	mov	r4, r0
 80022b6:	b940      	cbnz	r0, 80022ca <xTaskCheckForTimeOut+0x1a>
 80022b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022bc:	f383 8811 	msr	BASEPRI, r3
 80022c0:	f3bf 8f6f 	isb	sy
 80022c4:	f3bf 8f4f 	dsb	sy
 80022c8:	e7fe      	b.n	80022c8 <xTaskCheckForTimeOut+0x18>
	configASSERT( pxTicksToWait );
 80022ca:	b941      	cbnz	r1, 80022de <xTaskCheckForTimeOut+0x2e>
 80022cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022d0:	f383 8811 	msr	BASEPRI, r3
 80022d4:	f3bf 8f6f 	isb	sy
 80022d8:	f3bf 8f4f 	dsb	sy
 80022dc:	e7fe      	b.n	80022dc <xTaskCheckForTimeOut+0x2c>
	taskENTER_CRITICAL();
 80022de:	f7ff f909 	bl	80014f4 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 80022e2:	4b0e      	ldr	r3, [pc, #56]	; (800231c <xTaskCheckForTimeOut+0x6c>)
 80022e4:	6819      	ldr	r1, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 80022e6:	682b      	ldr	r3, [r5, #0]
 80022e8:	1c5a      	adds	r2, r3, #1
 80022ea:	d010      	beq.n	800230e <xTaskCheckForTimeOut+0x5e>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80022ec:	4a0c      	ldr	r2, [pc, #48]	; (8002320 <xTaskCheckForTimeOut+0x70>)
 80022ee:	6810      	ldr	r0, [r2, #0]
 80022f0:	e9d4 6200 	ldrd	r6, r2, [r4]
 80022f4:	4286      	cmp	r6, r0
 80022f6:	d001      	beq.n	80022fc <xTaskCheckForTimeOut+0x4c>
 80022f8:	4291      	cmp	r1, r2
 80022fa:	d20d      	bcs.n	8002318 <xTaskCheckForTimeOut+0x68>
		else if( ( ( TickType_t ) ( xConstTickCount - pxTimeOut->xTimeOnEntering ) ) < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80022fc:	1a88      	subs	r0, r1, r2
 80022fe:	4283      	cmp	r3, r0
 8002300:	d90a      	bls.n	8002318 <xTaskCheckForTimeOut+0x68>
			*pxTicksToWait -= ( xConstTickCount - pxTimeOut->xTimeOnEntering );
 8002302:	1a5b      	subs	r3, r3, r1
 8002304:	4413      	add	r3, r2
 8002306:	602b      	str	r3, [r5, #0]
			vTaskSetTimeOutState( pxTimeOut );
 8002308:	4620      	mov	r0, r4
 800230a:	f7ff ffc1 	bl	8002290 <vTaskSetTimeOutState>
				xReturn = pdFALSE;
 800230e:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8002310:	f7ff f912 	bl	8001538 <vPortExitCritical>
}
 8002314:	4620      	mov	r0, r4
 8002316:	bd70      	pop	{r4, r5, r6, pc}
			xReturn = pdTRUE;
 8002318:	2401      	movs	r4, #1
 800231a:	e7f9      	b.n	8002310 <xTaskCheckForTimeOut+0x60>
 800231c:	20003d68 	.word	0x20003d68
 8002320:	20003d24 	.word	0x20003d24

08002324 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 8002324:	4b01      	ldr	r3, [pc, #4]	; (800232c <vTaskMissedYield+0x8>)
 8002326:	2201      	movs	r2, #1
 8002328:	601a      	str	r2, [r3, #0]
}
 800232a:	4770      	bx	lr
 800232c:	20003d6c 	.word	0x20003d6c

08002330 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 8002330:	4b05      	ldr	r3, [pc, #20]	; (8002348 <xTaskGetSchedulerState+0x18>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	b133      	cbz	r3, 8002344 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002336:	4b05      	ldr	r3, [pc, #20]	; (800234c <xTaskGetSchedulerState+0x1c>)
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	2b00      	cmp	r3, #0
				xReturn = taskSCHEDULER_SUSPENDED;
 800233c:	bf0c      	ite	eq
 800233e:	2002      	moveq	r0, #2
 8002340:	2000      	movne	r0, #0
 8002342:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 8002344:	2001      	movs	r0, #1
	}
 8002346:	4770      	bx	lr
 8002348:	20003d3c 	.word	0x20003d3c
 800234c:	20003ce8 	.word	0x20003ce8

08002350 <vTaskPriorityInherit>:
	{
 8002350:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		if( pxMutexHolder != NULL )
 8002354:	4604      	mov	r4, r0
 8002356:	2800      	cmp	r0, #0
 8002358:	d02e      	beq.n	80023b8 <vTaskPriorityInherit+0x68>
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
 800235a:	4d1e      	ldr	r5, [pc, #120]	; (80023d4 <vTaskPriorityInherit+0x84>)
 800235c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800235e:	682a      	ldr	r2, [r5, #0]
 8002360:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002362:	4293      	cmp	r3, r2
 8002364:	d228      	bcs.n	80023b8 <vTaskPriorityInherit+0x68>
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8002366:	6982      	ldr	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8002368:	4e1b      	ldr	r6, [pc, #108]	; (80023d8 <vTaskPriorityInherit+0x88>)
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800236a:	2a00      	cmp	r2, #0
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800236c:	bfa1      	itttt	ge
 800236e:	682a      	ldrge	r2, [r5, #0]
 8002370:	6ad2      	ldrge	r2, [r2, #44]	; 0x2c
 8002372:	f1c2 0207 	rsbge	r2, r2, #7
 8002376:	6182      	strge	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8002378:	2714      	movs	r7, #20
 800237a:	6942      	ldr	r2, [r0, #20]
 800237c:	fb07 6303 	mla	r3, r7, r3, r6
 8002380:	429a      	cmp	r2, r3
 8002382:	d116      	bne.n	80023b2 <vTaskPriorityInherit+0x62>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002384:	f100 0804 	add.w	r8, r0, #4
 8002388:	4640      	mov	r0, r8
 800238a:	f7ff f846 	bl	800141a <uxListRemove>
 800238e:	4a13      	ldr	r2, [pc, #76]	; (80023dc <vTaskPriorityInherit+0x8c>)
 8002390:	b1a0      	cbz	r0, 80023bc <vTaskPriorityInherit+0x6c>
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 8002392:	682b      	ldr	r3, [r5, #0]
					prvAddTaskToReadyList( pxTCB );
 8002394:	6811      	ldr	r1, [r2, #0]
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 8002396:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8002398:	62e0      	str	r0, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 800239a:	2301      	movs	r3, #1
 800239c:	4083      	lsls	r3, r0
 800239e:	430b      	orrs	r3, r1
 80023a0:	6013      	str	r3, [r2, #0]
 80023a2:	2314      	movs	r3, #20
 80023a4:	4641      	mov	r1, r8
 80023a6:	fb03 6000 	mla	r0, r3, r0, r6
	}
 80023aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
					prvAddTaskToReadyList( pxTCB );
 80023ae:	f7ff b811 	b.w	80013d4 <vListInsertEnd>
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 80023b2:	682b      	ldr	r3, [r5, #0]
 80023b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023b6:	62c3      	str	r3, [r0, #44]	; 0x2c
	}
 80023b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80023bc:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80023be:	4347      	muls	r7, r0
 80023c0:	59f3      	ldr	r3, [r6, r7]
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d1e5      	bne.n	8002392 <vTaskPriorityInherit+0x42>
 80023c6:	6813      	ldr	r3, [r2, #0]
 80023c8:	2101      	movs	r1, #1
 80023ca:	4081      	lsls	r1, r0
 80023cc:	ea23 0301 	bic.w	r3, r3, r1
 80023d0:	6013      	str	r3, [r2, #0]
 80023d2:	e7de      	b.n	8002392 <vTaskPriorityInherit+0x42>
 80023d4:	20003c44 	.word	0x20003c44
 80023d8:	20003c50 	.word	0x20003c50
 80023dc:	20003cf0 	.word	0x20003cf0

080023e0 <xTaskPriorityDisinherit>:
	{
 80023e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		if( pxMutexHolder != NULL )
 80023e2:	4604      	mov	r4, r0
 80023e4:	b908      	cbnz	r0, 80023ea <xTaskPriorityDisinherit+0xa>
	BaseType_t xReturn = pdFALSE;
 80023e6:	2000      	movs	r0, #0
	}
 80023e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			configASSERT( pxTCB == pxCurrentTCB );
 80023ea:	4b22      	ldr	r3, [pc, #136]	; (8002474 <xTaskPriorityDisinherit+0x94>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	4283      	cmp	r3, r0
 80023f0:	d008      	beq.n	8002404 <xTaskPriorityDisinherit+0x24>
 80023f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023f6:	f383 8811 	msr	BASEPRI, r3
 80023fa:	f3bf 8f6f 	isb	sy
 80023fe:	f3bf 8f4f 	dsb	sy
 8002402:	e7fe      	b.n	8002402 <xTaskPriorityDisinherit+0x22>
			configASSERT( pxTCB->uxMutexesHeld );
 8002404:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002406:	b943      	cbnz	r3, 800241a <xTaskPriorityDisinherit+0x3a>
 8002408:	f04f 0350 	mov.w	r3, #80	; 0x50
 800240c:	f383 8811 	msr	BASEPRI, r3
 8002410:	f3bf 8f6f 	isb	sy
 8002414:	f3bf 8f4f 	dsb	sy
 8002418:	e7fe      	b.n	8002418 <xTaskPriorityDisinherit+0x38>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800241a:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 800241c:	6c42      	ldr	r2, [r0, #68]	; 0x44
			( pxTCB->uxMutexesHeld )--;
 800241e:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8002420:	4291      	cmp	r1, r2
			( pxTCB->uxMutexesHeld )--;
 8002422:	6483      	str	r3, [r0, #72]	; 0x48
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8002424:	d0df      	beq.n	80023e6 <xTaskPriorityDisinherit+0x6>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8002426:	2b00      	cmp	r3, #0
 8002428:	d1dd      	bne.n	80023e6 <xTaskPriorityDisinherit+0x6>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800242a:	1d05      	adds	r5, r0, #4
 800242c:	4628      	mov	r0, r5
 800242e:	f7fe fff4 	bl	800141a <uxListRemove>
 8002432:	4e11      	ldr	r6, [pc, #68]	; (8002478 <xTaskPriorityDisinherit+0x98>)
 8002434:	4a11      	ldr	r2, [pc, #68]	; (800247c <xTaskPriorityDisinherit+0x9c>)
 8002436:	b950      	cbnz	r0, 800244e <xTaskPriorityDisinherit+0x6e>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8002438:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800243a:	2114      	movs	r1, #20
 800243c:	4379      	muls	r1, r7
 800243e:	5873      	ldr	r3, [r6, r1]
 8002440:	b92b      	cbnz	r3, 800244e <xTaskPriorityDisinherit+0x6e>
 8002442:	6813      	ldr	r3, [r2, #0]
 8002444:	2001      	movs	r0, #1
 8002446:	40b8      	lsls	r0, r7
 8002448:	ea23 0300 	bic.w	r3, r3, r0
 800244c:	6013      	str	r3, [r2, #0]
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800244e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002450:	62e3      	str	r3, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002452:	f1c3 0107 	rsb	r1, r3, #7
 8002456:	61a1      	str	r1, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 8002458:	6811      	ldr	r1, [r2, #0]
 800245a:	2401      	movs	r4, #1
 800245c:	fa04 f003 	lsl.w	r0, r4, r3
 8002460:	4308      	orrs	r0, r1
 8002462:	6010      	str	r0, [r2, #0]
 8002464:	2014      	movs	r0, #20
 8002466:	fb00 6003 	mla	r0, r0, r3, r6
 800246a:	4629      	mov	r1, r5
 800246c:	f7fe ffb2 	bl	80013d4 <vListInsertEnd>
					xReturn = pdTRUE;
 8002470:	4620      	mov	r0, r4
		return xReturn;
 8002472:	e7b9      	b.n	80023e8 <xTaskPriorityDisinherit+0x8>
 8002474:	20003c44 	.word	0x20003c44
 8002478:	20003c50 	.word	0x20003c50
 800247c:	20003cf0 	.word	0x20003cf0

08002480 <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 8002480:	4b04      	ldr	r3, [pc, #16]	; (8002494 <pvTaskIncrementMutexHeldCount+0x14>)
 8002482:	681a      	ldr	r2, [r3, #0]
 8002484:	b11a      	cbz	r2, 800248e <pvTaskIncrementMutexHeldCount+0xe>
			( pxCurrentTCB->uxMutexesHeld )++;
 8002486:	6819      	ldr	r1, [r3, #0]
 8002488:	6c8a      	ldr	r2, [r1, #72]	; 0x48
 800248a:	3201      	adds	r2, #1
 800248c:	648a      	str	r2, [r1, #72]	; 0x48
		return pxCurrentTCB;
 800248e:	6818      	ldr	r0, [r3, #0]
	}
 8002490:	4770      	bx	lr
 8002492:	bf00      	nop
 8002494:	20003c44 	.word	0x20003c44

08002498 <main_task1>:
/* USER CODE BEGIN 0 */

QueueHandle_t Q;

/* Task 1. */
void main_task1() {
 8002498:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	int i = 0;
	char str[] = "Hello world!\r\n";
 800249a:	4b13      	ldr	r3, [pc, #76]	; (80024e8 <main_task1+0x50>)
 800249c:	466a      	mov	r2, sp
 800249e:	f103 0608 	add.w	r6, r3, #8
 80024a2:	4615      	mov	r5, r2
 80024a4:	6818      	ldr	r0, [r3, #0]
 80024a6:	6859      	ldr	r1, [r3, #4]
 80024a8:	4614      	mov	r4, r2
 80024aa:	c403      	stmia	r4!, {r0, r1}
 80024ac:	3308      	adds	r3, #8
 80024ae:	42b3      	cmp	r3, r6
 80024b0:	4622      	mov	r2, r4
 80024b2:	d1f7      	bne.n	80024a4 <main_task1+0xc>
 80024b4:	6818      	ldr	r0, [r3, #0]
 80024b6:	8899      	ldrh	r1, [r3, #4]
	while(1) {
		//while(USART_Send(USART6, str, strlen(str), NON_BLOCKING) < 0);
		if(xQueueSendToBack(Q, &str[i], 50) == pdPASS)
 80024b8:	4e0c      	ldr	r6, [pc, #48]	; (80024ec <main_task1+0x54>)
	char str[] = "Hello world!\r\n";
 80024ba:	799b      	ldrb	r3, [r3, #6]
 80024bc:	6020      	str	r0, [r4, #0]
 80024be:	80a1      	strh	r1, [r4, #4]
 80024c0:	71a3      	strb	r3, [r4, #6]
	int i = 0;
 80024c2:	2400      	movs	r4, #0
		if(xQueueSendToBack(Q, &str[i], 50) == pdPASS)
 80024c4:	2300      	movs	r3, #0
 80024c6:	2232      	movs	r2, #50	; 0x32
 80024c8:	1929      	adds	r1, r5, r4
 80024ca:	6830      	ldr	r0, [r6, #0]
 80024cc:	f7ff f9fc 	bl	80018c8 <xQueueGenericSend>
 80024d0:	2801      	cmp	r0, #1
 80024d2:	d1f7      	bne.n	80024c4 <main_task1+0x2c>
			i = (i + 1) % strlen(str);
 80024d4:	4628      	mov	r0, r5
 80024d6:	f7fd fe7b 	bl	80001d0 <strlen>
 80024da:	3401      	adds	r4, #1
 80024dc:	fbb4 f3f0 	udiv	r3, r4, r0
 80024e0:	fb03 4410 	mls	r4, r3, r0, r4
 80024e4:	e7ee      	b.n	80024c4 <main_task1+0x2c>
 80024e6:	bf00      	nop
 80024e8:	08002963 	.word	0x08002963
 80024ec:	20003d78 	.word	0x20003d78

080024f0 <main_task2>:
	}
}

/* Task 2. */
void main_task2() {
 80024f0:	b507      	push	{r0, r1, r2, lr}
	uint8_t c;

	//USART_EnableRxPipe(USART6);
	while(1) {
		if(xQueueReceive(Q, &c, 50)) {
 80024f2:	4c0a      	ldr	r4, [pc, #40]	; (800251c <main_task2+0x2c>)
 80024f4:	6820      	ldr	r0, [r4, #0]
 80024f6:	2300      	movs	r3, #0
 80024f8:	2232      	movs	r2, #50	; 0x32
 80024fa:	f10d 0107 	add.w	r1, sp, #7
 80024fe:	f7ff fa95 	bl	8001a2c <xQueueGenericReceive>
 8002502:	2800      	cmp	r0, #0
 8002504:	d0f6      	beq.n	80024f4 <main_task2+0x4>
		//if(USART_Read(USART6, &c, 1, NON_BLOCKING))
//			USART_Send(USART2, &c, 1, BLOCKING);

			HAL_UART_Transmit(&huart2, &c, 1, 0);
 8002506:	2300      	movs	r3, #0
 8002508:	2201      	movs	r2, #1
 800250a:	f10d 0107 	add.w	r1, sp, #7
 800250e:	4804      	ldr	r0, [pc, #16]	; (8002520 <main_task2+0x30>)
 8002510:	f7fe fde0 	bl	80010d4 <HAL_UART_Transmit>
			vTaskDelay(1);
 8002514:	2001      	movs	r0, #1
 8002516:	f7ff fdc7 	bl	80020a8 <vTaskDelay>
 800251a:	e7eb      	b.n	80024f4 <main_task2+0x4>
 800251c:	20003d78 	.word	0x20003d78
 8002520:	20003db8 	.word	0x20003db8

08002524 <StartDefaultTask>:

/* USER CODE END 4 */

/* StartDefaultTask function */
void StartDefaultTask(void const * argument)
{
 8002524:	b508      	push	{r3, lr}

  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8002526:	2001      	movs	r0, #1
 8002528:	f7fe fe4b 	bl	80011c2 <osDelay>
 800252c:	e7fb      	b.n	8002526 <StartDefaultTask+0x2>
	...

08002530 <SystemClock_Config>:
{
 8002530:	b570      	push	{r4, r5, r6, lr}
 8002532:	b094      	sub	sp, #80	; 0x50
  __HAL_RCC_PWR_CLK_ENABLE();
 8002534:	2300      	movs	r3, #0
 8002536:	4a27      	ldr	r2, [pc, #156]	; (80025d4 <SystemClock_Config+0xa4>)
 8002538:	9301      	str	r3, [sp, #4]
 800253a:	6c11      	ldr	r1, [r2, #64]	; 0x40
 800253c:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8002540:	6411      	str	r1, [r2, #64]	; 0x40
 8002542:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002544:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8002548:	9201      	str	r2, [sp, #4]
 800254a:	9a01      	ldr	r2, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800254c:	4a22      	ldr	r2, [pc, #136]	; (80025d8 <SystemClock_Config+0xa8>)
 800254e:	9302      	str	r3, [sp, #8]
 8002550:	6811      	ldr	r1, [r2, #0]
 8002552:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 8002556:	6011      	str	r1, [r2, #0]
 8002558:	6812      	ldr	r2, [r2, #0]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800255a:	2402      	movs	r4, #2
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800255c:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
  RCC_OscInitStruct.PLL.PLLN = 168;
 8002560:	2008      	movs	r0, #8
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002562:	9202      	str	r2, [sp, #8]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002564:	e9cd 430e 	strd	r4, r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLN = 168;
 8002568:	23a8      	movs	r3, #168	; 0xa8
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800256a:	9a02      	ldr	r2, [sp, #8]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800256c:	9408      	str	r4, [sp, #32]
  RCC_OscInitStruct.HSICalibrationValue = 16;
 800256e:	2101      	movs	r1, #1
 8002570:	2210      	movs	r2, #16
  RCC_OscInitStruct.PLL.PLLN = 168;
 8002572:	e9cd 0310 	strd	r0, r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002576:	2604      	movs	r6, #4
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002578:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.HSICalibrationValue = 16;
 800257a:	e9cd 120b 	strd	r1, r2, [sp, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800257e:	9412      	str	r4, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002580:	9613      	str	r6, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002582:	f7fe f937 	bl	80007f4 <HAL_RCC_OscConfig>
 8002586:	b100      	cbz	r0, 800258a <SystemClock_Config+0x5a>
 8002588:	e7fe      	b.n	8002588 <SystemClock_Config+0x58>
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800258a:	9005      	str	r0, [sp, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800258c:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 8002590:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002594:	250f      	movs	r5, #15
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002596:	2105      	movs	r1, #5
 8002598:	a803      	add	r0, sp, #12
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800259a:	e9cd 5403 	strd	r5, r4, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800259e:	e9cd 2306 	strd	r2, r3, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80025a2:	f7fe facb 	bl	8000b3c <HAL_RCC_ClockConfig>
 80025a6:	4604      	mov	r4, r0
 80025a8:	b100      	cbz	r0, 80025ac <SystemClock_Config+0x7c>
 80025aa:	e7fe      	b.n	80025aa <SystemClock_Config+0x7a>
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 80025ac:	f7fe fb5e 	bl	8000c6c <HAL_RCC_GetHCLKFreq>
 80025b0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80025b4:	fbb0 f0f3 	udiv	r0, r0, r3
 80025b8:	f7fe f814 	bl	80005e4 <HAL_SYSTICK_Config>
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 80025bc:	4630      	mov	r0, r6
 80025be:	f7fe f827 	bl	8000610 <HAL_SYSTICK_CLKSourceConfig>
  HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);
 80025c2:	4622      	mov	r2, r4
 80025c4:	4629      	mov	r1, r5
 80025c6:	f04f 30ff 	mov.w	r0, #4294967295
 80025ca:	f7fd ffd7 	bl	800057c <HAL_NVIC_SetPriority>
}
 80025ce:	b014      	add	sp, #80	; 0x50
 80025d0:	bd70      	pop	{r4, r5, r6, pc}
 80025d2:	bf00      	nop
 80025d4:	40023800 	.word	0x40023800
 80025d8:	40007000 	.word	0x40007000

080025dc <main>:
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	b08a      	sub	sp, #40	; 0x28
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80025e0:	2400      	movs	r4, #0
  HAL_Init();
 80025e2:	f7fd ff91 	bl	8000508 <HAL_Init>
  SystemClock_Config();
 80025e6:	f7ff ffa3 	bl	8002530 <SystemClock_Config>
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80025ea:	4b40      	ldr	r3, [pc, #256]	; (80026ec <main+0x110>)
 80025ec:	9402      	str	r4, [sp, #8]
 80025ee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 80025f0:	483f      	ldr	r0, [pc, #252]	; (80026f0 <main+0x114>)
  htim6.Instance = TIM6;
 80025f2:	4d40      	ldr	r5, [pc, #256]	; (80026f4 <main+0x118>)
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80025f4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80025f8:	631a      	str	r2, [r3, #48]	; 0x30
 80025fa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80025fc:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8002600:	9202      	str	r2, [sp, #8]
 8002602:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002604:	9403      	str	r4, [sp, #12]
 8002606:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002608:	f042 0201 	orr.w	r2, r2, #1
 800260c:	631a      	str	r2, [r3, #48]	; 0x30
 800260e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002610:	f002 0201 	and.w	r2, r2, #1
 8002614:	9203      	str	r2, [sp, #12]
 8002616:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002618:	9404      	str	r4, [sp, #16]
 800261a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800261c:	f042 0208 	orr.w	r2, r2, #8
 8002620:	631a      	str	r2, [r3, #48]	; 0x30
 8002622:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002624:	f003 0308 	and.w	r3, r3, #8
 8002628:	9304      	str	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 800262a:	4622      	mov	r2, r4
 800262c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002630:	9b04      	ldr	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002632:	2701      	movs	r7, #1
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 8002634:	f7fe f8d8 	bl	80007e8 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002638:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800263c:	482c      	ldr	r0, [pc, #176]	; (80026f0 <main+0x114>)
 800263e:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002640:	e9cd 3705 	strd	r3, r7, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002644:	e9cd 4407 	strd	r4, r4, [sp, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002648:	f7fd ffee 	bl	8000628 <HAL_GPIO_Init>
  htim6.Instance = TIM6;
 800264c:	4b2a      	ldr	r3, [pc, #168]	; (80026f8 <main+0x11c>)
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800264e:	4628      	mov	r0, r5
  htim6.Init.Prescaler = 0;
 8002650:	e9c5 3400 	strd	r3, r4, [r5]
  htim6.Init.Period = 0;
 8002654:	e9c5 4402 	strd	r4, r4, [r5, #8]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002658:	f7fe fb90 	bl	8000d7c <HAL_TIM_Base_Init>
 800265c:	b100      	cbz	r0, 8002660 <main+0x84>
 800265e:	e7fe      	b.n	800265e <main+0x82>
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002660:	e9cd 0005 	strd	r0, r0, [sp, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002664:	a905      	add	r1, sp, #20
 8002666:	4628      	mov	r0, r5
 8002668:	f7fe fba2 	bl	8000db0 <HAL_TIMEx_MasterConfigSynchronization>
 800266c:	b100      	cbz	r0, 8002670 <main+0x94>
 800266e:	e7fe      	b.n	800266e <main+0x92>
  huart2.Instance = USART2;
 8002670:	4b22      	ldr	r3, [pc, #136]	; (80026fc <main+0x120>)
  huart2.Init.BaudRate = 115200;
 8002672:	4923      	ldr	r1, [pc, #140]	; (8002700 <main+0x124>)
  huart2.Init.Parity = UART_PARITY_NONE;
 8002674:	6118      	str	r0, [r3, #16]
  huart2.Init.BaudRate = 115200;
 8002676:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800267a:	e9c3 1200 	strd	r1, r2, [r3]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800267e:	220c      	movs	r2, #12
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002680:	e9c3 0002 	strd	r0, r0, [r3, #8]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002684:	e9c3 2005 	strd	r2, r0, [r3, #20]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002688:	61d8      	str	r0, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800268a:	4618      	mov	r0, r3
 800268c:	f7fe fcf4 	bl	8001078 <HAL_UART_Init>
 8002690:	4604      	mov	r4, r0
 8002692:	b100      	cbz	r0, 8002696 <main+0xba>
 8002694:	e7fe      	b.n	8002694 <main+0xb8>
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8002696:	4e1b      	ldr	r6, [pc, #108]	; (8002704 <main+0x128>)
 8002698:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800269a:	ad05      	add	r5, sp, #20
 800269c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800269e:	6833      	ldr	r3, [r6, #0]
 80026a0:	602b      	str	r3, [r5, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80026a2:	4621      	mov	r1, r4
 80026a4:	a805      	add	r0, sp, #20
 80026a6:	f7fe fd74 	bl	8001192 <osThreadCreate>
 80026aa:	4b17      	ldr	r3, [pc, #92]	; (8002708 <main+0x12c>)
	Q = xQueueCreate(16, sizeof(uint8_t));
 80026ac:	4622      	mov	r2, r4
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80026ae:	6018      	str	r0, [r3, #0]
	Q = xQueueCreate(16, sizeof(uint8_t));
 80026b0:	4639      	mov	r1, r7
 80026b2:	2010      	movs	r0, #16
 80026b4:	f7ff f8e6 	bl	8001884 <xQueueGenericCreate>
 80026b8:	4b14      	ldr	r3, [pc, #80]	; (800270c <main+0x130>)
		xTaskCreate(main_task1, "Main Task1", 512, NULL, tskIDLE_PRIORITY, NULL);
 80026ba:	4915      	ldr	r1, [pc, #84]	; (8002710 <main+0x134>)
	Q = xQueueCreate(16, sizeof(uint8_t));
 80026bc:	6018      	str	r0, [r3, #0]
		xTaskCreate(main_task1, "Main Task1", 512, NULL, tskIDLE_PRIORITY, NULL);
 80026be:	f44f 7200 	mov.w	r2, #512	; 0x200
 80026c2:	4623      	mov	r3, r4
 80026c4:	e9cd 4400 	strd	r4, r4, [sp]
 80026c8:	4812      	ldr	r0, [pc, #72]	; (8002714 <main+0x138>)
 80026ca:	f7ff fad1 	bl	8001c70 <xTaskCreate>
		xTaskCreate(main_task2, "Main Task2", 512, NULL, tskIDLE_PRIORITY, NULL);
 80026ce:	4623      	mov	r3, r4
 80026d0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80026d4:	4910      	ldr	r1, [pc, #64]	; (8002718 <main+0x13c>)
 80026d6:	4811      	ldr	r0, [pc, #68]	; (800271c <main+0x140>)
 80026d8:	e9cd 4400 	strd	r4, r4, [sp]
 80026dc:	f7ff fac8 	bl	8001c70 <xTaskCreate>
		vTaskStartScheduler();
 80026e0:	f7ff fb96 	bl	8001e10 <vTaskStartScheduler>
  osKernelStart();
 80026e4:	f7fe fd50 	bl	8001188 <osKernelStart>
 80026e8:	e7fe      	b.n	80026e8 <main+0x10c>
 80026ea:	bf00      	nop
 80026ec:	40023800 	.word	0x40023800
 80026f0:	40020c00 	.word	0x40020c00
 80026f4:	20003d7c 	.word	0x20003d7c
 80026f8:	40001000 	.word	0x40001000
 80026fc:	20003db8 	.word	0x20003db8
 8002700:	40004400 	.word	0x40004400
 8002704:	08002934 	.word	0x08002934
 8002708:	20003d74 	.word	0x20003d74
 800270c:	20003d78 	.word	0x20003d78
 8002710:	0800294d 	.word	0x0800294d
 8002714:	08002499 	.word	0x08002499
 8002718:	08002958 	.word	0x08002958
 800271c:	080024f1 	.word	0x080024f1

08002720 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002720:	b508      	push	{r3, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002722:	2003      	movs	r0, #3
 8002724:	f7fd ff18 	bl	8000558 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8002728:	2200      	movs	r2, #0
 800272a:	4611      	mov	r1, r2
 800272c:	f06f 000b 	mvn.w	r0, #11
 8002730:	f7fd ff24 	bl	800057c <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8002734:	2200      	movs	r2, #0
 8002736:	4611      	mov	r1, r2
 8002738:	f06f 000a 	mvn.w	r0, #10
 800273c:	f7fd ff1e 	bl	800057c <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8002740:	2200      	movs	r2, #0
 8002742:	4611      	mov	r1, r2
 8002744:	f06f 0009 	mvn.w	r0, #9
 8002748:	f7fd ff18 	bl	800057c <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 800274c:	2200      	movs	r2, #0
 800274e:	4611      	mov	r1, r2
 8002750:	f06f 0004 	mvn.w	r0, #4
 8002754:	f7fd ff12 	bl	800057c <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8002758:	2200      	movs	r2, #0
 800275a:	4611      	mov	r1, r2
 800275c:	f06f 0003 	mvn.w	r0, #3
 8002760:	f7fd ff0c 	bl	800057c <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002764:	2200      	movs	r2, #0
 8002766:	210f      	movs	r1, #15
 8002768:	f06f 0001 	mvn.w	r0, #1
 800276c:	f7fd ff06 	bl	800057c <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);
 8002770:	2200      	movs	r2, #0
 8002772:	210f      	movs	r1, #15
 8002774:	f04f 30ff 	mov.w	r0, #4294967295

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002778:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);
 800277c:	f7fd befe 	b.w	800057c <HAL_NVIC_SetPriority>

08002780 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{

  if(htim_base->Instance==TIM6)
 8002780:	6802      	ldr	r2, [r0, #0]
 8002782:	4b09      	ldr	r3, [pc, #36]	; (80027a8 <HAL_TIM_Base_MspInit+0x28>)
 8002784:	429a      	cmp	r2, r3
{
 8002786:	b082      	sub	sp, #8
  if(htim_base->Instance==TIM6)
 8002788:	d10b      	bne.n	80027a2 <HAL_TIM_Base_MspInit+0x22>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800278a:	2300      	movs	r3, #0
 800278c:	9301      	str	r3, [sp, #4]
 800278e:	4b07      	ldr	r3, [pc, #28]	; (80027ac <HAL_TIM_Base_MspInit+0x2c>)
 8002790:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002792:	f042 0210 	orr.w	r2, r2, #16
 8002796:	641a      	str	r2, [r3, #64]	; 0x40
 8002798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800279a:	f003 0310 	and.w	r3, r3, #16
 800279e:	9301      	str	r3, [sp, #4]
 80027a0:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 80027a2:	b002      	add	sp, #8
 80027a4:	4770      	bx	lr
 80027a6:	bf00      	nop
 80027a8:	40001000 	.word	0x40001000
 80027ac:	40023800 	.word	0x40023800

080027b0 <HAL_UART_MspInit>:
  }

}

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80027b0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART2)
 80027b2:	6802      	ldr	r2, [r0, #0]
 80027b4:	4b0f      	ldr	r3, [pc, #60]	; (80027f4 <HAL_UART_MspInit+0x44>)
 80027b6:	429a      	cmp	r2, r3
 80027b8:	d119      	bne.n	80027ee <HAL_UART_MspInit+0x3e>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80027ba:	2300      	movs	r3, #0
 80027bc:	9300      	str	r3, [sp, #0]
 80027be:	4b0e      	ldr	r3, [pc, #56]	; (80027f8 <HAL_UART_MspInit+0x48>)
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027c0:	480e      	ldr	r0, [pc, #56]	; (80027fc <HAL_UART_MspInit+0x4c>)
    __HAL_RCC_USART2_CLK_ENABLE();
 80027c2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80027c4:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80027c8:	641a      	str	r2, [r3, #64]	; 0x40
 80027ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027d0:	9300      	str	r3, [sp, #0]
 80027d2:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027d4:	220c      	movs	r2, #12
 80027d6:	2302      	movs	r3, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027d8:	2101      	movs	r1, #1
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027da:	e9cd 2301 	strd	r2, r3, [sp, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027de:	2303      	movs	r3, #3
 80027e0:	e9cd 1303 	strd	r1, r3, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80027e4:	2307      	movs	r3, #7
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027e6:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80027e8:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027ea:	f7fd ff1d 	bl	8000628 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80027ee:	b007      	add	sp, #28
 80027f0:	f85d fb04 	ldr.w	pc, [sp], #4
 80027f4:	40004400 	.word	0x40004400
 80027f8:	40023800 	.word	0x40023800
 80027fc:	40020000 	.word	0x40020000

08002800 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002800:	4770      	bx	lr

08002802 <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 8002802:	e7fe      	b.n	8002802 <HardFault_Handler>

08002804 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 8002804:	e7fe      	b.n	8002804 <MemManage_Handler>

08002806 <BusFault_Handler>:

/**
* @brief This function handles Pre-fetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 8002806:	e7fe      	b.n	8002806 <BusFault_Handler>

08002808 <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 8002808:	e7fe      	b.n	8002808 <UsageFault_Handler>

0800280a <DebugMon_Handler>:
 800280a:	4770      	bx	lr

0800280c <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 800280c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800280e:	f7fd fe95 	bl	800053c <HAL_IncTick>
  osSystickHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002812:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  osSystickHandler();
 8002816:	f7fe bcdc 	b.w	80011d2 <osSystickHandler>
	...

0800281c <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800281c:	490f      	ldr	r1, [pc, #60]	; (800285c <SystemInit+0x40>)
 800281e:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8002822:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002826:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800282a:	4b0d      	ldr	r3, [pc, #52]	; (8002860 <SystemInit+0x44>)
 800282c:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800282e:	2000      	movs	r0, #0
  RCC->CR |= (uint32_t)0x00000001;
 8002830:	f042 0201 	orr.w	r2, r2, #1
 8002834:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 8002836:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8002838:	681a      	ldr	r2, [r3, #0]
 800283a:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 800283e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002842:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8002844:	4a07      	ldr	r2, [pc, #28]	; (8002864 <SystemInit+0x48>)
 8002846:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8002848:	681a      	ldr	r2, [r3, #0]
 800284a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800284e:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8002850:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002852:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002856:	608b      	str	r3, [r1, #8]
#endif
}
 8002858:	4770      	bx	lr
 800285a:	bf00      	nop
 800285c:	e000ed00 	.word	0xe000ed00
 8002860:	40023800 	.word	0x40023800
 8002864:	24003010 	.word	0x24003010

08002868 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002868:	f8df d034 	ldr.w	sp, [pc, #52]	; 80028a0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800286c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800286e:	e003      	b.n	8002878 <LoopCopyDataInit>

08002870 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002870:	4b0c      	ldr	r3, [pc, #48]	; (80028a4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002872:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002874:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002876:	3104      	adds	r1, #4

08002878 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002878:	480b      	ldr	r0, [pc, #44]	; (80028a8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800287a:	4b0c      	ldr	r3, [pc, #48]	; (80028ac <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800287c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800287e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002880:	d3f6      	bcc.n	8002870 <CopyDataInit>
  ldr  r2, =_sbss
 8002882:	4a0b      	ldr	r2, [pc, #44]	; (80028b0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002884:	e002      	b.n	800288c <LoopFillZerobss>

08002886 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002886:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002888:	f842 3b04 	str.w	r3, [r2], #4

0800288c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800288c:	4b09      	ldr	r3, [pc, #36]	; (80028b4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800288e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002890:	d3f9      	bcc.n	8002886 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002892:	f7ff ffc3 	bl	800281c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002896:	f000 f811 	bl	80028bc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800289a:	f7ff fe9f 	bl	80025dc <main>
  bx  lr    
 800289e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80028a0:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80028a4:	080029a8 	.word	0x080029a8
  ldr  r0, =_sdata
 80028a8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80028ac:	20000008 	.word	0x20000008
  ldr  r2, =_sbss
 80028b0:	20000008 	.word	0x20000008
  ldr  r3, = _ebss
 80028b4:	20003df8 	.word	0x20003df8

080028b8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80028b8:	e7fe      	b.n	80028b8 <ADC_IRQHandler>
	...

080028bc <__libc_init_array>:
 80028bc:	b570      	push	{r4, r5, r6, lr}
 80028be:	4e0d      	ldr	r6, [pc, #52]	; (80028f4 <__libc_init_array+0x38>)
 80028c0:	4c0d      	ldr	r4, [pc, #52]	; (80028f8 <__libc_init_array+0x3c>)
 80028c2:	1ba4      	subs	r4, r4, r6
 80028c4:	10a4      	asrs	r4, r4, #2
 80028c6:	2500      	movs	r5, #0
 80028c8:	42a5      	cmp	r5, r4
 80028ca:	d109      	bne.n	80028e0 <__libc_init_array+0x24>
 80028cc:	4e0b      	ldr	r6, [pc, #44]	; (80028fc <__libc_init_array+0x40>)
 80028ce:	4c0c      	ldr	r4, [pc, #48]	; (8002900 <__libc_init_array+0x44>)
 80028d0:	f000 f824 	bl	800291c <_init>
 80028d4:	1ba4      	subs	r4, r4, r6
 80028d6:	10a4      	asrs	r4, r4, #2
 80028d8:	2500      	movs	r5, #0
 80028da:	42a5      	cmp	r5, r4
 80028dc:	d105      	bne.n	80028ea <__libc_init_array+0x2e>
 80028de:	bd70      	pop	{r4, r5, r6, pc}
 80028e0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80028e4:	4798      	blx	r3
 80028e6:	3501      	adds	r5, #1
 80028e8:	e7ee      	b.n	80028c8 <__libc_init_array+0xc>
 80028ea:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80028ee:	4798      	blx	r3
 80028f0:	3501      	adds	r5, #1
 80028f2:	e7f2      	b.n	80028da <__libc_init_array+0x1e>
 80028f4:	080029a0 	.word	0x080029a0
 80028f8:	080029a0 	.word	0x080029a0
 80028fc:	080029a0 	.word	0x080029a0
 8002900:	080029a4 	.word	0x080029a4

08002904 <memcpy>:
 8002904:	b510      	push	{r4, lr}
 8002906:	1e43      	subs	r3, r0, #1
 8002908:	440a      	add	r2, r1
 800290a:	4291      	cmp	r1, r2
 800290c:	d100      	bne.n	8002910 <memcpy+0xc>
 800290e:	bd10      	pop	{r4, pc}
 8002910:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002914:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002918:	e7f7      	b.n	800290a <memcpy+0x6>
	...

0800291c <_init>:
 800291c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800291e:	bf00      	nop
 8002920:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002922:	bc08      	pop	{r3}
 8002924:	469e      	mov	lr, r3
 8002926:	4770      	bx	lr

08002928 <_fini>:
 8002928:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800292a:	bf00      	nop
 800292c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800292e:	bc08      	pop	{r3}
 8002930:	469e      	mov	lr, r3
 8002932:	4770      	bx	lr
