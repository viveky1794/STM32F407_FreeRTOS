
FreeRTOS_TESTS_LED_BLINK.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001dcc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  08001f5c  08001f5c  00011f5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08001fbc  08001fbc  00011fbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08001fc4  08001fc4  00011fc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08001fc8  08001fc8  00011fc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000008  20000000  08001fcc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  00020008  2**0
                  CONTENTS
  8 .bss          00003dac  20000008  20000008  00020008  2**2
                  ALLOC
  9 ._user_heap_stack 00000604  20003db4  20003db4  00020008  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  00020008  2**0
                  CONTENTS, READONLY
 11 .debug_info   00014884  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 000027e3  00000000  00000000  000348bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00007981  00000000  00000000  0003709f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000c98  00000000  00000000  0003ea20  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000c70  00000000  00000000  0003f6b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002222e  00000000  00000000  00040328  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000a633  00000000  00000000  00062556  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c8aa2  00000000  00000000  0006cb89  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0013562b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002188  00000000  00000000  001356a8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000008 	.word	0x20000008
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08001f44 	.word	0x08001f44

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000000c 	.word	0x2000000c
 80001cc:	08001f44 	.word	0x08001f44

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b972 	b.w	80004cc <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9e08      	ldr	r6, [sp, #32]
 8000206:	4604      	mov	r4, r0
 8000208:	4688      	mov	r8, r1
 800020a:	2b00      	cmp	r3, #0
 800020c:	d14b      	bne.n	80002a6 <__udivmoddi4+0xa6>
 800020e:	428a      	cmp	r2, r1
 8000210:	4615      	mov	r5, r2
 8000212:	d967      	bls.n	80002e4 <__udivmoddi4+0xe4>
 8000214:	fab2 f282 	clz	r2, r2
 8000218:	b14a      	cbz	r2, 800022e <__udivmoddi4+0x2e>
 800021a:	f1c2 0720 	rsb	r7, r2, #32
 800021e:	fa01 f302 	lsl.w	r3, r1, r2
 8000222:	fa20 f707 	lsr.w	r7, r0, r7
 8000226:	4095      	lsls	r5, r2
 8000228:	ea47 0803 	orr.w	r8, r7, r3
 800022c:	4094      	lsls	r4, r2
 800022e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000232:	0c23      	lsrs	r3, r4, #16
 8000234:	fbb8 f7fe 	udiv	r7, r8, lr
 8000238:	fa1f fc85 	uxth.w	ip, r5
 800023c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000240:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000244:	fb07 f10c 	mul.w	r1, r7, ip
 8000248:	4299      	cmp	r1, r3
 800024a:	d909      	bls.n	8000260 <__udivmoddi4+0x60>
 800024c:	18eb      	adds	r3, r5, r3
 800024e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000252:	f080 811b 	bcs.w	800048c <__udivmoddi4+0x28c>
 8000256:	4299      	cmp	r1, r3
 8000258:	f240 8118 	bls.w	800048c <__udivmoddi4+0x28c>
 800025c:	3f02      	subs	r7, #2
 800025e:	442b      	add	r3, r5
 8000260:	1a5b      	subs	r3, r3, r1
 8000262:	b2a4      	uxth	r4, r4
 8000264:	fbb3 f0fe 	udiv	r0, r3, lr
 8000268:	fb0e 3310 	mls	r3, lr, r0, r3
 800026c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000270:	fb00 fc0c 	mul.w	ip, r0, ip
 8000274:	45a4      	cmp	ip, r4
 8000276:	d909      	bls.n	800028c <__udivmoddi4+0x8c>
 8000278:	192c      	adds	r4, r5, r4
 800027a:	f100 33ff 	add.w	r3, r0, #4294967295
 800027e:	f080 8107 	bcs.w	8000490 <__udivmoddi4+0x290>
 8000282:	45a4      	cmp	ip, r4
 8000284:	f240 8104 	bls.w	8000490 <__udivmoddi4+0x290>
 8000288:	3802      	subs	r0, #2
 800028a:	442c      	add	r4, r5
 800028c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000290:	eba4 040c 	sub.w	r4, r4, ip
 8000294:	2700      	movs	r7, #0
 8000296:	b11e      	cbz	r6, 80002a0 <__udivmoddi4+0xa0>
 8000298:	40d4      	lsrs	r4, r2
 800029a:	2300      	movs	r3, #0
 800029c:	e9c6 4300 	strd	r4, r3, [r6]
 80002a0:	4639      	mov	r1, r7
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	428b      	cmp	r3, r1
 80002a8:	d909      	bls.n	80002be <__udivmoddi4+0xbe>
 80002aa:	2e00      	cmp	r6, #0
 80002ac:	f000 80eb 	beq.w	8000486 <__udivmoddi4+0x286>
 80002b0:	2700      	movs	r7, #0
 80002b2:	e9c6 0100 	strd	r0, r1, [r6]
 80002b6:	4638      	mov	r0, r7
 80002b8:	4639      	mov	r1, r7
 80002ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002be:	fab3 f783 	clz	r7, r3
 80002c2:	2f00      	cmp	r7, #0
 80002c4:	d147      	bne.n	8000356 <__udivmoddi4+0x156>
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d302      	bcc.n	80002d0 <__udivmoddi4+0xd0>
 80002ca:	4282      	cmp	r2, r0
 80002cc:	f200 80fa 	bhi.w	80004c4 <__udivmoddi4+0x2c4>
 80002d0:	1a84      	subs	r4, r0, r2
 80002d2:	eb61 0303 	sbc.w	r3, r1, r3
 80002d6:	2001      	movs	r0, #1
 80002d8:	4698      	mov	r8, r3
 80002da:	2e00      	cmp	r6, #0
 80002dc:	d0e0      	beq.n	80002a0 <__udivmoddi4+0xa0>
 80002de:	e9c6 4800 	strd	r4, r8, [r6]
 80002e2:	e7dd      	b.n	80002a0 <__udivmoddi4+0xa0>
 80002e4:	b902      	cbnz	r2, 80002e8 <__udivmoddi4+0xe8>
 80002e6:	deff      	udf	#255	; 0xff
 80002e8:	fab2 f282 	clz	r2, r2
 80002ec:	2a00      	cmp	r2, #0
 80002ee:	f040 808f 	bne.w	8000410 <__udivmoddi4+0x210>
 80002f2:	1b49      	subs	r1, r1, r5
 80002f4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f8:	fa1f f885 	uxth.w	r8, r5
 80002fc:	2701      	movs	r7, #1
 80002fe:	fbb1 fcfe 	udiv	ip, r1, lr
 8000302:	0c23      	lsrs	r3, r4, #16
 8000304:	fb0e 111c 	mls	r1, lr, ip, r1
 8000308:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800030c:	fb08 f10c 	mul.w	r1, r8, ip
 8000310:	4299      	cmp	r1, r3
 8000312:	d907      	bls.n	8000324 <__udivmoddi4+0x124>
 8000314:	18eb      	adds	r3, r5, r3
 8000316:	f10c 30ff 	add.w	r0, ip, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x122>
 800031c:	4299      	cmp	r1, r3
 800031e:	f200 80cd 	bhi.w	80004bc <__udivmoddi4+0x2bc>
 8000322:	4684      	mov	ip, r0
 8000324:	1a59      	subs	r1, r3, r1
 8000326:	b2a3      	uxth	r3, r4
 8000328:	fbb1 f0fe 	udiv	r0, r1, lr
 800032c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000330:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000334:	fb08 f800 	mul.w	r8, r8, r0
 8000338:	45a0      	cmp	r8, r4
 800033a:	d907      	bls.n	800034c <__udivmoddi4+0x14c>
 800033c:	192c      	adds	r4, r5, r4
 800033e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x14a>
 8000344:	45a0      	cmp	r8, r4
 8000346:	f200 80b6 	bhi.w	80004b6 <__udivmoddi4+0x2b6>
 800034a:	4618      	mov	r0, r3
 800034c:	eba4 0408 	sub.w	r4, r4, r8
 8000350:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000354:	e79f      	b.n	8000296 <__udivmoddi4+0x96>
 8000356:	f1c7 0c20 	rsb	ip, r7, #32
 800035a:	40bb      	lsls	r3, r7
 800035c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000360:	ea4e 0e03 	orr.w	lr, lr, r3
 8000364:	fa01 f407 	lsl.w	r4, r1, r7
 8000368:	fa20 f50c 	lsr.w	r5, r0, ip
 800036c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000370:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000374:	4325      	orrs	r5, r4
 8000376:	fbb3 f9f8 	udiv	r9, r3, r8
 800037a:	0c2c      	lsrs	r4, r5, #16
 800037c:	fb08 3319 	mls	r3, r8, r9, r3
 8000380:	fa1f fa8e 	uxth.w	sl, lr
 8000384:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000388:	fb09 f40a 	mul.w	r4, r9, sl
 800038c:	429c      	cmp	r4, r3
 800038e:	fa02 f207 	lsl.w	r2, r2, r7
 8000392:	fa00 f107 	lsl.w	r1, r0, r7
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b0>
 8000398:	eb1e 0303 	adds.w	r3, lr, r3
 800039c:	f109 30ff 	add.w	r0, r9, #4294967295
 80003a0:	f080 8087 	bcs.w	80004b2 <__udivmoddi4+0x2b2>
 80003a4:	429c      	cmp	r4, r3
 80003a6:	f240 8084 	bls.w	80004b2 <__udivmoddi4+0x2b2>
 80003aa:	f1a9 0902 	sub.w	r9, r9, #2
 80003ae:	4473      	add	r3, lr
 80003b0:	1b1b      	subs	r3, r3, r4
 80003b2:	b2ad      	uxth	r5, r5
 80003b4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b8:	fb08 3310 	mls	r3, r8, r0, r3
 80003bc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003c0:	fb00 fa0a 	mul.w	sl, r0, sl
 80003c4:	45a2      	cmp	sl, r4
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1da>
 80003c8:	eb1e 0404 	adds.w	r4, lr, r4
 80003cc:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d0:	d26b      	bcs.n	80004aa <__udivmoddi4+0x2aa>
 80003d2:	45a2      	cmp	sl, r4
 80003d4:	d969      	bls.n	80004aa <__udivmoddi4+0x2aa>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4474      	add	r4, lr
 80003da:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003de:	fba0 8902 	umull	r8, r9, r0, r2
 80003e2:	eba4 040a 	sub.w	r4, r4, sl
 80003e6:	454c      	cmp	r4, r9
 80003e8:	46c2      	mov	sl, r8
 80003ea:	464b      	mov	r3, r9
 80003ec:	d354      	bcc.n	8000498 <__udivmoddi4+0x298>
 80003ee:	d051      	beq.n	8000494 <__udivmoddi4+0x294>
 80003f0:	2e00      	cmp	r6, #0
 80003f2:	d069      	beq.n	80004c8 <__udivmoddi4+0x2c8>
 80003f4:	ebb1 050a 	subs.w	r5, r1, sl
 80003f8:	eb64 0403 	sbc.w	r4, r4, r3
 80003fc:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000400:	40fd      	lsrs	r5, r7
 8000402:	40fc      	lsrs	r4, r7
 8000404:	ea4c 0505 	orr.w	r5, ip, r5
 8000408:	e9c6 5400 	strd	r5, r4, [r6]
 800040c:	2700      	movs	r7, #0
 800040e:	e747      	b.n	80002a0 <__udivmoddi4+0xa0>
 8000410:	f1c2 0320 	rsb	r3, r2, #32
 8000414:	fa20 f703 	lsr.w	r7, r0, r3
 8000418:	4095      	lsls	r5, r2
 800041a:	fa01 f002 	lsl.w	r0, r1, r2
 800041e:	fa21 f303 	lsr.w	r3, r1, r3
 8000422:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000426:	4338      	orrs	r0, r7
 8000428:	0c01      	lsrs	r1, r0, #16
 800042a:	fbb3 f7fe 	udiv	r7, r3, lr
 800042e:	fa1f f885 	uxth.w	r8, r5
 8000432:	fb0e 3317 	mls	r3, lr, r7, r3
 8000436:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800043a:	fb07 f308 	mul.w	r3, r7, r8
 800043e:	428b      	cmp	r3, r1
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d907      	bls.n	8000456 <__udivmoddi4+0x256>
 8000446:	1869      	adds	r1, r5, r1
 8000448:	f107 3cff 	add.w	ip, r7, #4294967295
 800044c:	d22f      	bcs.n	80004ae <__udivmoddi4+0x2ae>
 800044e:	428b      	cmp	r3, r1
 8000450:	d92d      	bls.n	80004ae <__udivmoddi4+0x2ae>
 8000452:	3f02      	subs	r7, #2
 8000454:	4429      	add	r1, r5
 8000456:	1acb      	subs	r3, r1, r3
 8000458:	b281      	uxth	r1, r0
 800045a:	fbb3 f0fe 	udiv	r0, r3, lr
 800045e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000462:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000466:	fb00 f308 	mul.w	r3, r0, r8
 800046a:	428b      	cmp	r3, r1
 800046c:	d907      	bls.n	800047e <__udivmoddi4+0x27e>
 800046e:	1869      	adds	r1, r5, r1
 8000470:	f100 3cff 	add.w	ip, r0, #4294967295
 8000474:	d217      	bcs.n	80004a6 <__udivmoddi4+0x2a6>
 8000476:	428b      	cmp	r3, r1
 8000478:	d915      	bls.n	80004a6 <__udivmoddi4+0x2a6>
 800047a:	3802      	subs	r0, #2
 800047c:	4429      	add	r1, r5
 800047e:	1ac9      	subs	r1, r1, r3
 8000480:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000484:	e73b      	b.n	80002fe <__udivmoddi4+0xfe>
 8000486:	4637      	mov	r7, r6
 8000488:	4630      	mov	r0, r6
 800048a:	e709      	b.n	80002a0 <__udivmoddi4+0xa0>
 800048c:	4607      	mov	r7, r0
 800048e:	e6e7      	b.n	8000260 <__udivmoddi4+0x60>
 8000490:	4618      	mov	r0, r3
 8000492:	e6fb      	b.n	800028c <__udivmoddi4+0x8c>
 8000494:	4541      	cmp	r1, r8
 8000496:	d2ab      	bcs.n	80003f0 <__udivmoddi4+0x1f0>
 8000498:	ebb8 0a02 	subs.w	sl, r8, r2
 800049c:	eb69 020e 	sbc.w	r2, r9, lr
 80004a0:	3801      	subs	r0, #1
 80004a2:	4613      	mov	r3, r2
 80004a4:	e7a4      	b.n	80003f0 <__udivmoddi4+0x1f0>
 80004a6:	4660      	mov	r0, ip
 80004a8:	e7e9      	b.n	800047e <__udivmoddi4+0x27e>
 80004aa:	4618      	mov	r0, r3
 80004ac:	e795      	b.n	80003da <__udivmoddi4+0x1da>
 80004ae:	4667      	mov	r7, ip
 80004b0:	e7d1      	b.n	8000456 <__udivmoddi4+0x256>
 80004b2:	4681      	mov	r9, r0
 80004b4:	e77c      	b.n	80003b0 <__udivmoddi4+0x1b0>
 80004b6:	3802      	subs	r0, #2
 80004b8:	442c      	add	r4, r5
 80004ba:	e747      	b.n	800034c <__udivmoddi4+0x14c>
 80004bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c0:	442b      	add	r3, r5
 80004c2:	e72f      	b.n	8000324 <__udivmoddi4+0x124>
 80004c4:	4638      	mov	r0, r7
 80004c6:	e708      	b.n	80002da <__udivmoddi4+0xda>
 80004c8:	4637      	mov	r7, r6
 80004ca:	e6e9      	b.n	80002a0 <__udivmoddi4+0xa0>

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80004d0:	b510      	push	{r4, lr}
 80004d2:	4604      	mov	r4, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock/1000U);
 80004d4:	4b07      	ldr	r3, [pc, #28]	; (80004f4 <HAL_InitTick+0x24>)
 80004d6:	6818      	ldr	r0, [r3, #0]
 80004d8:	4b07      	ldr	r3, [pc, #28]	; (80004f8 <HAL_InitTick+0x28>)
 80004da:	fba3 3000 	umull	r3, r0, r3, r0
 80004de:	0980      	lsrs	r0, r0, #6
 80004e0:	f000 f88c 	bl	80005fc <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80004e4:	2200      	movs	r2, #0
 80004e6:	4621      	mov	r1, r4
 80004e8:	f04f 30ff 	mov.w	r0, #4294967295
 80004ec:	f000 f852 	bl	8000594 <HAL_NVIC_SetPriority>

  /* Return function status */
  return HAL_OK;
}
 80004f0:	2000      	movs	r0, #0
 80004f2:	bd10      	pop	{r4, pc}
 80004f4:	20000004 	.word	0x20000004
 80004f8:	10624dd3 	.word	0x10624dd3

080004fc <HAL_Init>:
{
 80004fc:	b508      	push	{r3, lr}
   __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80004fe:	4b0b      	ldr	r3, [pc, #44]	; (800052c <HAL_Init+0x30>)
 8000500:	681a      	ldr	r2, [r3, #0]
 8000502:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000506:	601a      	str	r2, [r3, #0]
   __HAL_FLASH_DATA_CACHE_ENABLE();
 8000508:	681a      	ldr	r2, [r3, #0]
 800050a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800050e:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000510:	681a      	ldr	r2, [r3, #0]
 8000512:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000516:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000518:	2003      	movs	r0, #3
 800051a:	f000 f829 	bl	8000570 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800051e:	200f      	movs	r0, #15
 8000520:	f7ff ffd6 	bl	80004d0 <HAL_InitTick>
  HAL_MspInit();
 8000524:	f001 fc46 	bl	8001db4 <HAL_MspInit>
}
 8000528:	2000      	movs	r0, #0
 800052a:	bd08      	pop	{r3, pc}
 800052c:	40023c00 	.word	0x40023c00

08000530 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8000530:	4a02      	ldr	r2, [pc, #8]	; (800053c <HAL_IncTick+0xc>)
 8000532:	6813      	ldr	r3, [r2, #0]
 8000534:	3301      	adds	r3, #1
 8000536:	6013      	str	r3, [r2, #0]
}
 8000538:	4770      	bx	lr
 800053a:	bf00      	nop
 800053c:	20003d70 	.word	0x20003d70

08000540 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000540:	4b01      	ldr	r3, [pc, #4]	; (8000548 <HAL_GetTick+0x8>)
 8000542:	6818      	ldr	r0, [r3, #0]
}
 8000544:	4770      	bx	lr
 8000546:	bf00      	nop
 8000548:	20003d70 	.word	0x20003d70

0800054c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 800054c:	b530      	push	{r4, r5, lr}
 800054e:	b083      	sub	sp, #12
 8000550:	9001      	str	r0, [sp, #4]
  uint32_t tickstart = HAL_GetTick();
 8000552:	f7ff fff5 	bl	8000540 <HAL_GetTick>
 8000556:	4605      	mov	r5, r0
  uint32_t wait = Delay;
 8000558:	9c01      	ldr	r4, [sp, #4]
  
  /* Add a period to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800055a:	f1b4 3fff 	cmp.w	r4, #4294967295
 800055e:	d000      	beq.n	8000562 <HAL_Delay+0x16>
  {
     wait++;
 8000560:	3401      	adds	r4, #1
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000562:	f7ff ffed 	bl	8000540 <HAL_GetTick>
 8000566:	1b40      	subs	r0, r0, r5
 8000568:	42a0      	cmp	r0, r4
 800056a:	d3fa      	bcc.n	8000562 <HAL_Delay+0x16>
  {
  }
}
 800056c:	b003      	add	sp, #12
 800056e:	bd30      	pop	{r4, r5, pc}

08000570 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000570:	4a07      	ldr	r2, [pc, #28]	; (8000590 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000572:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000574:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000578:	041b      	lsls	r3, r3, #16
 800057a:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 800057c:	0200      	lsls	r0, r0, #8
 800057e:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000582:	4318      	orrs	r0, r3
  reg_value  =  (reg_value                                   |
 8000584:	f040 60bf 	orr.w	r0, r0, #100139008	; 0x5f80000
 8000588:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 800058c:	60d0      	str	r0, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800058e:	4770      	bx	lr
 8000590:	e000ed00 	.word	0xe000ed00

08000594 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000594:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000596:	4b17      	ldr	r3, [pc, #92]	; (80005f4 <HAL_NVIC_SetPriority+0x60>)
 8000598:	68db      	ldr	r3, [r3, #12]
 800059a:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800059e:	f1c3 0407 	rsb	r4, r3, #7
 80005a2:	2c04      	cmp	r4, #4
 80005a4:	bf28      	it	cs
 80005a6:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005a8:	1d1d      	adds	r5, r3, #4
 80005aa:	2d06      	cmp	r5, #6
 80005ac:	d918      	bls.n	80005e0 <HAL_NVIC_SetPriority+0x4c>
 80005ae:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005b0:	f04f 35ff 	mov.w	r5, #4294967295
 80005b4:	fa05 f404 	lsl.w	r4, r5, r4
 80005b8:	ea21 0104 	bic.w	r1, r1, r4
 80005bc:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80005be:	fa05 f303 	lsl.w	r3, r5, r3
 80005c2:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005c6:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) < 0)
 80005c8:	2800      	cmp	r0, #0
 80005ca:	db0b      	blt.n	80005e4 <HAL_NVIC_SetPriority+0x50>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005cc:	0109      	lsls	r1, r1, #4
 80005ce:	b2c9      	uxtb	r1, r1
 80005d0:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 80005d4:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 80005d8:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80005dc:	bc30      	pop	{r4, r5}
 80005de:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005e0:	2300      	movs	r3, #0
 80005e2:	e7e5      	b.n	80005b0 <HAL_NVIC_SetPriority+0x1c>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005e4:	f000 000f 	and.w	r0, r0, #15
 80005e8:	0109      	lsls	r1, r1, #4
 80005ea:	b2c9      	uxtb	r1, r1
 80005ec:	4b02      	ldr	r3, [pc, #8]	; (80005f8 <HAL_NVIC_SetPriority+0x64>)
 80005ee:	5419      	strb	r1, [r3, r0]
 80005f0:	e7f4      	b.n	80005dc <HAL_NVIC_SetPriority+0x48>
 80005f2:	bf00      	nop
 80005f4:	e000ed00 	.word	0xe000ed00
 80005f8:	e000ed14 	.word	0xe000ed14

080005fc <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80005fc:	3801      	subs	r0, #1
 80005fe:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000602:	d20a      	bcs.n	800061a <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000604:	4b06      	ldr	r3, [pc, #24]	; (8000620 <HAL_SYSTICK_Config+0x24>)
 8000606:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000608:	4a06      	ldr	r2, [pc, #24]	; (8000624 <HAL_SYSTICK_Config+0x28>)
 800060a:	21f0      	movs	r1, #240	; 0xf0
 800060c:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000610:	2000      	movs	r0, #0
 8000612:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000614:	2207      	movs	r2, #7
 8000616:	601a      	str	r2, [r3, #0]
 8000618:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800061a:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800061c:	4770      	bx	lr
 800061e:	bf00      	nop
 8000620:	e000e010 	.word	0xe000e010
 8000624:	e000ed00 	.word	0xe000ed00

08000628 <HAL_SYSTICK_CLKSourceConfig>:
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000628:	2804      	cmp	r0, #4
 800062a:	d005      	beq.n	8000638 <HAL_SYSTICK_CLKSourceConfig+0x10>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 800062c:	4a05      	ldr	r2, [pc, #20]	; (8000644 <HAL_SYSTICK_CLKSourceConfig+0x1c>)
 800062e:	6813      	ldr	r3, [r2, #0]
 8000630:	f023 0304 	bic.w	r3, r3, #4
 8000634:	6013      	str	r3, [r2, #0]
  }
}
 8000636:	4770      	bx	lr
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000638:	4a02      	ldr	r2, [pc, #8]	; (8000644 <HAL_SYSTICK_CLKSourceConfig+0x1c>)
 800063a:	6813      	ldr	r3, [r2, #0]
 800063c:	f043 0304 	orr.w	r3, r3, #4
 8000640:	6013      	str	r3, [r2, #0]
 8000642:	4770      	bx	lr
 8000644:	e000e010 	.word	0xe000e010

08000648 <HAL_GPIO_Init>:
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000648:	2300      	movs	r3, #0
 800064a:	2b0f      	cmp	r3, #15
 800064c:	f200 80d7 	bhi.w	80007fe <HAL_GPIO_Init+0x1b6>
{
 8000650:	b4f0      	push	{r4, r5, r6, r7}
 8000652:	b082      	sub	sp, #8
 8000654:	e039      	b.n	80006ca <HAL_GPIO_Init+0x82>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000656:	2207      	movs	r2, #7
 8000658:	e000      	b.n	800065c <HAL_GPIO_Init+0x14>
 800065a:	2200      	movs	r2, #0
 800065c:	40b2      	lsls	r2, r6
 800065e:	433a      	orrs	r2, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000660:	3402      	adds	r4, #2
 8000662:	4e67      	ldr	r6, [pc, #412]	; (8000800 <HAL_GPIO_Init+0x1b8>)
 8000664:	f846 2024 	str.w	r2, [r6, r4, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000668:	4a66      	ldr	r2, [pc, #408]	; (8000804 <HAL_GPIO_Init+0x1bc>)
 800066a:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 800066c:	43ea      	mvns	r2, r5
 800066e:	ea02 0604 	and.w	r6, r2, r4
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000672:	684f      	ldr	r7, [r1, #4]
 8000674:	f417 3f80 	tst.w	r7, #65536	; 0x10000
 8000678:	d001      	beq.n	800067e <HAL_GPIO_Init+0x36>
        {
          temp |= iocurrent;
 800067a:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->IMR = temp;
 800067e:	4c61      	ldr	r4, [pc, #388]	; (8000804 <HAL_GPIO_Init+0x1bc>)
 8000680:	6026      	str	r6, [r4, #0]

        temp = EXTI->EMR;
 8000682:	6864      	ldr	r4, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
 8000684:	ea02 0604 	and.w	r6, r2, r4
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000688:	684f      	ldr	r7, [r1, #4]
 800068a:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 800068e:	d001      	beq.n	8000694 <HAL_GPIO_Init+0x4c>
        {
          temp |= iocurrent;
 8000690:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->EMR = temp;
 8000694:	4c5b      	ldr	r4, [pc, #364]	; (8000804 <HAL_GPIO_Init+0x1bc>)
 8000696:	6066      	str	r6, [r4, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000698:	68a4      	ldr	r4, [r4, #8]
        temp &= ~((uint32_t)iocurrent);
 800069a:	ea02 0604 	and.w	r6, r2, r4
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800069e:	684f      	ldr	r7, [r1, #4]
 80006a0:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 80006a4:	d001      	beq.n	80006aa <HAL_GPIO_Init+0x62>
        {
          temp |= iocurrent;
 80006a6:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->RTSR = temp;
 80006aa:	4c56      	ldr	r4, [pc, #344]	; (8000804 <HAL_GPIO_Init+0x1bc>)
 80006ac:	60a6      	str	r6, [r4, #8]

        temp = EXTI->FTSR;
 80006ae:	68e4      	ldr	r4, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
 80006b0:	4022      	ands	r2, r4
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80006b2:	684e      	ldr	r6, [r1, #4]
 80006b4:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
 80006b8:	d001      	beq.n	80006be <HAL_GPIO_Init+0x76>
        {
          temp |= iocurrent;
 80006ba:	ea45 0204 	orr.w	r2, r5, r4
        }
        EXTI->FTSR = temp;
 80006be:	4c51      	ldr	r4, [pc, #324]	; (8000804 <HAL_GPIO_Init+0x1bc>)
 80006c0:	60e2      	str	r2, [r4, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80006c2:	3301      	adds	r3, #1
 80006c4:	2b0f      	cmp	r3, #15
 80006c6:	f200 8097 	bhi.w	80007f8 <HAL_GPIO_Init+0x1b0>
    ioposition = 0x01U << position;
 80006ca:	2201      	movs	r2, #1
 80006cc:	409a      	lsls	r2, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80006ce:	680c      	ldr	r4, [r1, #0]
 80006d0:	ea04 0502 	and.w	r5, r4, r2
    if(iocurrent == ioposition)
 80006d4:	42aa      	cmp	r2, r5
 80006d6:	d1f4      	bne.n	80006c2 <HAL_GPIO_Init+0x7a>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80006d8:	684c      	ldr	r4, [r1, #4]
 80006da:	2c02      	cmp	r4, #2
 80006dc:	d001      	beq.n	80006e2 <HAL_GPIO_Init+0x9a>
 80006de:	2c12      	cmp	r4, #18
 80006e0:	d110      	bne.n	8000704 <HAL_GPIO_Init+0xbc>
        temp = GPIOx->AFR[position >> 3U];
 80006e2:	08de      	lsrs	r6, r3, #3
 80006e4:	3608      	adds	r6, #8
 80006e6:	f850 c026 	ldr.w	ip, [r0, r6, lsl #2]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80006ea:	f003 0407 	and.w	r4, r3, #7
 80006ee:	00a7      	lsls	r7, r4, #2
 80006f0:	240f      	movs	r4, #15
 80006f2:	40bc      	lsls	r4, r7
 80006f4:	ea2c 0c04 	bic.w	ip, ip, r4
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80006f8:	690c      	ldr	r4, [r1, #16]
 80006fa:	40bc      	lsls	r4, r7
 80006fc:	ea44 040c 	orr.w	r4, r4, ip
        GPIOx->AFR[position >> 3U] = temp;
 8000700:	f840 4026 	str.w	r4, [r0, r6, lsl #2]
      temp = GPIOx->MODER;
 8000704:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000706:	005f      	lsls	r7, r3, #1
 8000708:	2603      	movs	r6, #3
 800070a:	40be      	lsls	r6, r7
 800070c:	43f6      	mvns	r6, r6
 800070e:	ea06 0c04 	and.w	ip, r6, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000712:	684c      	ldr	r4, [r1, #4]
 8000714:	f004 0403 	and.w	r4, r4, #3
 8000718:	40bc      	lsls	r4, r7
 800071a:	ea44 040c 	orr.w	r4, r4, ip
      GPIOx->MODER = temp;
 800071e:	6004      	str	r4, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000720:	684c      	ldr	r4, [r1, #4]
 8000722:	f104 3cff 	add.w	ip, r4, #4294967295
 8000726:	f1bc 0f01 	cmp.w	ip, #1
 800072a:	d903      	bls.n	8000734 <HAL_GPIO_Init+0xec>
 800072c:	2c11      	cmp	r4, #17
 800072e:	d001      	beq.n	8000734 <HAL_GPIO_Init+0xec>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000730:	2c12      	cmp	r4, #18
 8000732:	d110      	bne.n	8000756 <HAL_GPIO_Init+0x10e>
        temp = GPIOx->OSPEEDR; 
 8000734:	6884      	ldr	r4, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000736:	ea06 0c04 	and.w	ip, r6, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 800073a:	68cc      	ldr	r4, [r1, #12]
 800073c:	40bc      	lsls	r4, r7
 800073e:	ea44 040c 	orr.w	r4, r4, ip
        GPIOx->OSPEEDR = temp;
 8000742:	6084      	str	r4, [r0, #8]
        temp = GPIOx->OTYPER;
 8000744:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000746:	ea24 0202 	bic.w	r2, r4, r2
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800074a:	684c      	ldr	r4, [r1, #4]
 800074c:	f3c4 1400 	ubfx	r4, r4, #4, #1
 8000750:	409c      	lsls	r4, r3
 8000752:	4314      	orrs	r4, r2
        GPIOx->OTYPER = temp;
 8000754:	6044      	str	r4, [r0, #4]
      temp = GPIOx->PUPDR;
 8000756:	68c2      	ldr	r2, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000758:	4016      	ands	r6, r2
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800075a:	688a      	ldr	r2, [r1, #8]
 800075c:	40ba      	lsls	r2, r7
 800075e:	4332      	orrs	r2, r6
      GPIOx->PUPDR = temp;
 8000760:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000762:	684a      	ldr	r2, [r1, #4]
 8000764:	f012 5f80 	tst.w	r2, #268435456	; 0x10000000
 8000768:	d0ab      	beq.n	80006c2 <HAL_GPIO_Init+0x7a>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800076a:	2200      	movs	r2, #0
 800076c:	9201      	str	r2, [sp, #4]
 800076e:	4a26      	ldr	r2, [pc, #152]	; (8000808 <HAL_GPIO_Init+0x1c0>)
 8000770:	6c54      	ldr	r4, [r2, #68]	; 0x44
 8000772:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 8000776:	6454      	str	r4, [r2, #68]	; 0x44
 8000778:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800077a:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 800077e:	9201      	str	r2, [sp, #4]
 8000780:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8000782:	089c      	lsrs	r4, r3, #2
 8000784:	1ca6      	adds	r6, r4, #2
 8000786:	4a1e      	ldr	r2, [pc, #120]	; (8000800 <HAL_GPIO_Init+0x1b8>)
 8000788:	f852 7026 	ldr.w	r7, [r2, r6, lsl #2]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800078c:	f003 0203 	and.w	r2, r3, #3
 8000790:	0096      	lsls	r6, r2, #2
 8000792:	220f      	movs	r2, #15
 8000794:	40b2      	lsls	r2, r6
 8000796:	ea27 0702 	bic.w	r7, r7, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800079a:	4a1c      	ldr	r2, [pc, #112]	; (800080c <HAL_GPIO_Init+0x1c4>)
 800079c:	4290      	cmp	r0, r2
 800079e:	f43f af5c 	beq.w	800065a <HAL_GPIO_Init+0x12>
 80007a2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80007a6:	4290      	cmp	r0, r2
 80007a8:	d01a      	beq.n	80007e0 <HAL_GPIO_Init+0x198>
 80007aa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80007ae:	4290      	cmp	r0, r2
 80007b0:	d018      	beq.n	80007e4 <HAL_GPIO_Init+0x19c>
 80007b2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80007b6:	4290      	cmp	r0, r2
 80007b8:	d016      	beq.n	80007e8 <HAL_GPIO_Init+0x1a0>
 80007ba:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80007be:	4290      	cmp	r0, r2
 80007c0:	d014      	beq.n	80007ec <HAL_GPIO_Init+0x1a4>
 80007c2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80007c6:	4290      	cmp	r0, r2
 80007c8:	d012      	beq.n	80007f0 <HAL_GPIO_Init+0x1a8>
 80007ca:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80007ce:	4290      	cmp	r0, r2
 80007d0:	d010      	beq.n	80007f4 <HAL_GPIO_Init+0x1ac>
 80007d2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80007d6:	4290      	cmp	r0, r2
 80007d8:	f43f af3d 	beq.w	8000656 <HAL_GPIO_Init+0xe>
 80007dc:	2208      	movs	r2, #8
 80007de:	e73d      	b.n	800065c <HAL_GPIO_Init+0x14>
 80007e0:	2201      	movs	r2, #1
 80007e2:	e73b      	b.n	800065c <HAL_GPIO_Init+0x14>
 80007e4:	2202      	movs	r2, #2
 80007e6:	e739      	b.n	800065c <HAL_GPIO_Init+0x14>
 80007e8:	2203      	movs	r2, #3
 80007ea:	e737      	b.n	800065c <HAL_GPIO_Init+0x14>
 80007ec:	2204      	movs	r2, #4
 80007ee:	e735      	b.n	800065c <HAL_GPIO_Init+0x14>
 80007f0:	2205      	movs	r2, #5
 80007f2:	e733      	b.n	800065c <HAL_GPIO_Init+0x14>
 80007f4:	2206      	movs	r2, #6
 80007f6:	e731      	b.n	800065c <HAL_GPIO_Init+0x14>
      }
    }
  }
}
 80007f8:	b002      	add	sp, #8
 80007fa:	bcf0      	pop	{r4, r5, r6, r7}
 80007fc:	4770      	bx	lr
 80007fe:	4770      	bx	lr
 8000800:	40013800 	.word	0x40013800
 8000804:	40013c00 	.word	0x40013c00
 8000808:	40023800 	.word	0x40023800
 800080c:	40020000 	.word	0x40020000

08000810 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000810:	b912      	cbnz	r2, 8000818 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000812:	0409      	lsls	r1, r1, #16
 8000814:	6181      	str	r1, [r0, #24]
  }
}
 8000816:	4770      	bx	lr
    GPIOx->BSRR = GPIO_Pin;
 8000818:	6181      	str	r1, [r0, #24]
 800081a:	4770      	bx	lr

0800081c <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 800081c:	6943      	ldr	r3, [r0, #20]
 800081e:	4059      	eors	r1, r3
 8000820:	6141      	str	r1, [r0, #20]
}
 8000822:	4770      	bx	lr

08000824 <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000824:	2800      	cmp	r0, #0
 8000826:	f000 81ab 	beq.w	8000b80 <HAL_RCC_OscConfig+0x35c>
{
 800082a:	b530      	push	{r4, r5, lr}
 800082c:	b083      	sub	sp, #12
 800082e:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000830:	6803      	ldr	r3, [r0, #0]
 8000832:	f013 0f01 	tst.w	r3, #1
 8000836:	d03b      	beq.n	80008b0 <HAL_RCC_OscConfig+0x8c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000838:	4ba7      	ldr	r3, [pc, #668]	; (8000ad8 <HAL_RCC_OscConfig+0x2b4>)
 800083a:	689b      	ldr	r3, [r3, #8]
 800083c:	f003 030c 	and.w	r3, r3, #12
 8000840:	2b04      	cmp	r3, #4
 8000842:	d02c      	beq.n	800089e <HAL_RCC_OscConfig+0x7a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000844:	4ba4      	ldr	r3, [pc, #656]	; (8000ad8 <HAL_RCC_OscConfig+0x2b4>)
 8000846:	689b      	ldr	r3, [r3, #8]
 8000848:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800084c:	2b08      	cmp	r3, #8
 800084e:	d021      	beq.n	8000894 <HAL_RCC_OscConfig+0x70>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000850:	6863      	ldr	r3, [r4, #4]
 8000852:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000856:	d04f      	beq.n	80008f8 <HAL_RCC_OscConfig+0xd4>
 8000858:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800085c:	d052      	beq.n	8000904 <HAL_RCC_OscConfig+0xe0>
 800085e:	4b9e      	ldr	r3, [pc, #632]	; (8000ad8 <HAL_RCC_OscConfig+0x2b4>)
 8000860:	681a      	ldr	r2, [r3, #0]
 8000862:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000866:	601a      	str	r2, [r3, #0]
 8000868:	681a      	ldr	r2, [r3, #0]
 800086a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800086e:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000870:	6863      	ldr	r3, [r4, #4]
 8000872:	2b00      	cmp	r3, #0
 8000874:	d050      	beq.n	8000918 <HAL_RCC_OscConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000876:	f7ff fe63 	bl	8000540 <HAL_GetTick>
 800087a:	4605      	mov	r5, r0

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800087c:	4b96      	ldr	r3, [pc, #600]	; (8000ad8 <HAL_RCC_OscConfig+0x2b4>)
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8000884:	d114      	bne.n	80008b0 <HAL_RCC_OscConfig+0x8c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000886:	f7ff fe5b 	bl	8000540 <HAL_GetTick>
 800088a:	1b40      	subs	r0, r0, r5
 800088c:	2864      	cmp	r0, #100	; 0x64
 800088e:	d9f5      	bls.n	800087c <HAL_RCC_OscConfig+0x58>
          {
            return HAL_TIMEOUT;
 8000890:	2003      	movs	r0, #3
 8000892:	e17a      	b.n	8000b8a <HAL_RCC_OscConfig+0x366>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000894:	4b90      	ldr	r3, [pc, #576]	; (8000ad8 <HAL_RCC_OscConfig+0x2b4>)
 8000896:	685b      	ldr	r3, [r3, #4]
 8000898:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 800089c:	d0d8      	beq.n	8000850 <HAL_RCC_OscConfig+0x2c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800089e:	4b8e      	ldr	r3, [pc, #568]	; (8000ad8 <HAL_RCC_OscConfig+0x2b4>)
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80008a6:	d003      	beq.n	80008b0 <HAL_RCC_OscConfig+0x8c>
 80008a8:	6863      	ldr	r3, [r4, #4]
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	f000 816a 	beq.w	8000b84 <HAL_RCC_OscConfig+0x360>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80008b0:	6823      	ldr	r3, [r4, #0]
 80008b2:	f013 0f02 	tst.w	r3, #2
 80008b6:	d055      	beq.n	8000964 <HAL_RCC_OscConfig+0x140>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80008b8:	4b87      	ldr	r3, [pc, #540]	; (8000ad8 <HAL_RCC_OscConfig+0x2b4>)
 80008ba:	689b      	ldr	r3, [r3, #8]
 80008bc:	f013 0f0c 	tst.w	r3, #12
 80008c0:	d03e      	beq.n	8000940 <HAL_RCC_OscConfig+0x11c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80008c2:	4b85      	ldr	r3, [pc, #532]	; (8000ad8 <HAL_RCC_OscConfig+0x2b4>)
 80008c4:	689b      	ldr	r3, [r3, #8]
 80008c6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80008ca:	2b08      	cmp	r3, #8
 80008cc:	d033      	beq.n	8000936 <HAL_RCC_OscConfig+0x112>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80008ce:	68e3      	ldr	r3, [r4, #12]
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d068      	beq.n	80009a6 <HAL_RCC_OscConfig+0x182>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80008d4:	4b81      	ldr	r3, [pc, #516]	; (8000adc <HAL_RCC_OscConfig+0x2b8>)
 80008d6:	2201      	movs	r2, #1
 80008d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80008da:	f7ff fe31 	bl	8000540 <HAL_GetTick>
 80008de:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80008e0:	4b7d      	ldr	r3, [pc, #500]	; (8000ad8 <HAL_RCC_OscConfig+0x2b4>)
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	f013 0f02 	tst.w	r3, #2
 80008e8:	d154      	bne.n	8000994 <HAL_RCC_OscConfig+0x170>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80008ea:	f7ff fe29 	bl	8000540 <HAL_GetTick>
 80008ee:	1b40      	subs	r0, r0, r5
 80008f0:	2802      	cmp	r0, #2
 80008f2:	d9f5      	bls.n	80008e0 <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 80008f4:	2003      	movs	r0, #3
 80008f6:	e148      	b.n	8000b8a <HAL_RCC_OscConfig+0x366>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80008f8:	4a77      	ldr	r2, [pc, #476]	; (8000ad8 <HAL_RCC_OscConfig+0x2b4>)
 80008fa:	6813      	ldr	r3, [r2, #0]
 80008fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000900:	6013      	str	r3, [r2, #0]
 8000902:	e7b5      	b.n	8000870 <HAL_RCC_OscConfig+0x4c>
 8000904:	4b74      	ldr	r3, [pc, #464]	; (8000ad8 <HAL_RCC_OscConfig+0x2b4>)
 8000906:	681a      	ldr	r2, [r3, #0]
 8000908:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800090c:	601a      	str	r2, [r3, #0]
 800090e:	681a      	ldr	r2, [r3, #0]
 8000910:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8000914:	601a      	str	r2, [r3, #0]
 8000916:	e7ab      	b.n	8000870 <HAL_RCC_OscConfig+0x4c>
        tickstart = HAL_GetTick();
 8000918:	f7ff fe12 	bl	8000540 <HAL_GetTick>
 800091c:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800091e:	4b6e      	ldr	r3, [pc, #440]	; (8000ad8 <HAL_RCC_OscConfig+0x2b4>)
 8000920:	681b      	ldr	r3, [r3, #0]
 8000922:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8000926:	d0c3      	beq.n	80008b0 <HAL_RCC_OscConfig+0x8c>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000928:	f7ff fe0a 	bl	8000540 <HAL_GetTick>
 800092c:	1b40      	subs	r0, r0, r5
 800092e:	2864      	cmp	r0, #100	; 0x64
 8000930:	d9f5      	bls.n	800091e <HAL_RCC_OscConfig+0xfa>
            return HAL_TIMEOUT;
 8000932:	2003      	movs	r0, #3
 8000934:	e129      	b.n	8000b8a <HAL_RCC_OscConfig+0x366>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000936:	4b68      	ldr	r3, [pc, #416]	; (8000ad8 <HAL_RCC_OscConfig+0x2b4>)
 8000938:	685b      	ldr	r3, [r3, #4]
 800093a:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 800093e:	d1c6      	bne.n	80008ce <HAL_RCC_OscConfig+0xaa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000940:	4b65      	ldr	r3, [pc, #404]	; (8000ad8 <HAL_RCC_OscConfig+0x2b4>)
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	f013 0f02 	tst.w	r3, #2
 8000948:	d004      	beq.n	8000954 <HAL_RCC_OscConfig+0x130>
 800094a:	68e3      	ldr	r3, [r4, #12]
 800094c:	2b01      	cmp	r3, #1
 800094e:	d001      	beq.n	8000954 <HAL_RCC_OscConfig+0x130>
        return HAL_ERROR;
 8000950:	2001      	movs	r0, #1
 8000952:	e11a      	b.n	8000b8a <HAL_RCC_OscConfig+0x366>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000954:	4a60      	ldr	r2, [pc, #384]	; (8000ad8 <HAL_RCC_OscConfig+0x2b4>)
 8000956:	6813      	ldr	r3, [r2, #0]
 8000958:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800095c:	6921      	ldr	r1, [r4, #16]
 800095e:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000962:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000964:	6823      	ldr	r3, [r4, #0]
 8000966:	f013 0f08 	tst.w	r3, #8
 800096a:	d040      	beq.n	80009ee <HAL_RCC_OscConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800096c:	6963      	ldr	r3, [r4, #20]
 800096e:	b363      	cbz	r3, 80009ca <HAL_RCC_OscConfig+0x1a6>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000970:	4b5b      	ldr	r3, [pc, #364]	; (8000ae0 <HAL_RCC_OscConfig+0x2bc>)
 8000972:	2201      	movs	r2, #1
 8000974:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000976:	f7ff fde3 	bl	8000540 <HAL_GetTick>
 800097a:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800097c:	4b56      	ldr	r3, [pc, #344]	; (8000ad8 <HAL_RCC_OscConfig+0x2b4>)
 800097e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000980:	f013 0f02 	tst.w	r3, #2
 8000984:	d133      	bne.n	80009ee <HAL_RCC_OscConfig+0x1ca>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000986:	f7ff fddb 	bl	8000540 <HAL_GetTick>
 800098a:	1b40      	subs	r0, r0, r5
 800098c:	2802      	cmp	r0, #2
 800098e:	d9f5      	bls.n	800097c <HAL_RCC_OscConfig+0x158>
        {
          return HAL_TIMEOUT;
 8000990:	2003      	movs	r0, #3
 8000992:	e0fa      	b.n	8000b8a <HAL_RCC_OscConfig+0x366>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000994:	4a50      	ldr	r2, [pc, #320]	; (8000ad8 <HAL_RCC_OscConfig+0x2b4>)
 8000996:	6813      	ldr	r3, [r2, #0]
 8000998:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800099c:	6921      	ldr	r1, [r4, #16]
 800099e:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80009a2:	6013      	str	r3, [r2, #0]
 80009a4:	e7de      	b.n	8000964 <HAL_RCC_OscConfig+0x140>
        __HAL_RCC_HSI_DISABLE();
 80009a6:	4b4d      	ldr	r3, [pc, #308]	; (8000adc <HAL_RCC_OscConfig+0x2b8>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80009ac:	f7ff fdc8 	bl	8000540 <HAL_GetTick>
 80009b0:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80009b2:	4b49      	ldr	r3, [pc, #292]	; (8000ad8 <HAL_RCC_OscConfig+0x2b4>)
 80009b4:	681b      	ldr	r3, [r3, #0]
 80009b6:	f013 0f02 	tst.w	r3, #2
 80009ba:	d0d3      	beq.n	8000964 <HAL_RCC_OscConfig+0x140>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80009bc:	f7ff fdc0 	bl	8000540 <HAL_GetTick>
 80009c0:	1b40      	subs	r0, r0, r5
 80009c2:	2802      	cmp	r0, #2
 80009c4:	d9f5      	bls.n	80009b2 <HAL_RCC_OscConfig+0x18e>
            return HAL_TIMEOUT;
 80009c6:	2003      	movs	r0, #3
 80009c8:	e0df      	b.n	8000b8a <HAL_RCC_OscConfig+0x366>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80009ca:	4b45      	ldr	r3, [pc, #276]	; (8000ae0 <HAL_RCC_OscConfig+0x2bc>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80009d0:	f7ff fdb6 	bl	8000540 <HAL_GetTick>
 80009d4:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80009d6:	4b40      	ldr	r3, [pc, #256]	; (8000ad8 <HAL_RCC_OscConfig+0x2b4>)
 80009d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80009da:	f013 0f02 	tst.w	r3, #2
 80009de:	d006      	beq.n	80009ee <HAL_RCC_OscConfig+0x1ca>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80009e0:	f7ff fdae 	bl	8000540 <HAL_GetTick>
 80009e4:	1b40      	subs	r0, r0, r5
 80009e6:	2802      	cmp	r0, #2
 80009e8:	d9f5      	bls.n	80009d6 <HAL_RCC_OscConfig+0x1b2>
        {
          return HAL_TIMEOUT;
 80009ea:	2003      	movs	r0, #3
 80009ec:	e0cd      	b.n	8000b8a <HAL_RCC_OscConfig+0x366>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80009ee:	6823      	ldr	r3, [r4, #0]
 80009f0:	f013 0f04 	tst.w	r3, #4
 80009f4:	d11f      	bne.n	8000a36 <HAL_RCC_OscConfig+0x212>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80009f6:	69a3      	ldr	r3, [r4, #24]
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	f000 80c5 	beq.w	8000b88 <HAL_RCC_OscConfig+0x364>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80009fe:	4a36      	ldr	r2, [pc, #216]	; (8000ad8 <HAL_RCC_OscConfig+0x2b4>)
 8000a00:	6892      	ldr	r2, [r2, #8]
 8000a02:	f002 020c 	and.w	r2, r2, #12
 8000a06:	2a08      	cmp	r2, #8
 8000a08:	f000 80c1 	beq.w	8000b8e <HAL_RCC_OscConfig+0x36a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000a0c:	2b02      	cmp	r3, #2
 8000a0e:	d07f      	beq.n	8000b10 <HAL_RCC_OscConfig+0x2ec>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000a10:	4b34      	ldr	r3, [pc, #208]	; (8000ae4 <HAL_RCC_OscConfig+0x2c0>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000a16:	f7ff fd93 	bl	8000540 <HAL_GetTick>
 8000a1a:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000a1c:	4b2e      	ldr	r3, [pc, #184]	; (8000ad8 <HAL_RCC_OscConfig+0x2b4>)
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8000a24:	f000 80aa 	beq.w	8000b7c <HAL_RCC_OscConfig+0x358>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000a28:	f7ff fd8a 	bl	8000540 <HAL_GetTick>
 8000a2c:	1b00      	subs	r0, r0, r4
 8000a2e:	2802      	cmp	r0, #2
 8000a30:	d9f4      	bls.n	8000a1c <HAL_RCC_OscConfig+0x1f8>
          {
            return HAL_TIMEOUT;
 8000a32:	2003      	movs	r0, #3
 8000a34:	e0a9      	b.n	8000b8a <HAL_RCC_OscConfig+0x366>
    __HAL_RCC_PWR_CLK_ENABLE();
 8000a36:	2300      	movs	r3, #0
 8000a38:	9301      	str	r3, [sp, #4]
 8000a3a:	4b27      	ldr	r3, [pc, #156]	; (8000ad8 <HAL_RCC_OscConfig+0x2b4>)
 8000a3c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000a3e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000a42:	641a      	str	r2, [r3, #64]	; 0x40
 8000a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a4a:	9301      	str	r3, [sp, #4]
 8000a4c:	9b01      	ldr	r3, [sp, #4]
    PWR->CR |= PWR_CR_DBP;
 8000a4e:	4a26      	ldr	r2, [pc, #152]	; (8000ae8 <HAL_RCC_OscConfig+0x2c4>)
 8000a50:	6813      	ldr	r3, [r2, #0]
 8000a52:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a56:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8000a58:	f7ff fd72 	bl	8000540 <HAL_GetTick>
 8000a5c:	4605      	mov	r5, r0
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8000a5e:	4b22      	ldr	r3, [pc, #136]	; (8000ae8 <HAL_RCC_OscConfig+0x2c4>)
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	f413 7f80 	tst.w	r3, #256	; 0x100
 8000a66:	d106      	bne.n	8000a76 <HAL_RCC_OscConfig+0x252>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8000a68:	f7ff fd6a 	bl	8000540 <HAL_GetTick>
 8000a6c:	1b40      	subs	r0, r0, r5
 8000a6e:	2802      	cmp	r0, #2
 8000a70:	d9f5      	bls.n	8000a5e <HAL_RCC_OscConfig+0x23a>
        return HAL_TIMEOUT;
 8000a72:	2003      	movs	r0, #3
 8000a74:	e089      	b.n	8000b8a <HAL_RCC_OscConfig+0x366>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000a76:	68a3      	ldr	r3, [r4, #8]
 8000a78:	2b01      	cmp	r3, #1
 8000a7a:	d01d      	beq.n	8000ab8 <HAL_RCC_OscConfig+0x294>
 8000a7c:	2b05      	cmp	r3, #5
 8000a7e:	d021      	beq.n	8000ac4 <HAL_RCC_OscConfig+0x2a0>
 8000a80:	4b15      	ldr	r3, [pc, #84]	; (8000ad8 <HAL_RCC_OscConfig+0x2b4>)
 8000a82:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8000a84:	f022 0201 	bic.w	r2, r2, #1
 8000a88:	671a      	str	r2, [r3, #112]	; 0x70
 8000a8a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8000a8c:	f022 0204 	bic.w	r2, r2, #4
 8000a90:	671a      	str	r2, [r3, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000a92:	68a3      	ldr	r3, [r4, #8]
 8000a94:	b353      	cbz	r3, 8000aec <HAL_RCC_OscConfig+0x2c8>
      tickstart = HAL_GetTick();
 8000a96:	f7ff fd53 	bl	8000540 <HAL_GetTick>
 8000a9a:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000a9c:	4b0e      	ldr	r3, [pc, #56]	; (8000ad8 <HAL_RCC_OscConfig+0x2b4>)
 8000a9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000aa0:	f013 0f02 	tst.w	r3, #2
 8000aa4:	d1a7      	bne.n	80009f6 <HAL_RCC_OscConfig+0x1d2>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000aa6:	f7ff fd4b 	bl	8000540 <HAL_GetTick>
 8000aaa:	1b40      	subs	r0, r0, r5
 8000aac:	f241 3388 	movw	r3, #5000	; 0x1388
 8000ab0:	4298      	cmp	r0, r3
 8000ab2:	d9f3      	bls.n	8000a9c <HAL_RCC_OscConfig+0x278>
          return HAL_TIMEOUT;
 8000ab4:	2003      	movs	r0, #3
 8000ab6:	e068      	b.n	8000b8a <HAL_RCC_OscConfig+0x366>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000ab8:	4a07      	ldr	r2, [pc, #28]	; (8000ad8 <HAL_RCC_OscConfig+0x2b4>)
 8000aba:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8000abc:	f043 0301 	orr.w	r3, r3, #1
 8000ac0:	6713      	str	r3, [r2, #112]	; 0x70
 8000ac2:	e7e6      	b.n	8000a92 <HAL_RCC_OscConfig+0x26e>
 8000ac4:	4b04      	ldr	r3, [pc, #16]	; (8000ad8 <HAL_RCC_OscConfig+0x2b4>)
 8000ac6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8000ac8:	f042 0204 	orr.w	r2, r2, #4
 8000acc:	671a      	str	r2, [r3, #112]	; 0x70
 8000ace:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8000ad0:	f042 0201 	orr.w	r2, r2, #1
 8000ad4:	671a      	str	r2, [r3, #112]	; 0x70
 8000ad6:	e7dc      	b.n	8000a92 <HAL_RCC_OscConfig+0x26e>
 8000ad8:	40023800 	.word	0x40023800
 8000adc:	42470000 	.word	0x42470000
 8000ae0:	42470e80 	.word	0x42470e80
 8000ae4:	42470060 	.word	0x42470060
 8000ae8:	40007000 	.word	0x40007000
      tickstart = HAL_GetTick();
 8000aec:	f7ff fd28 	bl	8000540 <HAL_GetTick>
 8000af0:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000af2:	4b28      	ldr	r3, [pc, #160]	; (8000b94 <HAL_RCC_OscConfig+0x370>)
 8000af4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000af6:	f013 0f02 	tst.w	r3, #2
 8000afa:	f43f af7c 	beq.w	80009f6 <HAL_RCC_OscConfig+0x1d2>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000afe:	f7ff fd1f 	bl	8000540 <HAL_GetTick>
 8000b02:	1b40      	subs	r0, r0, r5
 8000b04:	f241 3388 	movw	r3, #5000	; 0x1388
 8000b08:	4298      	cmp	r0, r3
 8000b0a:	d9f2      	bls.n	8000af2 <HAL_RCC_OscConfig+0x2ce>
          return HAL_TIMEOUT;
 8000b0c:	2003      	movs	r0, #3
 8000b0e:	e03c      	b.n	8000b8a <HAL_RCC_OscConfig+0x366>
        __HAL_RCC_PLL_DISABLE();
 8000b10:	4b21      	ldr	r3, [pc, #132]	; (8000b98 <HAL_RCC_OscConfig+0x374>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000b16:	f7ff fd13 	bl	8000540 <HAL_GetTick>
 8000b1a:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000b1c:	4b1d      	ldr	r3, [pc, #116]	; (8000b94 <HAL_RCC_OscConfig+0x370>)
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8000b24:	d006      	beq.n	8000b34 <HAL_RCC_OscConfig+0x310>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000b26:	f7ff fd0b 	bl	8000540 <HAL_GetTick>
 8000b2a:	1b40      	subs	r0, r0, r5
 8000b2c:	2802      	cmp	r0, #2
 8000b2e:	d9f5      	bls.n	8000b1c <HAL_RCC_OscConfig+0x2f8>
            return HAL_TIMEOUT;
 8000b30:	2003      	movs	r0, #3
 8000b32:	e02a      	b.n	8000b8a <HAL_RCC_OscConfig+0x366>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000b34:	69e3      	ldr	r3, [r4, #28]
 8000b36:	6a22      	ldr	r2, [r4, #32]
 8000b38:	4313      	orrs	r3, r2
 8000b3a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000b3c:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8000b40:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8000b42:	0852      	lsrs	r2, r2, #1
 8000b44:	3a01      	subs	r2, #1
 8000b46:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000b4a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8000b4c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8000b50:	4a10      	ldr	r2, [pc, #64]	; (8000b94 <HAL_RCC_OscConfig+0x370>)
 8000b52:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 8000b54:	4b10      	ldr	r3, [pc, #64]	; (8000b98 <HAL_RCC_OscConfig+0x374>)
 8000b56:	2201      	movs	r2, #1
 8000b58:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000b5a:	f7ff fcf1 	bl	8000540 <HAL_GetTick>
 8000b5e:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000b60:	4b0c      	ldr	r3, [pc, #48]	; (8000b94 <HAL_RCC_OscConfig+0x370>)
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8000b68:	d106      	bne.n	8000b78 <HAL_RCC_OscConfig+0x354>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000b6a:	f7ff fce9 	bl	8000540 <HAL_GetTick>
 8000b6e:	1b00      	subs	r0, r0, r4
 8000b70:	2802      	cmp	r0, #2
 8000b72:	d9f5      	bls.n	8000b60 <HAL_RCC_OscConfig+0x33c>
            return HAL_TIMEOUT;
 8000b74:	2003      	movs	r0, #3
 8000b76:	e008      	b.n	8000b8a <HAL_RCC_OscConfig+0x366>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 8000b78:	2000      	movs	r0, #0
 8000b7a:	e006      	b.n	8000b8a <HAL_RCC_OscConfig+0x366>
 8000b7c:	2000      	movs	r0, #0
 8000b7e:	e004      	b.n	8000b8a <HAL_RCC_OscConfig+0x366>
    return HAL_ERROR;
 8000b80:	2001      	movs	r0, #1
}
 8000b82:	4770      	bx	lr
        return HAL_ERROR;
 8000b84:	2001      	movs	r0, #1
 8000b86:	e000      	b.n	8000b8a <HAL_RCC_OscConfig+0x366>
  return HAL_OK;
 8000b88:	2000      	movs	r0, #0
}
 8000b8a:	b003      	add	sp, #12
 8000b8c:	bd30      	pop	{r4, r5, pc}
      return HAL_ERROR;
 8000b8e:	2001      	movs	r0, #1
 8000b90:	e7fb      	b.n	8000b8a <HAL_RCC_OscConfig+0x366>
 8000b92:	bf00      	nop
 8000b94:	40023800 	.word	0x40023800
 8000b98:	42470060 	.word	0x42470060

08000b9c <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000b9c:	4b32      	ldr	r3, [pc, #200]	; (8000c68 <HAL_RCC_GetSysClockFreq+0xcc>)
 8000b9e:	689b      	ldr	r3, [r3, #8]
 8000ba0:	f003 030c 	and.w	r3, r3, #12
 8000ba4:	2b04      	cmp	r3, #4
 8000ba6:	d05c      	beq.n	8000c62 <HAL_RCC_GetSysClockFreq+0xc6>
 8000ba8:	2b08      	cmp	r3, #8
 8000baa:	d001      	beq.n	8000bb0 <HAL_RCC_GetSysClockFreq+0x14>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8000bac:	482f      	ldr	r0, [pc, #188]	; (8000c6c <HAL_RCC_GetSysClockFreq+0xd0>)
 8000bae:	4770      	bx	lr
{
 8000bb0:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000bb4:	4b2c      	ldr	r3, [pc, #176]	; (8000c68 <HAL_RCC_GetSysClockFreq+0xcc>)
 8000bb6:	685a      	ldr	r2, [r3, #4]
 8000bb8:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000bbc:	685b      	ldr	r3, [r3, #4]
 8000bbe:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8000bc2:	d02b      	beq.n	8000c1c <HAL_RCC_GetSysClockFreq+0x80>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000bc4:	4b28      	ldr	r3, [pc, #160]	; (8000c68 <HAL_RCC_GetSysClockFreq+0xcc>)
 8000bc6:	685b      	ldr	r3, [r3, #4]
 8000bc8:	f3c3 1388 	ubfx	r3, r3, #6, #9
 8000bcc:	461e      	mov	r6, r3
 8000bce:	2700      	movs	r7, #0
 8000bd0:	015c      	lsls	r4, r3, #5
 8000bd2:	2500      	movs	r5, #0
 8000bd4:	1ae4      	subs	r4, r4, r3
 8000bd6:	eb65 0507 	sbc.w	r5, r5, r7
 8000bda:	01a9      	lsls	r1, r5, #6
 8000bdc:	ea41 6194 	orr.w	r1, r1, r4, lsr #26
 8000be0:	01a0      	lsls	r0, r4, #6
 8000be2:	1b00      	subs	r0, r0, r4
 8000be4:	eb61 0105 	sbc.w	r1, r1, r5
 8000be8:	00cb      	lsls	r3, r1, #3
 8000bea:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8000bee:	00c4      	lsls	r4, r0, #3
 8000bf0:	19a0      	adds	r0, r4, r6
 8000bf2:	eb43 0107 	adc.w	r1, r3, r7
 8000bf6:	024b      	lsls	r3, r1, #9
 8000bf8:	ea43 53d0 	orr.w	r3, r3, r0, lsr #23
 8000bfc:	0244      	lsls	r4, r0, #9
 8000bfe:	4620      	mov	r0, r4
 8000c00:	4619      	mov	r1, r3
 8000c02:	2300      	movs	r3, #0
 8000c04:	f7ff fae4 	bl	80001d0 <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8000c08:	4b17      	ldr	r3, [pc, #92]	; (8000c68 <HAL_RCC_GetSysClockFreq+0xcc>)
 8000c0a:	685b      	ldr	r3, [r3, #4]
 8000c0c:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8000c10:	3301      	adds	r3, #1
 8000c12:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 8000c14:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8000c18:	e8bd 8bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, pc}
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000c1c:	4b12      	ldr	r3, [pc, #72]	; (8000c68 <HAL_RCC_GetSysClockFreq+0xcc>)
 8000c1e:	685b      	ldr	r3, [r3, #4]
 8000c20:	f3c3 1388 	ubfx	r3, r3, #6, #9
 8000c24:	461e      	mov	r6, r3
 8000c26:	2700      	movs	r7, #0
 8000c28:	015c      	lsls	r4, r3, #5
 8000c2a:	2500      	movs	r5, #0
 8000c2c:	1ae4      	subs	r4, r4, r3
 8000c2e:	eb65 0507 	sbc.w	r5, r5, r7
 8000c32:	01a9      	lsls	r1, r5, #6
 8000c34:	ea41 6194 	orr.w	r1, r1, r4, lsr #26
 8000c38:	01a0      	lsls	r0, r4, #6
 8000c3a:	1b00      	subs	r0, r0, r4
 8000c3c:	eb61 0105 	sbc.w	r1, r1, r5
 8000c40:	00cb      	lsls	r3, r1, #3
 8000c42:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8000c46:	00c4      	lsls	r4, r0, #3
 8000c48:	19a0      	adds	r0, r4, r6
 8000c4a:	eb43 0107 	adc.w	r1, r3, r7
 8000c4e:	028b      	lsls	r3, r1, #10
 8000c50:	ea43 5390 	orr.w	r3, r3, r0, lsr #22
 8000c54:	0284      	lsls	r4, r0, #10
 8000c56:	4620      	mov	r0, r4
 8000c58:	4619      	mov	r1, r3
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	f7ff fab8 	bl	80001d0 <__aeabi_uldivmod>
 8000c60:	e7d2      	b.n	8000c08 <HAL_RCC_GetSysClockFreq+0x6c>
      sysclockfreq = HSE_VALUE;
 8000c62:	4803      	ldr	r0, [pc, #12]	; (8000c70 <HAL_RCC_GetSysClockFreq+0xd4>)
}
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop
 8000c68:	40023800 	.word	0x40023800
 8000c6c:	00f42400 	.word	0x00f42400
 8000c70:	007a1200 	.word	0x007a1200

08000c74 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8000c74:	2800      	cmp	r0, #0
 8000c76:	f000 809d 	beq.w	8000db4 <HAL_RCC_ClockConfig+0x140>
{
 8000c7a:	b570      	push	{r4, r5, r6, lr}
 8000c7c:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000c7e:	4b4f      	ldr	r3, [pc, #316]	; (8000dbc <HAL_RCC_ClockConfig+0x148>)
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	f003 030f 	and.w	r3, r3, #15
 8000c86:	428b      	cmp	r3, r1
 8000c88:	d209      	bcs.n	8000c9e <HAL_RCC_ClockConfig+0x2a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000c8a:	b2cb      	uxtb	r3, r1
 8000c8c:	4a4b      	ldr	r2, [pc, #300]	; (8000dbc <HAL_RCC_ClockConfig+0x148>)
 8000c8e:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000c90:	6813      	ldr	r3, [r2, #0]
 8000c92:	f003 030f 	and.w	r3, r3, #15
 8000c96:	428b      	cmp	r3, r1
 8000c98:	d001      	beq.n	8000c9e <HAL_RCC_ClockConfig+0x2a>
      return HAL_ERROR;
 8000c9a:	2001      	movs	r0, #1
}
 8000c9c:	bd70      	pop	{r4, r5, r6, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000c9e:	6823      	ldr	r3, [r4, #0]
 8000ca0:	f013 0f02 	tst.w	r3, #2
 8000ca4:	d017      	beq.n	8000cd6 <HAL_RCC_ClockConfig+0x62>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000ca6:	f013 0f04 	tst.w	r3, #4
 8000caa:	d004      	beq.n	8000cb6 <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000cac:	4a44      	ldr	r2, [pc, #272]	; (8000dc0 <HAL_RCC_ClockConfig+0x14c>)
 8000cae:	6893      	ldr	r3, [r2, #8]
 8000cb0:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8000cb4:	6093      	str	r3, [r2, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000cb6:	6823      	ldr	r3, [r4, #0]
 8000cb8:	f013 0f08 	tst.w	r3, #8
 8000cbc:	d004      	beq.n	8000cc8 <HAL_RCC_ClockConfig+0x54>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000cbe:	4a40      	ldr	r2, [pc, #256]	; (8000dc0 <HAL_RCC_ClockConfig+0x14c>)
 8000cc0:	6893      	ldr	r3, [r2, #8]
 8000cc2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8000cc6:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000cc8:	4a3d      	ldr	r2, [pc, #244]	; (8000dc0 <HAL_RCC_ClockConfig+0x14c>)
 8000cca:	6893      	ldr	r3, [r2, #8]
 8000ccc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000cd0:	68a0      	ldr	r0, [r4, #8]
 8000cd2:	4303      	orrs	r3, r0
 8000cd4:	6093      	str	r3, [r2, #8]
 8000cd6:	460d      	mov	r5, r1
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000cd8:	6823      	ldr	r3, [r4, #0]
 8000cda:	f013 0f01 	tst.w	r3, #1
 8000cde:	d032      	beq.n	8000d46 <HAL_RCC_ClockConfig+0xd2>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000ce0:	6863      	ldr	r3, [r4, #4]
 8000ce2:	2b01      	cmp	r3, #1
 8000ce4:	d021      	beq.n	8000d2a <HAL_RCC_ClockConfig+0xb6>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000ce6:	1e9a      	subs	r2, r3, #2
 8000ce8:	2a01      	cmp	r2, #1
 8000cea:	d925      	bls.n	8000d38 <HAL_RCC_ClockConfig+0xc4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000cec:	4a34      	ldr	r2, [pc, #208]	; (8000dc0 <HAL_RCC_ClockConfig+0x14c>)
 8000cee:	6812      	ldr	r2, [r2, #0]
 8000cf0:	f012 0f02 	tst.w	r2, #2
 8000cf4:	d060      	beq.n	8000db8 <HAL_RCC_ClockConfig+0x144>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000cf6:	4932      	ldr	r1, [pc, #200]	; (8000dc0 <HAL_RCC_ClockConfig+0x14c>)
 8000cf8:	688a      	ldr	r2, [r1, #8]
 8000cfa:	f022 0203 	bic.w	r2, r2, #3
 8000cfe:	4313      	orrs	r3, r2
 8000d00:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8000d02:	f7ff fc1d 	bl	8000540 <HAL_GetTick>
 8000d06:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000d08:	4b2d      	ldr	r3, [pc, #180]	; (8000dc0 <HAL_RCC_ClockConfig+0x14c>)
 8000d0a:	689b      	ldr	r3, [r3, #8]
 8000d0c:	f003 030c 	and.w	r3, r3, #12
 8000d10:	6862      	ldr	r2, [r4, #4]
 8000d12:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8000d16:	d016      	beq.n	8000d46 <HAL_RCC_ClockConfig+0xd2>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000d18:	f7ff fc12 	bl	8000540 <HAL_GetTick>
 8000d1c:	1b80      	subs	r0, r0, r6
 8000d1e:	f241 3388 	movw	r3, #5000	; 0x1388
 8000d22:	4298      	cmp	r0, r3
 8000d24:	d9f0      	bls.n	8000d08 <HAL_RCC_ClockConfig+0x94>
        return HAL_TIMEOUT;
 8000d26:	2003      	movs	r0, #3
 8000d28:	e7b8      	b.n	8000c9c <HAL_RCC_ClockConfig+0x28>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d2a:	4a25      	ldr	r2, [pc, #148]	; (8000dc0 <HAL_RCC_ClockConfig+0x14c>)
 8000d2c:	6812      	ldr	r2, [r2, #0]
 8000d2e:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8000d32:	d1e0      	bne.n	8000cf6 <HAL_RCC_ClockConfig+0x82>
        return HAL_ERROR;
 8000d34:	2001      	movs	r0, #1
 8000d36:	e7b1      	b.n	8000c9c <HAL_RCC_ClockConfig+0x28>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000d38:	4a21      	ldr	r2, [pc, #132]	; (8000dc0 <HAL_RCC_ClockConfig+0x14c>)
 8000d3a:	6812      	ldr	r2, [r2, #0]
 8000d3c:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8000d40:	d1d9      	bne.n	8000cf6 <HAL_RCC_ClockConfig+0x82>
        return HAL_ERROR;
 8000d42:	2001      	movs	r0, #1
 8000d44:	e7aa      	b.n	8000c9c <HAL_RCC_ClockConfig+0x28>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8000d46:	4b1d      	ldr	r3, [pc, #116]	; (8000dbc <HAL_RCC_ClockConfig+0x148>)
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	f003 030f 	and.w	r3, r3, #15
 8000d4e:	42ab      	cmp	r3, r5
 8000d50:	d909      	bls.n	8000d66 <HAL_RCC_ClockConfig+0xf2>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000d52:	b2ea      	uxtb	r2, r5
 8000d54:	4b19      	ldr	r3, [pc, #100]	; (8000dbc <HAL_RCC_ClockConfig+0x148>)
 8000d56:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	f003 030f 	and.w	r3, r3, #15
 8000d5e:	42ab      	cmp	r3, r5
 8000d60:	d001      	beq.n	8000d66 <HAL_RCC_ClockConfig+0xf2>
      return HAL_ERROR;
 8000d62:	2001      	movs	r0, #1
 8000d64:	e79a      	b.n	8000c9c <HAL_RCC_ClockConfig+0x28>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000d66:	6823      	ldr	r3, [r4, #0]
 8000d68:	f013 0f04 	tst.w	r3, #4
 8000d6c:	d006      	beq.n	8000d7c <HAL_RCC_ClockConfig+0x108>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000d6e:	4a14      	ldr	r2, [pc, #80]	; (8000dc0 <HAL_RCC_ClockConfig+0x14c>)
 8000d70:	6893      	ldr	r3, [r2, #8]
 8000d72:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8000d76:	68e1      	ldr	r1, [r4, #12]
 8000d78:	430b      	orrs	r3, r1
 8000d7a:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000d7c:	6823      	ldr	r3, [r4, #0]
 8000d7e:	f013 0f08 	tst.w	r3, #8
 8000d82:	d007      	beq.n	8000d94 <HAL_RCC_ClockConfig+0x120>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8000d84:	4a0e      	ldr	r2, [pc, #56]	; (8000dc0 <HAL_RCC_ClockConfig+0x14c>)
 8000d86:	6893      	ldr	r3, [r2, #8]
 8000d88:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8000d8c:	6921      	ldr	r1, [r4, #16]
 8000d8e:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000d92:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000d94:	f7ff ff02 	bl	8000b9c <HAL_RCC_GetSysClockFreq>
 8000d98:	4b09      	ldr	r3, [pc, #36]	; (8000dc0 <HAL_RCC_ClockConfig+0x14c>)
 8000d9a:	689b      	ldr	r3, [r3, #8]
 8000d9c:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000da0:	4a08      	ldr	r2, [pc, #32]	; (8000dc4 <HAL_RCC_ClockConfig+0x150>)
 8000da2:	5cd3      	ldrb	r3, [r2, r3]
 8000da4:	40d8      	lsrs	r0, r3
 8000da6:	4b08      	ldr	r3, [pc, #32]	; (8000dc8 <HAL_RCC_ClockConfig+0x154>)
 8000da8:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8000daa:	200f      	movs	r0, #15
 8000dac:	f7ff fb90 	bl	80004d0 <HAL_InitTick>
  return HAL_OK;
 8000db0:	2000      	movs	r0, #0
 8000db2:	e773      	b.n	8000c9c <HAL_RCC_ClockConfig+0x28>
    return HAL_ERROR;
 8000db4:	2001      	movs	r0, #1
}
 8000db6:	4770      	bx	lr
        return HAL_ERROR;
 8000db8:	2001      	movs	r0, #1
 8000dba:	e76f      	b.n	8000c9c <HAL_RCC_ClockConfig+0x28>
 8000dbc:	40023c00 	.word	0x40023c00
 8000dc0:	40023800 	.word	0x40023800
 8000dc4:	08001f70 	.word	0x08001f70
 8000dc8:	20000004 	.word	0x20000004

08000dcc <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8000dcc:	4b01      	ldr	r3, [pc, #4]	; (8000dd4 <HAL_RCC_GetHCLKFreq+0x8>)
 8000dce:	6818      	ldr	r0, [r3, #0]
 8000dd0:	4770      	bx	lr
 8000dd2:	bf00      	nop
 8000dd4:	20000004 	.word	0x20000004

08000dd8 <TIM_Base_SetConfig>:
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
  uint32_t tmpcr1 = 0U;
  tmpcr1 = TIMx->CR1;
 8000dd8:	6803      	ldr	r3, [r0, #0]
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 8000dda:	4a2e      	ldr	r2, [pc, #184]	; (8000e94 <TIM_Base_SetConfig+0xbc>)
 8000ddc:	4290      	cmp	r0, r2
 8000dde:	d012      	beq.n	8000e06 <TIM_Base_SetConfig+0x2e>
 8000de0:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8000de4:	d00f      	beq.n	8000e06 <TIM_Base_SetConfig+0x2e>
 8000de6:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8000dea:	4290      	cmp	r0, r2
 8000dec:	d00b      	beq.n	8000e06 <TIM_Base_SetConfig+0x2e>
 8000dee:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000df2:	4290      	cmp	r0, r2
 8000df4:	d007      	beq.n	8000e06 <TIM_Base_SetConfig+0x2e>
 8000df6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000dfa:	4290      	cmp	r0, r2
 8000dfc:	d003      	beq.n	8000e06 <TIM_Base_SetConfig+0x2e>
 8000dfe:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8000e02:	4290      	cmp	r0, r2
 8000e04:	d103      	bne.n	8000e0e <TIM_Base_SetConfig+0x36>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8000e06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8000e0a:	684a      	ldr	r2, [r1, #4]
 8000e0c:	4313      	orrs	r3, r2
  }
 
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 8000e0e:	4a21      	ldr	r2, [pc, #132]	; (8000e94 <TIM_Base_SetConfig+0xbc>)
 8000e10:	4290      	cmp	r0, r2
 8000e12:	d02a      	beq.n	8000e6a <TIM_Base_SetConfig+0x92>
 8000e14:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8000e18:	d027      	beq.n	8000e6a <TIM_Base_SetConfig+0x92>
 8000e1a:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8000e1e:	4290      	cmp	r0, r2
 8000e20:	d023      	beq.n	8000e6a <TIM_Base_SetConfig+0x92>
 8000e22:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000e26:	4290      	cmp	r0, r2
 8000e28:	d01f      	beq.n	8000e6a <TIM_Base_SetConfig+0x92>
 8000e2a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000e2e:	4290      	cmp	r0, r2
 8000e30:	d01b      	beq.n	8000e6a <TIM_Base_SetConfig+0x92>
 8000e32:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8000e36:	4290      	cmp	r0, r2
 8000e38:	d017      	beq.n	8000e6a <TIM_Base_SetConfig+0x92>
 8000e3a:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 8000e3e:	4290      	cmp	r0, r2
 8000e40:	d013      	beq.n	8000e6a <TIM_Base_SetConfig+0x92>
 8000e42:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000e46:	4290      	cmp	r0, r2
 8000e48:	d00f      	beq.n	8000e6a <TIM_Base_SetConfig+0x92>
 8000e4a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000e4e:	4290      	cmp	r0, r2
 8000e50:	d00b      	beq.n	8000e6a <TIM_Base_SetConfig+0x92>
 8000e52:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8000e56:	4290      	cmp	r0, r2
 8000e58:	d007      	beq.n	8000e6a <TIM_Base_SetConfig+0x92>
 8000e5a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000e5e:	4290      	cmp	r0, r2
 8000e60:	d003      	beq.n	8000e6a <TIM_Base_SetConfig+0x92>
 8000e62:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000e66:	4290      	cmp	r0, r2
 8000e68:	d103      	bne.n	8000e72 <TIM_Base_SetConfig+0x9a>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8000e6a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8000e6e:	68ca      	ldr	r2, [r1, #12]
 8000e70:	4313      	orrs	r3, r2
  }

  TIMx->CR1 = tmpcr1;
 8000e72:	6003      	str	r3, [r0, #0]

  /* Set the Auto-reload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8000e74:	688b      	ldr	r3, [r1, #8]
 8000e76:	62c3      	str	r3, [r0, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8000e78:	680b      	ldr	r3, [r1, #0]
 8000e7a:	6283      	str	r3, [r0, #40]	; 0x28
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
 8000e7c:	4b05      	ldr	r3, [pc, #20]	; (8000e94 <TIM_Base_SetConfig+0xbc>)
 8000e7e:	4298      	cmp	r0, r3
 8000e80:	d003      	beq.n	8000e8a <TIM_Base_SetConfig+0xb2>
 8000e82:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000e86:	4298      	cmp	r0, r3
 8000e88:	d101      	bne.n	8000e8e <TIM_Base_SetConfig+0xb6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8000e8a:	690b      	ldr	r3, [r1, #16]
 8000e8c:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8000e8e:	2301      	movs	r3, #1
 8000e90:	6143      	str	r3, [r0, #20]
}
 8000e92:	4770      	bx	lr
 8000e94:	40010000 	.word	0x40010000

08000e98 <HAL_TIM_Base_Init>:
  if(htim == NULL)
 8000e98:	b1a8      	cbz	r0, 8000ec6 <HAL_TIM_Base_Init+0x2e>
{ 
 8000e9a:	b510      	push	{r4, lr}
 8000e9c:	4604      	mov	r4, r0
  if(htim->State == HAL_TIM_STATE_RESET)
 8000e9e:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8000ea2:	b15b      	cbz	r3, 8000ebc <HAL_TIM_Base_Init+0x24>
  htim->State= HAL_TIM_STATE_BUSY;
 8000ea4:	2302      	movs	r3, #2
 8000ea6:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8000eaa:	1d21      	adds	r1, r4, #4
 8000eac:	6820      	ldr	r0, [r4, #0]
 8000eae:	f7ff ff93 	bl	8000dd8 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8000eb2:	2301      	movs	r3, #1
 8000eb4:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  return HAL_OK;
 8000eb8:	2000      	movs	r0, #0
}
 8000eba:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8000ebc:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    HAL_TIM_Base_MspInit(htim);
 8000ec0:	f000 ffa8 	bl	8001e14 <HAL_TIM_Base_MspInit>
 8000ec4:	e7ee      	b.n	8000ea4 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 8000ec6:	2001      	movs	r0, #1
}
 8000ec8:	4770      	bx	lr

08000eca <HAL_TIMEx_MasterConfigSynchronization>:
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
  
  __HAL_LOCK(htim);
 8000eca:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8000ece:	2b01      	cmp	r3, #1
 8000ed0:	d022      	beq.n	8000f18 <HAL_TIMEx_MasterConfigSynchronization+0x4e>
{
 8000ed2:	b430      	push	{r4, r5}
  __HAL_LOCK(htim);
 8000ed4:	2201      	movs	r2, #1
 8000ed6:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
  
  htim->State = HAL_TIM_STATE_BUSY;
 8000eda:	2302      	movs	r3, #2
 8000edc:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8000ee0:	6804      	ldr	r4, [r0, #0]
 8000ee2:	6863      	ldr	r3, [r4, #4]
 8000ee4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000ee8:	6063      	str	r3, [r4, #4]
  /* Select the TRGO source */
  htim->Instance->CR2 |= sMasterConfig->MasterOutputTrigger;
 8000eea:	6804      	ldr	r4, [r0, #0]
 8000eec:	6863      	ldr	r3, [r4, #4]
 8000eee:	680d      	ldr	r5, [r1, #0]
 8000ef0:	432b      	orrs	r3, r5
 8000ef2:	6063      	str	r3, [r4, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 8000ef4:	6804      	ldr	r4, [r0, #0]
 8000ef6:	68a3      	ldr	r3, [r4, #8]
 8000ef8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000efc:	60a3      	str	r3, [r4, #8]
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8000efe:	6804      	ldr	r4, [r0, #0]
 8000f00:	68a3      	ldr	r3, [r4, #8]
 8000f02:	6849      	ldr	r1, [r1, #4]
 8000f04:	430b      	orrs	r3, r1
 8000f06:	60a3      	str	r3, [r4, #8]
  
  htim->State = HAL_TIM_STATE_READY;
 8000f08:	f880 2039 	strb.w	r2, [r0, #57]	; 0x39
  
  __HAL_UNLOCK(htim);
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  
  return HAL_OK;
 8000f12:	4618      	mov	r0, r3
} 
 8000f14:	bc30      	pop	{r4, r5}
 8000f16:	4770      	bx	lr
  __HAL_LOCK(htim);
 8000f18:	2002      	movs	r0, #2
} 
 8000f1a:	4770      	bx	lr

08000f1c <makeFreeRtosPriority>:
/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
  
  if (priority != osPriorityError) {
 8000f1c:	2884      	cmp	r0, #132	; 0x84
 8000f1e:	d001      	beq.n	8000f24 <makeFreeRtosPriority+0x8>
    fpriority += (priority - osPriorityIdle);
 8000f20:	3003      	adds	r0, #3
 8000f22:	4770      	bx	lr
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8000f24:	2000      	movs	r0, #0
  }
  
  return fpriority;
}
 8000f26:	4770      	bx	lr

08000f28 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8000f28:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 8000f2a:	f000 f9c9 	bl	80012c0 <vTaskStartScheduler>
  
  return osOK;
}
 8000f2e:	2000      	movs	r0, #0
 8000f30:	bd08      	pop	{r3, pc}

08000f32 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8000f32:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f34:	b085      	sub	sp, #20
 8000f36:	460f      	mov	r7, r1

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8000f38:	6844      	ldr	r4, [r0, #4]
 8000f3a:	6805      	ldr	r5, [r0, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8000f3c:	6906      	ldr	r6, [r0, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8000f3e:	f9b0 0008 	ldrsh.w	r0, [r0, #8]
 8000f42:	f7ff ffeb 	bl	8000f1c <makeFreeRtosPriority>
 8000f46:	ab03      	add	r3, sp, #12
 8000f48:	9301      	str	r3, [sp, #4]
 8000f4a:	9000      	str	r0, [sp, #0]
 8000f4c:	463b      	mov	r3, r7
 8000f4e:	b2b2      	uxth	r2, r6
 8000f50:	4629      	mov	r1, r5
 8000f52:	4620      	mov	r0, r4
 8000f54:	f000 f982 	bl	800125c <xTaskCreate>
 8000f58:	2801      	cmp	r0, #1
 8000f5a:	d102      	bne.n	8000f62 <osThreadCreate+0x30>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8000f5c:	9803      	ldr	r0, [sp, #12]
}
 8000f5e:	b005      	add	sp, #20
 8000f60:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return NULL;
 8000f62:	2000      	movs	r0, #0
 8000f64:	e7fb      	b.n	8000f5e <osThreadCreate+0x2c>

08000f66 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8000f66:	b508      	push	{r3, lr}
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8000f68:	4603      	mov	r3, r0
 8000f6a:	b900      	cbnz	r0, 8000f6e <osDelay+0x8>
 8000f6c:	2301      	movs	r3, #1
 8000f6e:	4618      	mov	r0, r3
 8000f70:	f000 fae8 	bl	8001544 <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8000f74:	2000      	movs	r0, #0
 8000f76:	bd08      	pop	{r3, pc}

08000f78 <osSystickHandler>:
* @brief  Handles the tick increment
* @param  none.
* @retval none.
*/
void osSystickHandler(void)
{
 8000f78:	b508      	push	{r3, lr}

#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000f7a:	f000 fb8f 	bl	800169c <xTaskGetSchedulerState>
 8000f7e:	2801      	cmp	r0, #1
 8000f80:	d001      	beq.n	8000f86 <osSystickHandler+0xe>
  {
#endif  /* INCLUDE_xTaskGetSchedulerState */  
    xPortSysTickHandler();
 8000f82:	f000 fc67 	bl	8001854 <xPortSysTickHandler>
#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  }
#endif  /* INCLUDE_xTaskGetSchedulerState */  
}
 8000f86:	bd08      	pop	{r3, pc}

08000f88 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000f88:	f100 0308 	add.w	r3, r0, #8
 8000f8c:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8000f8e:	f04f 32ff 	mov.w	r2, #4294967295
 8000f92:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000f94:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000f96:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8000f9c:	4770      	bx	lr

08000f9e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8000fa2:	4770      	bx	lr

08000fa4 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8000fa4:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8000fa6:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8000fa8:	689a      	ldr	r2, [r3, #8]
 8000faa:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8000fac:	689a      	ldr	r2, [r3, #8]
 8000fae:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8000fb0:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8000fb2:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 8000fb4:	6803      	ldr	r3, [r0, #0]
 8000fb6:	3301      	adds	r3, #1
 8000fb8:	6003      	str	r3, [r0, #0]
}
 8000fba:	4770      	bx	lr

08000fbc <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8000fbc:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8000fbe:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8000fc0:	f1b5 3fff 	cmp.w	r5, #4294967295
 8000fc4:	d002      	beq.n	8000fcc <vListInsert+0x10>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000fc6:	f100 0208 	add.w	r2, r0, #8
 8000fca:	e002      	b.n	8000fd2 <vListInsert+0x16>
		pxIterator = pxList->xListEnd.pxPrevious;
 8000fcc:	6902      	ldr	r2, [r0, #16]
 8000fce:	e004      	b.n	8000fda <vListInsert+0x1e>
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000fd0:	461a      	mov	r2, r3
 8000fd2:	6853      	ldr	r3, [r2, #4]
 8000fd4:	681c      	ldr	r4, [r3, #0]
 8000fd6:	42ac      	cmp	r4, r5
 8000fd8:	d9fa      	bls.n	8000fd0 <vListInsert+0x14>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8000fda:	6853      	ldr	r3, [r2, #4]
 8000fdc:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8000fde:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8000fe0:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8000fe2:	6051      	str	r1, [r2, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8000fe4:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 8000fe6:	6803      	ldr	r3, [r0, #0]
 8000fe8:	3301      	adds	r3, #1
 8000fea:	6003      	str	r3, [r0, #0]
}
 8000fec:	bc30      	pop	{r4, r5}
 8000fee:	4770      	bx	lr

08000ff0 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8000ff0:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8000ff2:	6842      	ldr	r2, [r0, #4]
 8000ff4:	6881      	ldr	r1, [r0, #8]
 8000ff6:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8000ff8:	6882      	ldr	r2, [r0, #8]
 8000ffa:	6841      	ldr	r1, [r0, #4]
 8000ffc:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8000ffe:	685a      	ldr	r2, [r3, #4]
 8001000:	4282      	cmp	r2, r0
 8001002:	d005      	beq.n	8001010 <uxListRemove+0x20>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8001004:	2200      	movs	r2, #0
 8001006:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8001008:	6818      	ldr	r0, [r3, #0]
 800100a:	3801      	subs	r0, #1
 800100c:	6018      	str	r0, [r3, #0]

	return pxList->uxNumberOfItems;
}
 800100e:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001010:	6882      	ldr	r2, [r0, #8]
 8001012:	605a      	str	r2, [r3, #4]
 8001014:	e7f6      	b.n	8001004 <uxListRemove+0x14>
	...

08001018 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001018:	4b07      	ldr	r3, [pc, #28]	; (8001038 <prvResetNextTaskUnblockTime+0x20>)
 800101a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	b133      	cbz	r3, 800102e <prvResetNextTaskUnblockTime+0x16>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8001020:	4b05      	ldr	r3, [pc, #20]	; (8001038 <prvResetNextTaskUnblockTime+0x20>)
 8001022:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001024:	68d2      	ldr	r2, [r2, #12]
 8001026:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8001028:	6852      	ldr	r2, [r2, #4]
 800102a:	62da      	str	r2, [r3, #44]	; 0x2c
	}
}
 800102c:	4770      	bx	lr
		xNextTaskUnblockTime = portMAX_DELAY;
 800102e:	4b02      	ldr	r3, [pc, #8]	; (8001038 <prvResetNextTaskUnblockTime+0x20>)
 8001030:	f04f 32ff 	mov.w	r2, #4294967295
 8001034:	62da      	str	r2, [r3, #44]	; 0x2c
 8001036:	4770      	bx	lr
 8001038:	20000024 	.word	0x20000024

0800103c <prvDeleteTCB>:
	{
 800103c:	b510      	push	{r4, lr}
 800103e:	4604      	mov	r4, r0
			vPortFree( pxTCB->pxStack );
 8001040:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8001042:	f000 fd71 	bl	8001b28 <vPortFree>
			vPortFree( pxTCB );
 8001046:	4620      	mov	r0, r4
 8001048:	f000 fd6e 	bl	8001b28 <vPortFree>
	}
 800104c:	bd10      	pop	{r4, pc}

0800104e <prvInitialiseNewTask>:
{
 800104e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001052:	4680      	mov	r8, r0
 8001054:	4699      	mov	r9, r3
 8001056:	9d08      	ldr	r5, [sp, #32]
 8001058:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800105a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800105c:	6b26      	ldr	r6, [r4, #48]	; 0x30
 800105e:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8001062:	3a01      	subs	r2, #1
 8001064:	eb06 0682 	add.w	r6, r6, r2, lsl #2
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8001068:	f026 0607 	bic.w	r6, r6, #7
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800106c:	2300      	movs	r3, #0
 800106e:	2b0f      	cmp	r3, #15
 8001070:	d807      	bhi.n	8001082 <prvInitialiseNewTask+0x34>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8001072:	5cc8      	ldrb	r0, [r1, r3]
 8001074:	18e2      	adds	r2, r4, r3
 8001076:	f882 0034 	strb.w	r0, [r2, #52]	; 0x34
		if( pcName[ x ] == 0x00 )
 800107a:	5cca      	ldrb	r2, [r1, r3]
 800107c:	b10a      	cbz	r2, 8001082 <prvInitialiseNewTask+0x34>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800107e:	3301      	adds	r3, #1
 8001080:	e7f5      	b.n	800106e <prvInitialiseNewTask+0x20>
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8001082:	2300      	movs	r3, #0
 8001084:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8001088:	2d06      	cmp	r5, #6
 800108a:	d900      	bls.n	800108e <prvInitialiseNewTask+0x40>
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800108c:	2506      	movs	r5, #6
	pxNewTCB->uxPriority = uxPriority;
 800108e:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 8001090:	6465      	str	r5, [r4, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8001092:	f04f 0a00 	mov.w	sl, #0
 8001096:	f8c4 a048 	str.w	sl, [r4, #72]	; 0x48
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800109a:	1d20      	adds	r0, r4, #4
 800109c:	f7ff ff7f 	bl	8000f9e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80010a0:	f104 0018 	add.w	r0, r4, #24
 80010a4:	f7ff ff7b 	bl	8000f9e <vListInitialiseItem>
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80010a8:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80010aa:	f1c5 0507 	rsb	r5, r5, #7
 80010ae:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80010b0:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ulNotifiedValue = 0;
 80010b2:	f8c4 a04c 	str.w	sl, [r4, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80010b6:	f884 a050 	strb.w	sl, [r4, #80]	; 0x50
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80010ba:	464a      	mov	r2, r9
 80010bc:	4641      	mov	r1, r8
 80010be:	4630      	mov	r0, r6
 80010c0:	f000 fb30 	bl	8001724 <pxPortInitialiseStack>
 80010c4:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
 80010c6:	b107      	cbz	r7, 80010ca <prvInitialiseNewTask+0x7c>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80010c8:	603c      	str	r4, [r7, #0]
}
 80010ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

080010d0 <prvInitialiseTaskLists>:
{
 80010d0:	b570      	push	{r4, r5, r6, lr}
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80010d2:	2400      	movs	r4, #0
 80010d4:	e007      	b.n	80010e6 <prvInitialiseTaskLists+0x16>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80010d6:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 80010da:	0093      	lsls	r3, r2, #2
 80010dc:	4810      	ldr	r0, [pc, #64]	; (8001120 <prvInitialiseTaskLists+0x50>)
 80010de:	4418      	add	r0, r3
 80010e0:	f7ff ff52 	bl	8000f88 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80010e4:	3401      	adds	r4, #1
 80010e6:	2c06      	cmp	r4, #6
 80010e8:	d9f5      	bls.n	80010d6 <prvInitialiseTaskLists+0x6>
	vListInitialise( &xDelayedTaskList1 );
 80010ea:	4c0e      	ldr	r4, [pc, #56]	; (8001124 <prvInitialiseTaskLists+0x54>)
 80010ec:	f104 06bc 	add.w	r6, r4, #188	; 0xbc
 80010f0:	4630      	mov	r0, r6
 80010f2:	f7ff ff49 	bl	8000f88 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80010f6:	f104 05d0 	add.w	r5, r4, #208	; 0xd0
 80010fa:	4628      	mov	r0, r5
 80010fc:	f7ff ff44 	bl	8000f88 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8001100:	f104 0014 	add.w	r0, r4, #20
 8001104:	f7ff ff40 	bl	8000f88 <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 8001108:	f104 00e4 	add.w	r0, r4, #228	; 0xe4
 800110c:	f7ff ff3c 	bl	8000f88 <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 8001110:	4620      	mov	r0, r4
 8001112:	f7ff ff39 	bl	8000f88 <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 8001116:	62a6      	str	r6, [r4, #40]	; 0x28
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8001118:	f8c4 50f8 	str.w	r5, [r4, #248]	; 0xf8
}
 800111c:	bd70      	pop	{r4, r5, r6, pc}
 800111e:	bf00      	nop
 8001120:	20000054 	.word	0x20000054
 8001124:	20000024 	.word	0x20000024

08001128 <prvAddNewTaskToReadyList>:
{
 8001128:	b538      	push	{r3, r4, r5, lr}
 800112a:	4605      	mov	r5, r0
	taskENTER_CRITICAL();
 800112c:	f000 fb22 	bl	8001774 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 8001130:	4b26      	ldr	r3, [pc, #152]	; (80011cc <prvAddNewTaskToReadyList+0xa4>)
 8001132:	f8d3 20fc 	ldr.w	r2, [r3, #252]	; 0xfc
 8001136:	3201      	adds	r2, #1
 8001138:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
		if( pxCurrentTCB == NULL )
 800113c:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8001140:	b173      	cbz	r3, 8001160 <prvAddNewTaskToReadyList+0x38>
			if( xSchedulerRunning == pdFALSE )
 8001142:	4b22      	ldr	r3, [pc, #136]	; (80011cc <prvAddNewTaskToReadyList+0xa4>)
 8001144:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8001148:	b98b      	cbnz	r3, 800116e <prvAddNewTaskToReadyList+0x46>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800114a:	4b20      	ldr	r3, [pc, #128]	; (80011cc <prvAddNewTaskToReadyList+0xa4>)
 800114c:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8001150:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001152:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8001154:	429a      	cmp	r2, r3
 8001156:	d80a      	bhi.n	800116e <prvAddNewTaskToReadyList+0x46>
					pxCurrentTCB = pxNewTCB;
 8001158:	4b1c      	ldr	r3, [pc, #112]	; (80011cc <prvAddNewTaskToReadyList+0xa4>)
 800115a:	f8c3 5100 	str.w	r5, [r3, #256]	; 0x100
 800115e:	e006      	b.n	800116e <prvAddNewTaskToReadyList+0x46>
			pxCurrentTCB = pxNewTCB;
 8001160:	4b1a      	ldr	r3, [pc, #104]	; (80011cc <prvAddNewTaskToReadyList+0xa4>)
 8001162:	f8c3 5100 	str.w	r5, [r3, #256]	; 0x100
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8001166:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 800116a:	2b01      	cmp	r3, #1
 800116c:	d02a      	beq.n	80011c4 <prvAddNewTaskToReadyList+0x9c>
		uxTaskNumber++;
 800116e:	4c17      	ldr	r4, [pc, #92]	; (80011cc <prvAddNewTaskToReadyList+0xa4>)
 8001170:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8001174:	3301      	adds	r3, #1
 8001176:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
		prvAddTaskToReadyList( pxNewTCB );
 800117a:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800117c:	2201      	movs	r2, #1
 800117e:	409a      	lsls	r2, r3
 8001180:	f8d4 110c 	ldr.w	r1, [r4, #268]	; 0x10c
 8001184:	430a      	orrs	r2, r1
 8001186:	f8c4 210c 	str.w	r2, [r4, #268]	; 0x10c
 800118a:	f104 0030 	add.w	r0, r4, #48	; 0x30
 800118e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001192:	009a      	lsls	r2, r3, #2
 8001194:	1d29      	adds	r1, r5, #4
 8001196:	4410      	add	r0, r2
 8001198:	f7ff ff04 	bl	8000fa4 <vListInsertEnd>
	taskEXIT_CRITICAL();
 800119c:	f000 fb0c 	bl	80017b8 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 80011a0:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
 80011a4:	b16b      	cbz	r3, 80011c2 <prvAddNewTaskToReadyList+0x9a>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80011a6:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 80011aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80011ac:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80011ae:	429a      	cmp	r2, r3
 80011b0:	d207      	bcs.n	80011c2 <prvAddNewTaskToReadyList+0x9a>
			taskYIELD_IF_USING_PREEMPTION();
 80011b2:	4b07      	ldr	r3, [pc, #28]	; (80011d0 <prvAddNewTaskToReadyList+0xa8>)
 80011b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80011b8:	601a      	str	r2, [r3, #0]
 80011ba:	f3bf 8f4f 	dsb	sy
 80011be:	f3bf 8f6f 	isb	sy
}
 80011c2:	bd38      	pop	{r3, r4, r5, pc}
				prvInitialiseTaskLists();
 80011c4:	f7ff ff84 	bl	80010d0 <prvInitialiseTaskLists>
 80011c8:	e7d1      	b.n	800116e <prvAddNewTaskToReadyList+0x46>
 80011ca:	bf00      	nop
 80011cc:	20000024 	.word	0x20000024
 80011d0:	e000ed04 	.word	0xe000ed04

080011d4 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80011d4:	b570      	push	{r4, r5, r6, lr}
 80011d6:	4604      	mov	r4, r0
 80011d8:	460e      	mov	r6, r1
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80011da:	4b1f      	ldr	r3, [pc, #124]	; (8001258 <prvAddCurrentTaskToDelayedList+0x84>)
 80011dc:	f8d3 5110 	ldr.w	r5, [r3, #272]	; 0x110
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80011e0:	f8d3 0100 	ldr.w	r0, [r3, #256]	; 0x100
 80011e4:	3004      	adds	r0, #4
 80011e6:	f7ff ff03 	bl	8000ff0 <uxListRemove>
 80011ea:	b960      	cbnz	r0, 8001206 <prvAddCurrentTaskToDelayedList+0x32>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 80011ec:	4b1a      	ldr	r3, [pc, #104]	; (8001258 <prvAddCurrentTaskToDelayedList+0x84>)
 80011ee:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 80011f2:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80011f4:	2201      	movs	r2, #1
 80011f6:	fa02 f101 	lsl.w	r1, r2, r1
 80011fa:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 80011fe:	ea22 0201 	bic.w	r2, r2, r1
 8001202:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8001206:	f1b4 3fff 	cmp.w	r4, #4294967295
 800120a:	d012      	beq.n	8001232 <prvAddCurrentTaskToDelayedList+0x5e>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
 800120c:	442c      	add	r4, r5

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800120e:	4b12      	ldr	r3, [pc, #72]	; (8001258 <prvAddCurrentTaskToDelayedList+0x84>)
 8001210:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8001214:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
 8001216:	42a5      	cmp	r5, r4
 8001218:	d814      	bhi.n	8001244 <prvAddCurrentTaskToDelayedList+0x70>
			}
			else
			{
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800121a:	4d0f      	ldr	r5, [pc, #60]	; (8001258 <prvAddCurrentTaskToDelayedList+0x84>)
 800121c:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 800121e:	f8d5 1100 	ldr.w	r1, [r5, #256]	; 0x100
 8001222:	3104      	adds	r1, #4
 8001224:	f7ff feca 	bl	8000fbc <vListInsert>

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if( xTimeToWake < xNextTaskUnblockTime )
 8001228:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800122a:	42a3      	cmp	r3, r4
 800122c:	d912      	bls.n	8001254 <prvAddCurrentTaskToDelayedList+0x80>
				{
					xNextTaskUnblockTime = xTimeToWake;
 800122e:	62ec      	str	r4, [r5, #44]	; 0x2c

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8001230:	e010      	b.n	8001254 <prvAddCurrentTaskToDelayedList+0x80>
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8001232:	2e00      	cmp	r6, #0
 8001234:	d0ea      	beq.n	800120c <prvAddCurrentTaskToDelayedList+0x38>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001236:	4808      	ldr	r0, [pc, #32]	; (8001258 <prvAddCurrentTaskToDelayedList+0x84>)
 8001238:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 800123c:	3104      	adds	r1, #4
 800123e:	f7ff feb1 	bl	8000fa4 <vListInsertEnd>
 8001242:	e007      	b.n	8001254 <prvAddCurrentTaskToDelayedList+0x80>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001244:	4b04      	ldr	r3, [pc, #16]	; (8001258 <prvAddCurrentTaskToDelayedList+0x84>)
 8001246:	f8d3 00f8 	ldr.w	r0, [r3, #248]	; 0xf8
 800124a:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
 800124e:	3104      	adds	r1, #4
 8001250:	f7ff feb4 	bl	8000fbc <vListInsert>
}
 8001254:	bd70      	pop	{r4, r5, r6, pc}
 8001256:	bf00      	nop
 8001258:	20000024 	.word	0x20000024

0800125c <xTaskCreate>:
	{
 800125c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001260:	b085      	sub	sp, #20
 8001262:	4607      	mov	r7, r0
 8001264:	4688      	mov	r8, r1
 8001266:	4615      	mov	r5, r2
 8001268:	4699      	mov	r9, r3
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800126a:	0090      	lsls	r0, r2, #2
 800126c:	f000 fbe2 	bl	8001a34 <pvPortMalloc>
			if( pxStack != NULL )
 8001270:	b1f8      	cbz	r0, 80012b2 <xTaskCreate+0x56>
 8001272:	4606      	mov	r6, r0
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8001274:	2054      	movs	r0, #84	; 0x54
 8001276:	f000 fbdd 	bl	8001a34 <pvPortMalloc>
				if( pxNewTCB != NULL )
 800127a:	4604      	mov	r4, r0
 800127c:	b1a8      	cbz	r0, 80012aa <xTaskCreate+0x4e>
					pxNewTCB->pxStack = pxStack;
 800127e:	6306      	str	r6, [r0, #48]	; 0x30
		if( pxNewTCB != NULL )
 8001280:	b1d4      	cbz	r4, 80012b8 <xTaskCreate+0x5c>
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8001282:	2300      	movs	r3, #0
 8001284:	9303      	str	r3, [sp, #12]
 8001286:	9402      	str	r4, [sp, #8]
 8001288:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800128a:	9301      	str	r3, [sp, #4]
 800128c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800128e:	9300      	str	r3, [sp, #0]
 8001290:	464b      	mov	r3, r9
 8001292:	462a      	mov	r2, r5
 8001294:	4641      	mov	r1, r8
 8001296:	4638      	mov	r0, r7
 8001298:	f7ff fed9 	bl	800104e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800129c:	4620      	mov	r0, r4
 800129e:	f7ff ff43 	bl	8001128 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80012a2:	2001      	movs	r0, #1
	}
 80012a4:	b005      	add	sp, #20
 80012a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					vPortFree( pxStack );
 80012aa:	4630      	mov	r0, r6
 80012ac:	f000 fc3c 	bl	8001b28 <vPortFree>
 80012b0:	e7e6      	b.n	8001280 <xTaskCreate+0x24>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80012b2:	f04f 30ff 	mov.w	r0, #4294967295
 80012b6:	e7f5      	b.n	80012a4 <xTaskCreate+0x48>
 80012b8:	f04f 30ff 	mov.w	r0, #4294967295
		return xReturn;
 80012bc:	e7f2      	b.n	80012a4 <xTaskCreate+0x48>
	...

080012c0 <vTaskStartScheduler>:
{
 80012c0:	b500      	push	{lr}
 80012c2:	b083      	sub	sp, #12
		xReturn = xTaskCreate(	prvIdleTask,
 80012c4:	4b17      	ldr	r3, [pc, #92]	; (8001324 <vTaskStartScheduler+0x64>)
 80012c6:	9301      	str	r3, [sp, #4]
 80012c8:	2300      	movs	r3, #0
 80012ca:	9300      	str	r3, [sp, #0]
 80012cc:	2280      	movs	r2, #128	; 0x80
 80012ce:	4916      	ldr	r1, [pc, #88]	; (8001328 <vTaskStartScheduler+0x68>)
 80012d0:	4816      	ldr	r0, [pc, #88]	; (800132c <vTaskStartScheduler+0x6c>)
 80012d2:	f7ff ffc3 	bl	800125c <xTaskCreate>
	if( xReturn == pdPASS )
 80012d6:	2801      	cmp	r0, #1
 80012d8:	d005      	beq.n	80012e6 <vTaskStartScheduler+0x26>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80012da:	f1b0 3fff 	cmp.w	r0, #4294967295
 80012de:	d017      	beq.n	8001310 <vTaskStartScheduler+0x50>
}
 80012e0:	b003      	add	sp, #12
 80012e2:	f85d fb04 	ldr.w	pc, [sp], #4

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80012e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80012ea:	f383 8811 	msr	BASEPRI, r3
 80012ee:	f3bf 8f6f 	isb	sy
 80012f2:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 80012f6:	4b0e      	ldr	r3, [pc, #56]	; (8001330 <vTaskStartScheduler+0x70>)
 80012f8:	f04f 32ff 	mov.w	r2, #4294967295
 80012fc:	62da      	str	r2, [r3, #44]	; 0x2c
		xSchedulerRunning = pdTRUE;
 80012fe:	2201      	movs	r2, #1
 8001300:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
		xTickCount = ( TickType_t ) 0U;
 8001304:	2200      	movs	r2, #0
 8001306:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
		if( xPortStartScheduler() != pdFALSE )
 800130a:	f000 facf 	bl	80018ac <xPortStartScheduler>
 800130e:	e7e7      	b.n	80012e0 <vTaskStartScheduler+0x20>
 8001310:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001314:	f383 8811 	msr	BASEPRI, r3
 8001318:	f3bf 8f6f 	isb	sy
 800131c:	f3bf 8f4f 	dsb	sy
 8001320:	e7fe      	b.n	8001320 <vTaskStartScheduler+0x60>
 8001322:	bf00      	nop
 8001324:	20000140 	.word	0x20000140
 8001328:	08001f88 	.word	0x08001f88
 800132c:	080015e5 	.word	0x080015e5
 8001330:	20000024 	.word	0x20000024

08001334 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8001334:	4a03      	ldr	r2, [pc, #12]	; (8001344 <vTaskSuspendAll+0x10>)
 8001336:	f8d2 3118 	ldr.w	r3, [r2, #280]	; 0x118
 800133a:	3301      	adds	r3, #1
 800133c:	f8c2 3118 	str.w	r3, [r2, #280]	; 0x118
}
 8001340:	4770      	bx	lr
 8001342:	bf00      	nop
 8001344:	20000024 	.word	0x20000024

08001348 <xTaskIncrementTick>:
{
 8001348:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800134c:	4b40      	ldr	r3, [pc, #256]	; (8001450 <xTaskIncrementTick+0x108>)
 800134e:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 8001352:	2b00      	cmp	r3, #0
 8001354:	d16c      	bne.n	8001430 <xTaskIncrementTick+0xe8>
		const TickType_t xConstTickCount = xTickCount + 1;
 8001356:	4b3e      	ldr	r3, [pc, #248]	; (8001450 <xTaskIncrementTick+0x108>)
 8001358:	f8d3 5110 	ldr.w	r5, [r3, #272]	; 0x110
 800135c:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
 800135e:	f8c3 5110 	str.w	r5, [r3, #272]	; 0x110
		if( xConstTickCount == ( TickType_t ) 0U )
 8001362:	b9cd      	cbnz	r5, 8001398 <xTaskIncrementTick+0x50>
			taskSWITCH_DELAYED_LISTS();
 8001364:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	b143      	cbz	r3, 800137c <xTaskIncrementTick+0x34>
 800136a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800136e:	f383 8811 	msr	BASEPRI, r3
 8001372:	f3bf 8f6f 	isb	sy
 8001376:	f3bf 8f4f 	dsb	sy
 800137a:	e7fe      	b.n	800137a <xTaskIncrementTick+0x32>
 800137c:	4b34      	ldr	r3, [pc, #208]	; (8001450 <xTaskIncrementTick+0x108>)
 800137e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001380:	f8d3 10f8 	ldr.w	r1, [r3, #248]	; 0xf8
 8001384:	6299      	str	r1, [r3, #40]	; 0x28
 8001386:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8
 800138a:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
 800138e:	3201      	adds	r2, #1
 8001390:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
 8001394:	f7ff fe40 	bl	8001018 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 8001398:	4b2d      	ldr	r3, [pc, #180]	; (8001450 <xTaskIncrementTick+0x108>)
 800139a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800139c:	42ab      	cmp	r3, r5
 800139e:	d93d      	bls.n	800141c <xTaskIncrementTick+0xd4>
BaseType_t xSwitchRequired = pdFALSE;
 80013a0:	2400      	movs	r4, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80013a2:	4a2b      	ldr	r2, [pc, #172]	; (8001450 <xTaskIncrementTick+0x108>)
 80013a4:	f8d2 3100 	ldr.w	r3, [r2, #256]	; 0x100
 80013a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013aa:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80013ae:	0099      	lsls	r1, r3, #2
 80013b0:	440a      	add	r2, r1
 80013b2:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80013b4:	2b01      	cmp	r3, #1
 80013b6:	d942      	bls.n	800143e <xTaskIncrementTick+0xf6>
				xSwitchRequired = pdTRUE;
 80013b8:	2401      	movs	r4, #1
 80013ba:	e040      	b.n	800143e <xTaskIncrementTick+0xf6>
							xSwitchRequired = pdTRUE;
 80013bc:	2401      	movs	r4, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80013be:	4b24      	ldr	r3, [pc, #144]	; (8001450 <xTaskIncrementTick+0x108>)
 80013c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	b363      	cbz	r3, 8001420 <xTaskIncrementTick+0xd8>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80013c6:	4b22      	ldr	r3, [pc, #136]	; (8001450 <xTaskIncrementTick+0x108>)
 80013c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013ca:	68db      	ldr	r3, [r3, #12]
 80013cc:	68de      	ldr	r6, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80013ce:	6873      	ldr	r3, [r6, #4]
					if( xConstTickCount < xItemValue )
 80013d0:	429d      	cmp	r5, r3
 80013d2:	d32a      	bcc.n	800142a <xTaskIncrementTick+0xe2>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80013d4:	f106 0804 	add.w	r8, r6, #4
 80013d8:	4640      	mov	r0, r8
 80013da:	f7ff fe09 	bl	8000ff0 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80013de:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 80013e0:	b11b      	cbz	r3, 80013ea <xTaskIncrementTick+0xa2>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80013e2:	f106 0018 	add.w	r0, r6, #24
 80013e6:	f7ff fe03 	bl	8000ff0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80013ea:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 80013ec:	2201      	movs	r2, #1
 80013ee:	409a      	lsls	r2, r3
 80013f0:	4f17      	ldr	r7, [pc, #92]	; (8001450 <xTaskIncrementTick+0x108>)
 80013f2:	f8d7 110c 	ldr.w	r1, [r7, #268]	; 0x10c
 80013f6:	430a      	orrs	r2, r1
 80013f8:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
 80013fc:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8001400:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001404:	009a      	lsls	r2, r3, #2
 8001406:	4641      	mov	r1, r8
 8001408:	4410      	add	r0, r2
 800140a:	f7ff fdcb 	bl	8000fa4 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800140e:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 8001410:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8001414:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001416:	429a      	cmp	r2, r3
 8001418:	d2d0      	bcs.n	80013bc <xTaskIncrementTick+0x74>
 800141a:	e7d0      	b.n	80013be <xTaskIncrementTick+0x76>
BaseType_t xSwitchRequired = pdFALSE;
 800141c:	2400      	movs	r4, #0
 800141e:	e7ce      	b.n	80013be <xTaskIncrementTick+0x76>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001420:	4b0b      	ldr	r3, [pc, #44]	; (8001450 <xTaskIncrementTick+0x108>)
 8001422:	f04f 32ff 	mov.w	r2, #4294967295
 8001426:	62da      	str	r2, [r3, #44]	; 0x2c
					break;
 8001428:	e7bb      	b.n	80013a2 <xTaskIncrementTick+0x5a>
						xNextTaskUnblockTime = xItemValue;
 800142a:	4a09      	ldr	r2, [pc, #36]	; (8001450 <xTaskIncrementTick+0x108>)
 800142c:	62d3      	str	r3, [r2, #44]	; 0x2c
						break;
 800142e:	e7b8      	b.n	80013a2 <xTaskIncrementTick+0x5a>
		++uxPendedTicks;
 8001430:	4a07      	ldr	r2, [pc, #28]	; (8001450 <xTaskIncrementTick+0x108>)
 8001432:	f8d2 3124 	ldr.w	r3, [r2, #292]	; 0x124
 8001436:	3301      	adds	r3, #1
 8001438:	f8c2 3124 	str.w	r3, [r2, #292]	; 0x124
BaseType_t xSwitchRequired = pdFALSE;
 800143c:	2400      	movs	r4, #0
		if( xYieldPending != pdFALSE )
 800143e:	4b04      	ldr	r3, [pc, #16]	; (8001450 <xTaskIncrementTick+0x108>)
 8001440:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
 8001444:	b103      	cbz	r3, 8001448 <xTaskIncrementTick+0x100>
			xSwitchRequired = pdTRUE;
 8001446:	2401      	movs	r4, #1
}
 8001448:	4620      	mov	r0, r4
 800144a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800144e:	bf00      	nop
 8001450:	20000024 	.word	0x20000024

08001454 <xTaskResumeAll>:
	configASSERT( uxSchedulerSuspended );
 8001454:	4b39      	ldr	r3, [pc, #228]	; (800153c <xTaskResumeAll+0xe8>)
 8001456:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 800145a:	b943      	cbnz	r3, 800146e <xTaskResumeAll+0x1a>
 800145c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001460:	f383 8811 	msr	BASEPRI, r3
 8001464:	f3bf 8f6f 	isb	sy
 8001468:	f3bf 8f4f 	dsb	sy
 800146c:	e7fe      	b.n	800146c <xTaskResumeAll+0x18>
{
 800146e:	b570      	push	{r4, r5, r6, lr}
	taskENTER_CRITICAL();
 8001470:	f000 f980 	bl	8001774 <vPortEnterCritical>
		--uxSchedulerSuspended;
 8001474:	4b31      	ldr	r3, [pc, #196]	; (800153c <xTaskResumeAll+0xe8>)
 8001476:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
 800147a:	3a01      	subs	r2, #1
 800147c:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001480:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 8001484:	2b00      	cmp	r3, #0
 8001486:	d154      	bne.n	8001532 <xTaskResumeAll+0xde>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8001488:	4b2c      	ldr	r3, [pc, #176]	; (800153c <xTaskResumeAll+0xe8>)
 800148a:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 800148e:	b923      	cbnz	r3, 800149a <xTaskResumeAll+0x46>
BaseType_t xAlreadyYielded = pdFALSE;
 8001490:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8001492:	f000 f991 	bl	80017b8 <vPortExitCritical>
}
 8001496:	4620      	mov	r0, r4
 8001498:	bd70      	pop	{r4, r5, r6, pc}
TCB_t *pxTCB = NULL;
 800149a:	2400      	movs	r4, #0
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800149c:	4b27      	ldr	r3, [pc, #156]	; (800153c <xTaskResumeAll+0xe8>)
 800149e:	695b      	ldr	r3, [r3, #20]
 80014a0:	b32b      	cbz	r3, 80014ee <xTaskResumeAll+0x9a>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80014a2:	4d26      	ldr	r5, [pc, #152]	; (800153c <xTaskResumeAll+0xe8>)
 80014a4:	6a2b      	ldr	r3, [r5, #32]
 80014a6:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80014a8:	f104 0018 	add.w	r0, r4, #24
 80014ac:	f7ff fda0 	bl	8000ff0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80014b0:	1d26      	adds	r6, r4, #4
 80014b2:	4630      	mov	r0, r6
 80014b4:	f7ff fd9c 	bl	8000ff0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80014b8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80014ba:	2201      	movs	r2, #1
 80014bc:	409a      	lsls	r2, r3
 80014be:	f8d5 110c 	ldr.w	r1, [r5, #268]	; 0x10c
 80014c2:	430a      	orrs	r2, r1
 80014c4:	f8c5 210c 	str.w	r2, [r5, #268]	; 0x10c
 80014c8:	f105 0030 	add.w	r0, r5, #48	; 0x30
 80014cc:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80014d0:	009a      	lsls	r2, r3, #2
 80014d2:	4631      	mov	r1, r6
 80014d4:	4410      	add	r0, r2
 80014d6:	f7ff fd65 	bl	8000fa4 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80014da:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80014dc:	f8d5 3100 	ldr.w	r3, [r5, #256]	; 0x100
 80014e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014e2:	429a      	cmp	r2, r3
 80014e4:	d3da      	bcc.n	800149c <xTaskResumeAll+0x48>
						xYieldPending = pdTRUE;
 80014e6:	2201      	movs	r2, #1
 80014e8:	f8c5 2128 	str.w	r2, [r5, #296]	; 0x128
 80014ec:	e7d6      	b.n	800149c <xTaskResumeAll+0x48>
				if( pxTCB != NULL )
 80014ee:	b10c      	cbz	r4, 80014f4 <xTaskResumeAll+0xa0>
					prvResetNextTaskUnblockTime();
 80014f0:	f7ff fd92 	bl	8001018 <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80014f4:	4b11      	ldr	r3, [pc, #68]	; (800153c <xTaskResumeAll+0xe8>)
 80014f6:	f8d3 4124 	ldr.w	r4, [r3, #292]	; 0x124
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80014fa:	b164      	cbz	r4, 8001516 <xTaskResumeAll+0xc2>
							if( xTaskIncrementTick() != pdFALSE )
 80014fc:	f7ff ff24 	bl	8001348 <xTaskIncrementTick>
 8001500:	b118      	cbz	r0, 800150a <xTaskResumeAll+0xb6>
								xYieldPending = pdTRUE;
 8001502:	4b0e      	ldr	r3, [pc, #56]	; (800153c <xTaskResumeAll+0xe8>)
 8001504:	2201      	movs	r2, #1
 8001506:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800150a:	3c01      	subs	r4, #1
 800150c:	d1f6      	bne.n	80014fc <xTaskResumeAll+0xa8>
						uxPendedTicks = 0;
 800150e:	4b0b      	ldr	r3, [pc, #44]	; (800153c <xTaskResumeAll+0xe8>)
 8001510:	2200      	movs	r2, #0
 8001512:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
				if( xYieldPending != pdFALSE )
 8001516:	4b09      	ldr	r3, [pc, #36]	; (800153c <xTaskResumeAll+0xe8>)
 8001518:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
 800151c:	b15b      	cbz	r3, 8001536 <xTaskResumeAll+0xe2>
					taskYIELD_IF_USING_PREEMPTION();
 800151e:	4b08      	ldr	r3, [pc, #32]	; (8001540 <xTaskResumeAll+0xec>)
 8001520:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001524:	601a      	str	r2, [r3, #0]
 8001526:	f3bf 8f4f 	dsb	sy
 800152a:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 800152e:	2401      	movs	r4, #1
 8001530:	e7af      	b.n	8001492 <xTaskResumeAll+0x3e>
BaseType_t xAlreadyYielded = pdFALSE;
 8001532:	2400      	movs	r4, #0
 8001534:	e7ad      	b.n	8001492 <xTaskResumeAll+0x3e>
 8001536:	2400      	movs	r4, #0
 8001538:	e7ab      	b.n	8001492 <xTaskResumeAll+0x3e>
 800153a:	bf00      	nop
 800153c:	20000024 	.word	0x20000024
 8001540:	e000ed04 	.word	0xe000ed04

08001544 <vTaskDelay>:
	{
 8001544:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 8001546:	b1b0      	cbz	r0, 8001576 <vTaskDelay+0x32>
 8001548:	4604      	mov	r4, r0
			configASSERT( uxSchedulerSuspended == 0 );
 800154a:	4b0f      	ldr	r3, [pc, #60]	; (8001588 <vTaskDelay+0x44>)
 800154c:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 8001550:	b143      	cbz	r3, 8001564 <vTaskDelay+0x20>
 8001552:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001556:	f383 8811 	msr	BASEPRI, r3
 800155a:	f3bf 8f6f 	isb	sy
 800155e:	f3bf 8f4f 	dsb	sy
 8001562:	e7fe      	b.n	8001562 <vTaskDelay+0x1e>
			vTaskSuspendAll();
 8001564:	f7ff fee6 	bl	8001334 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8001568:	2100      	movs	r1, #0
 800156a:	4620      	mov	r0, r4
 800156c:	f7ff fe32 	bl	80011d4 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 8001570:	f7ff ff70 	bl	8001454 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 8001574:	b938      	cbnz	r0, 8001586 <vTaskDelay+0x42>
			portYIELD_WITHIN_API();
 8001576:	4b05      	ldr	r3, [pc, #20]	; (800158c <vTaskDelay+0x48>)
 8001578:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800157c:	601a      	str	r2, [r3, #0]
 800157e:	f3bf 8f4f 	dsb	sy
 8001582:	f3bf 8f6f 	isb	sy
	}
 8001586:	bd10      	pop	{r4, pc}
 8001588:	20000024 	.word	0x20000024
 800158c:	e000ed04 	.word	0xe000ed04

08001590 <prvCheckTasksWaitingTermination>:
{
 8001590:	b538      	push	{r3, r4, r5, lr}
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8001592:	4b13      	ldr	r3, [pc, #76]	; (80015e0 <prvCheckTasksWaitingTermination+0x50>)
 8001594:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8001598:	b30b      	cbz	r3, 80015de <prvCheckTasksWaitingTermination+0x4e>
			vTaskSuspendAll();
 800159a:	f7ff fecb 	bl	8001334 <vTaskSuspendAll>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 800159e:	4b10      	ldr	r3, [pc, #64]	; (80015e0 <prvCheckTasksWaitingTermination+0x50>)
 80015a0:	f8d3 40e4 	ldr.w	r4, [r3, #228]	; 0xe4
			( void ) xTaskResumeAll();
 80015a4:	f7ff ff56 	bl	8001454 <xTaskResumeAll>
			if( xListIsEmpty == pdFALSE )
 80015a8:	2c00      	cmp	r4, #0
 80015aa:	d0f2      	beq.n	8001592 <prvCheckTasksWaitingTermination+0x2>
				taskENTER_CRITICAL();
 80015ac:	f000 f8e2 	bl	8001774 <vPortEnterCritical>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80015b0:	4c0b      	ldr	r4, [pc, #44]	; (80015e0 <prvCheckTasksWaitingTermination+0x50>)
 80015b2:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
 80015b6:	68dd      	ldr	r5, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80015b8:	1d28      	adds	r0, r5, #4
 80015ba:	f7ff fd19 	bl	8000ff0 <uxListRemove>
					--uxCurrentNumberOfTasks;
 80015be:	f8d4 30fc 	ldr.w	r3, [r4, #252]	; 0xfc
 80015c2:	3b01      	subs	r3, #1
 80015c4:	f8c4 30fc 	str.w	r3, [r4, #252]	; 0xfc
					--uxDeletedTasksWaitingCleanUp;
 80015c8:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
 80015cc:	3b01      	subs	r3, #1
 80015ce:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
				taskEXIT_CRITICAL();
 80015d2:	f000 f8f1 	bl	80017b8 <vPortExitCritical>
				prvDeleteTCB( pxTCB );
 80015d6:	4628      	mov	r0, r5
 80015d8:	f7ff fd30 	bl	800103c <prvDeleteTCB>
 80015dc:	e7d9      	b.n	8001592 <prvCheckTasksWaitingTermination+0x2>
}
 80015de:	bd38      	pop	{r3, r4, r5, pc}
 80015e0:	20000024 	.word	0x20000024

080015e4 <prvIdleTask>:
{
 80015e4:	b508      	push	{r3, lr}
		prvCheckTasksWaitingTermination();
 80015e6:	f7ff ffd3 	bl	8001590 <prvCheckTasksWaitingTermination>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80015ea:	4b06      	ldr	r3, [pc, #24]	; (8001604 <prvIdleTask+0x20>)
 80015ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ee:	2b01      	cmp	r3, #1
 80015f0:	d9f9      	bls.n	80015e6 <prvIdleTask+0x2>
				taskYIELD();
 80015f2:	4b05      	ldr	r3, [pc, #20]	; (8001608 <prvIdleTask+0x24>)
 80015f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80015f8:	601a      	str	r2, [r3, #0]
 80015fa:	f3bf 8f4f 	dsb	sy
 80015fe:	f3bf 8f6f 	isb	sy
 8001602:	e7f0      	b.n	80015e6 <prvIdleTask+0x2>
 8001604:	20000024 	.word	0x20000024
 8001608:	e000ed04 	.word	0xe000ed04

0800160c <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800160c:	4b22      	ldr	r3, [pc, #136]	; (8001698 <vTaskSwitchContext+0x8c>)
 800160e:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 8001612:	b123      	cbz	r3, 800161e <vTaskSwitchContext+0x12>
		xYieldPending = pdTRUE;
 8001614:	4b20      	ldr	r3, [pc, #128]	; (8001698 <vTaskSwitchContext+0x8c>)
 8001616:	2201      	movs	r2, #1
 8001618:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
 800161c:	4770      	bx	lr
		xYieldPending = pdFALSE;
 800161e:	4a1e      	ldr	r2, [pc, #120]	; (8001698 <vTaskSwitchContext+0x8c>)
 8001620:	2300      	movs	r3, #0
 8001622:	f8c2 3128 	str.w	r3, [r2, #296]	; 0x128
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8001626:	f8d2 310c 	ldr.w	r3, [r2, #268]	; 0x10c
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
 800162a:	fab3 f383 	clz	r3, r3
 800162e:	b2db      	uxtb	r3, r3
 8001630:	f1c3 031f 	rsb	r3, r3, #31
 8001634:	eb03 0083 	add.w	r0, r3, r3, lsl #2
 8001638:	0081      	lsls	r1, r0, #2
 800163a:	440a      	add	r2, r1
 800163c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800163e:	b942      	cbnz	r2, 8001652 <vTaskSwitchContext+0x46>
	__asm volatile
 8001640:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001644:	f383 8811 	msr	BASEPRI, r3
 8001648:	f3bf 8f6f 	isb	sy
 800164c:	f3bf 8f4f 	dsb	sy
 8001650:	e7fe      	b.n	8001650 <vTaskSwitchContext+0x44>
{
 8001652:	b410      	push	{r4}
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8001654:	4a10      	ldr	r2, [pc, #64]	; (8001698 <vTaskSwitchContext+0x8c>)
 8001656:	0099      	lsls	r1, r3, #2
 8001658:	18cc      	adds	r4, r1, r3
 800165a:	00a0      	lsls	r0, r4, #2
 800165c:	4410      	add	r0, r2
 800165e:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8001660:	6864      	ldr	r4, [r4, #4]
 8001662:	6344      	str	r4, [r0, #52]	; 0x34
 8001664:	3230      	adds	r2, #48	; 0x30
 8001666:	4419      	add	r1, r3
 8001668:	0088      	lsls	r0, r1, #2
 800166a:	3008      	adds	r0, #8
 800166c:	4402      	add	r2, r0
 800166e:	4294      	cmp	r4, r2
 8001670:	d00b      	beq.n	800168a <vTaskSwitchContext+0x7e>
 8001672:	4909      	ldr	r1, [pc, #36]	; (8001698 <vTaskSwitchContext+0x8c>)
 8001674:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001678:	009a      	lsls	r2, r3, #2
 800167a:	440a      	add	r2, r1
 800167c:	6b53      	ldr	r3, [r2, #52]	; 0x34
 800167e:	68db      	ldr	r3, [r3, #12]
 8001680:	f8c1 3100 	str.w	r3, [r1, #256]	; 0x100
}
 8001684:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001688:	4770      	bx	lr
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800168a:	6861      	ldr	r1, [r4, #4]
 800168c:	4802      	ldr	r0, [pc, #8]	; (8001698 <vTaskSwitchContext+0x8c>)
 800168e:	2214      	movs	r2, #20
 8001690:	fb02 0203 	mla	r2, r2, r3, r0
 8001694:	6351      	str	r1, [r2, #52]	; 0x34
 8001696:	e7ec      	b.n	8001672 <vTaskSwitchContext+0x66>
 8001698:	20000024 	.word	0x20000024

0800169c <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 800169c:	4b06      	ldr	r3, [pc, #24]	; (80016b8 <xTaskGetSchedulerState+0x1c>)
 800169e:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 80016a2:	b13b      	cbz	r3, 80016b4 <xTaskGetSchedulerState+0x18>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80016a4:	4b04      	ldr	r3, [pc, #16]	; (80016b8 <xTaskGetSchedulerState+0x1c>)
 80016a6:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 80016aa:	b10b      	cbz	r3, 80016b0 <xTaskGetSchedulerState+0x14>
				xReturn = taskSCHEDULER_SUSPENDED;
 80016ac:	2000      	movs	r0, #0
	}
 80016ae:	4770      	bx	lr
				xReturn = taskSCHEDULER_RUNNING;
 80016b0:	2002      	movs	r0, #2
 80016b2:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 80016b4:	2001      	movs	r0, #1
 80016b6:	4770      	bx	lr
 80016b8:	20000024 	.word	0x20000024

080016bc <prvTaskExitError>:
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80016bc:	4b0b      	ldr	r3, [pc, #44]	; (80016ec <prvTaskExitError+0x30>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016c4:	d008      	beq.n	80016d8 <prvTaskExitError+0x1c>
 80016c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80016ca:	f383 8811 	msr	BASEPRI, r3
 80016ce:	f3bf 8f6f 	isb	sy
 80016d2:	f3bf 8f4f 	dsb	sy
 80016d6:	e7fe      	b.n	80016d6 <prvTaskExitError+0x1a>
 80016d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80016dc:	f383 8811 	msr	BASEPRI, r3
 80016e0:	f3bf 8f6f 	isb	sy
 80016e4:	f3bf 8f4f 	dsb	sy
 80016e8:	e7fe      	b.n	80016e8 <prvTaskExitError+0x2c>
 80016ea:	bf00      	nop
 80016ec:	20000000 	.word	0x20000000

080016f0 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 80016f0:	4806      	ldr	r0, [pc, #24]	; (800170c <prvPortStartFirstTask+0x1c>)
 80016f2:	6800      	ldr	r0, [r0, #0]
 80016f4:	6800      	ldr	r0, [r0, #0]
 80016f6:	f380 8808 	msr	MSP, r0
 80016fa:	b662      	cpsie	i
 80016fc:	b661      	cpsie	f
 80016fe:	f3bf 8f4f 	dsb	sy
 8001702:	f3bf 8f6f 	isb	sy
 8001706:	df00      	svc	0
 8001708:	bf00      	nop
 800170a:	0000      	.short	0x0000
 800170c:	e000ed08 	.word	0xe000ed08

08001710 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8001710:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8001720 <vPortEnableVFP+0x10>
 8001714:	6801      	ldr	r1, [r0, #0]
 8001716:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800171a:	6001      	str	r1, [r0, #0]
 800171c:	4770      	bx	lr
 800171e:	0000      	.short	0x0000
 8001720:	e000ed88 	.word	0xe000ed88

08001724 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8001724:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001728:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800172c:	f021 0101 	bic.w	r1, r1, #1
 8001730:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8001734:	4b05      	ldr	r3, [pc, #20]	; (800174c <pxPortInitialiseStack+0x28>)
 8001736:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800173a:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
 800173e:	f06f 0302 	mvn.w	r3, #2
 8001742:	f840 3c24 	str.w	r3, [r0, #-36]
}
 8001746:	3844      	subs	r0, #68	; 0x44
 8001748:	4770      	bx	lr
 800174a:	bf00      	nop
 800174c:	080016bd 	.word	0x080016bd

08001750 <SVC_Handler>:
	__asm volatile (
 8001750:	4b07      	ldr	r3, [pc, #28]	; (8001770 <pxCurrentTCBConst2>)
 8001752:	6819      	ldr	r1, [r3, #0]
 8001754:	6808      	ldr	r0, [r1, #0]
 8001756:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800175a:	f380 8809 	msr	PSP, r0
 800175e:	f3bf 8f6f 	isb	sy
 8001762:	f04f 0000 	mov.w	r0, #0
 8001766:	f380 8811 	msr	BASEPRI, r0
 800176a:	4770      	bx	lr
 800176c:	f3af 8000 	nop.w

08001770 <pxCurrentTCBConst2>:
 8001770:	20000124 	.word	0x20000124

08001774 <vPortEnterCritical>:
 8001774:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001778:	f383 8811 	msr	BASEPRI, r3
 800177c:	f3bf 8f6f 	isb	sy
 8001780:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 8001784:	4a0a      	ldr	r2, [pc, #40]	; (80017b0 <vPortEnterCritical+0x3c>)
 8001786:	6813      	ldr	r3, [r2, #0]
 8001788:	3301      	adds	r3, #1
 800178a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 800178c:	2b01      	cmp	r3, #1
 800178e:	d000      	beq.n	8001792 <vPortEnterCritical+0x1e>
}
 8001790:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8001792:	4b08      	ldr	r3, [pc, #32]	; (80017b4 <vPortEnterCritical+0x40>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f013 0fff 	tst.w	r3, #255	; 0xff
 800179a:	d0f9      	beq.n	8001790 <vPortEnterCritical+0x1c>
 800179c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80017a0:	f383 8811 	msr	BASEPRI, r3
 80017a4:	f3bf 8f6f 	isb	sy
 80017a8:	f3bf 8f4f 	dsb	sy
 80017ac:	e7fe      	b.n	80017ac <vPortEnterCritical+0x38>
 80017ae:	bf00      	nop
 80017b0:	20000000 	.word	0x20000000
 80017b4:	e000ed04 	.word	0xe000ed04

080017b8 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 80017b8:	4b09      	ldr	r3, [pc, #36]	; (80017e0 <vPortExitCritical+0x28>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	b943      	cbnz	r3, 80017d0 <vPortExitCritical+0x18>
 80017be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80017c2:	f383 8811 	msr	BASEPRI, r3
 80017c6:	f3bf 8f6f 	isb	sy
 80017ca:	f3bf 8f4f 	dsb	sy
 80017ce:	e7fe      	b.n	80017ce <vPortExitCritical+0x16>
	uxCriticalNesting--;
 80017d0:	3b01      	subs	r3, #1
 80017d2:	4a03      	ldr	r2, [pc, #12]	; (80017e0 <vPortExitCritical+0x28>)
 80017d4:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80017d6:	b90b      	cbnz	r3, 80017dc <vPortExitCritical+0x24>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80017d8:	f383 8811 	msr	BASEPRI, r3
}
 80017dc:	4770      	bx	lr
 80017de:	bf00      	nop
 80017e0:	20000000 	.word	0x20000000
	...

080017f0 <PendSV_Handler>:
	__asm volatile
 80017f0:	f3ef 8009 	mrs	r0, PSP
 80017f4:	f3bf 8f6f 	isb	sy
 80017f8:	4b15      	ldr	r3, [pc, #84]	; (8001850 <pxCurrentTCBConst>)
 80017fa:	681a      	ldr	r2, [r3, #0]
 80017fc:	f01e 0f10 	tst.w	lr, #16
 8001800:	bf08      	it	eq
 8001802:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8001806:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800180a:	6010      	str	r0, [r2, #0]
 800180c:	f84d 3d04 	str.w	r3, [sp, #-4]!
 8001810:	f04f 0050 	mov.w	r0, #80	; 0x50
 8001814:	f380 8811 	msr	BASEPRI, r0
 8001818:	f3bf 8f4f 	dsb	sy
 800181c:	f3bf 8f6f 	isb	sy
 8001820:	f7ff fef4 	bl	800160c <vTaskSwitchContext>
 8001824:	f04f 0000 	mov.w	r0, #0
 8001828:	f380 8811 	msr	BASEPRI, r0
 800182c:	bc08      	pop	{r3}
 800182e:	6819      	ldr	r1, [r3, #0]
 8001830:	6808      	ldr	r0, [r1, #0]
 8001832:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001836:	f01e 0f10 	tst.w	lr, #16
 800183a:	bf08      	it	eq
 800183c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8001840:	f380 8809 	msr	PSP, r0
 8001844:	f3bf 8f6f 	isb	sy
 8001848:	4770      	bx	lr
 800184a:	bf00      	nop
 800184c:	f3af 8000 	nop.w

08001850 <pxCurrentTCBConst>:
 8001850:	20000124 	.word	0x20000124

08001854 <xPortSysTickHandler>:
{
 8001854:	b508      	push	{r3, lr}
	__asm volatile
 8001856:	f04f 0350 	mov.w	r3, #80	; 0x50
 800185a:	f383 8811 	msr	BASEPRI, r3
 800185e:	f3bf 8f6f 	isb	sy
 8001862:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 8001866:	f7ff fd6f 	bl	8001348 <xTaskIncrementTick>
 800186a:	b118      	cbz	r0, 8001874 <xPortSysTickHandler+0x20>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800186c:	4b03      	ldr	r3, [pc, #12]	; (800187c <xPortSysTickHandler+0x28>)
 800186e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001872:	601a      	str	r2, [r3, #0]
	__asm volatile
 8001874:	2300      	movs	r3, #0
 8001876:	f383 8811 	msr	BASEPRI, r3
}
 800187a:	bd08      	pop	{r3, pc}
 800187c:	e000ed04 	.word	0xe000ed04

08001880 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8001880:	4b06      	ldr	r3, [pc, #24]	; (800189c <vPortSetupTimerInterrupt+0x1c>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	4a06      	ldr	r2, [pc, #24]	; (80018a0 <vPortSetupTimerInterrupt+0x20>)
 8001886:	fba2 2303 	umull	r2, r3, r2, r3
 800188a:	099b      	lsrs	r3, r3, #6
 800188c:	3b01      	subs	r3, #1
 800188e:	4a05      	ldr	r2, [pc, #20]	; (80018a4 <vPortSetupTimerInterrupt+0x24>)
 8001890:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8001892:	4b05      	ldr	r3, [pc, #20]	; (80018a8 <vPortSetupTimerInterrupt+0x28>)
 8001894:	2207      	movs	r2, #7
 8001896:	601a      	str	r2, [r3, #0]
}
 8001898:	4770      	bx	lr
 800189a:	bf00      	nop
 800189c:	20000004 	.word	0x20000004
 80018a0:	10624dd3 	.word	0x10624dd3
 80018a4:	e000e014 	.word	0xe000e014
 80018a8:	e000e010 	.word	0xe000e010

080018ac <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80018ac:	4b31      	ldr	r3, [pc, #196]	; (8001974 <xPortStartScheduler+0xc8>)
 80018ae:	681a      	ldr	r2, [r3, #0]
 80018b0:	4b31      	ldr	r3, [pc, #196]	; (8001978 <xPortStartScheduler+0xcc>)
 80018b2:	429a      	cmp	r2, r3
 80018b4:	d00d      	beq.n	80018d2 <xPortStartScheduler+0x26>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80018b6:	4b2f      	ldr	r3, [pc, #188]	; (8001974 <xPortStartScheduler+0xc8>)
 80018b8:	681a      	ldr	r2, [r3, #0]
 80018ba:	4b30      	ldr	r3, [pc, #192]	; (800197c <xPortStartScheduler+0xd0>)
 80018bc:	429a      	cmp	r2, r3
 80018be:	d111      	bne.n	80018e4 <xPortStartScheduler+0x38>
	__asm volatile
 80018c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80018c4:	f383 8811 	msr	BASEPRI, r3
 80018c8:	f3bf 8f6f 	isb	sy
 80018cc:	f3bf 8f4f 	dsb	sy
 80018d0:	e7fe      	b.n	80018d0 <xPortStartScheduler+0x24>
 80018d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80018d6:	f383 8811 	msr	BASEPRI, r3
 80018da:	f3bf 8f6f 	isb	sy
 80018de:	f3bf 8f4f 	dsb	sy
 80018e2:	e7fe      	b.n	80018e2 <xPortStartScheduler+0x36>
{
 80018e4:	b500      	push	{lr}
 80018e6:	b083      	sub	sp, #12
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80018e8:	4b25      	ldr	r3, [pc, #148]	; (8001980 <xPortStartScheduler+0xd4>)
 80018ea:	781a      	ldrb	r2, [r3, #0]
 80018ec:	b2d2      	uxtb	r2, r2
 80018ee:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80018f0:	22ff      	movs	r2, #255	; 0xff
 80018f2:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80018f4:	781b      	ldrb	r3, [r3, #0]
 80018f6:	b2db      	uxtb	r3, r3
 80018f8:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80018fc:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8001900:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001904:	4a1f      	ldr	r2, [pc, #124]	; (8001984 <xPortStartScheduler+0xd8>)
 8001906:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8001908:	2307      	movs	r3, #7
 800190a:	6053      	str	r3, [r2, #4]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800190c:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8001910:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001914:	d00a      	beq.n	800192c <xPortStartScheduler+0x80>
			ulMaxPRIGROUPValue--;
 8001916:	4a1b      	ldr	r2, [pc, #108]	; (8001984 <xPortStartScheduler+0xd8>)
 8001918:	6853      	ldr	r3, [r2, #4]
 800191a:	3b01      	subs	r3, #1
 800191c:	6053      	str	r3, [r2, #4]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800191e:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8001922:	005b      	lsls	r3, r3, #1
 8001924:	b2db      	uxtb	r3, r3
 8001926:	f88d 3003 	strb.w	r3, [sp, #3]
 800192a:	e7ef      	b.n	800190c <xPortStartScheduler+0x60>
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800192c:	4a15      	ldr	r2, [pc, #84]	; (8001984 <xPortStartScheduler+0xd8>)
 800192e:	6853      	ldr	r3, [r2, #4]
 8001930:	021b      	lsls	r3, r3, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8001932:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001936:	6053      	str	r3, [r2, #4]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8001938:	9b01      	ldr	r3, [sp, #4]
 800193a:	b2db      	uxtb	r3, r3
 800193c:	4a10      	ldr	r2, [pc, #64]	; (8001980 <xPortStartScheduler+0xd4>)
 800193e:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8001940:	4b11      	ldr	r3, [pc, #68]	; (8001988 <xPortStartScheduler+0xdc>)
 8001942:	681a      	ldr	r2, [r3, #0]
 8001944:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8001948:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800194a:	681a      	ldr	r2, [r3, #0]
 800194c:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 8001950:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
 8001952:	f7ff ff95 	bl	8001880 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 8001956:	4b0d      	ldr	r3, [pc, #52]	; (800198c <xPortStartScheduler+0xe0>)
 8001958:	2200      	movs	r2, #0
 800195a:	601a      	str	r2, [r3, #0]
	vPortEnableVFP();
 800195c:	f7ff fed8 	bl	8001710 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8001960:	4a0b      	ldr	r2, [pc, #44]	; (8001990 <xPortStartScheduler+0xe4>)
 8001962:	6813      	ldr	r3, [r2, #0]
 8001964:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8001968:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
 800196a:	f7ff fec1 	bl	80016f0 <prvPortStartFirstTask>
	prvTaskExitError();
 800196e:	f7ff fea5 	bl	80016bc <prvTaskExitError>
 8001972:	bf00      	nop
 8001974:	e000ed00 	.word	0xe000ed00
 8001978:	410fc271 	.word	0x410fc271
 800197c:	410fc270 	.word	0x410fc270
 8001980:	e000e400 	.word	0xe000e400
 8001984:	20000150 	.word	0x20000150
 8001988:	e000ed20 	.word	0xe000ed20
 800198c:	20000000 	.word	0x20000000
 8001990:	e000ef34 	.word	0xe000ef34

08001994 <prvHeapInit>:
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8001994:	4a10      	ldr	r2, [pc, #64]	; (80019d8 <prvHeapInit+0x44>)

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8001996:	f012 0f07 	tst.w	r2, #7
 800199a:	d01a      	beq.n	80019d2 <prvHeapInit+0x3e>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800199c:	1dd1      	adds	r1, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800199e:	f021 0107 	bic.w	r1, r1, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80019a2:	f5c1 5370 	rsb	r3, r1, #15360	; 0x3c00
 80019a6:	4413      	add	r3, r2
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80019a8:	460a      	mov	r2, r1

	pucAlignedHeap = ( uint8_t * ) uxAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80019aa:	490c      	ldr	r1, [pc, #48]	; (80019dc <prvHeapInit+0x48>)
 80019ac:	600a      	str	r2, [r1, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80019ae:	2000      	movs	r0, #0
 80019b0:	6048      	str	r0, [r1, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80019b2:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 80019b4:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80019b6:	f023 0307 	bic.w	r3, r3, #7
	pxEnd = ( void * ) uxAddress;
 80019ba:	608b      	str	r3, [r1, #8]
	pxEnd->xBlockSize = 0;
 80019bc:	6058      	str	r0, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80019be:	6018      	str	r0, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80019c0:	1a98      	subs	r0, r3, r2
 80019c2:	6050      	str	r0, [r2, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80019c4:	6013      	str	r3, [r2, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80019c6:	60c8      	str	r0, [r1, #12]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80019c8:	6108      	str	r0, [r1, #16]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80019ca:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80019ce:	614b      	str	r3, [r1, #20]
}
 80019d0:	4770      	bx	lr
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80019d2:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80019d6:	e7e8      	b.n	80019aa <prvHeapInit+0x16>
 80019d8:	20000170 	.word	0x20000170
 80019dc:	20000158 	.word	0x20000158

080019e0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80019e0:	b410      	push	{r4}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80019e2:	4b13      	ldr	r3, [pc, #76]	; (8001a30 <prvInsertBlockIntoFreeList+0x50>)
 80019e4:	681a      	ldr	r2, [r3, #0]
 80019e6:	4282      	cmp	r2, r0
 80019e8:	d31b      	bcc.n	8001a22 <prvInsertBlockIntoFreeList+0x42>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80019ea:	6859      	ldr	r1, [r3, #4]
 80019ec:	185c      	adds	r4, r3, r1
 80019ee:	4284      	cmp	r4, r0
 80019f0:	d103      	bne.n	80019fa <prvInsertBlockIntoFreeList+0x1a>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80019f2:	6840      	ldr	r0, [r0, #4]
 80019f4:	4401      	add	r1, r0
 80019f6:	6059      	str	r1, [r3, #4]
		pxBlockToInsert = pxIterator;
 80019f8:	4618      	mov	r0, r3
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80019fa:	6841      	ldr	r1, [r0, #4]
 80019fc:	1844      	adds	r4, r0, r1
 80019fe:	42a2      	cmp	r2, r4
 8001a00:	d113      	bne.n	8001a2a <prvInsertBlockIntoFreeList+0x4a>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8001a02:	4c0b      	ldr	r4, [pc, #44]	; (8001a30 <prvInsertBlockIntoFreeList+0x50>)
 8001a04:	68a4      	ldr	r4, [r4, #8]
 8001a06:	42a2      	cmp	r2, r4
 8001a08:	d00d      	beq.n	8001a26 <prvInsertBlockIntoFreeList+0x46>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8001a0a:	6852      	ldr	r2, [r2, #4]
 8001a0c:	4411      	add	r1, r2
 8001a0e:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8001a10:	681a      	ldr	r2, [r3, #0]
 8001a12:	6812      	ldr	r2, [r2, #0]
 8001a14:	6002      	str	r2, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8001a16:	4298      	cmp	r0, r3
 8001a18:	d000      	beq.n	8001a1c <prvInsertBlockIntoFreeList+0x3c>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8001a1a:	6018      	str	r0, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8001a1c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001a20:	4770      	bx	lr
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8001a22:	4613      	mov	r3, r2
 8001a24:	e7de      	b.n	80019e4 <prvInsertBlockIntoFreeList+0x4>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8001a26:	6004      	str	r4, [r0, #0]
 8001a28:	e7f5      	b.n	8001a16 <prvInsertBlockIntoFreeList+0x36>
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8001a2a:	6002      	str	r2, [r0, #0]
 8001a2c:	e7f3      	b.n	8001a16 <prvInsertBlockIntoFreeList+0x36>
 8001a2e:	bf00      	nop
 8001a30:	20000158 	.word	0x20000158

08001a34 <pvPortMalloc>:
{
 8001a34:	b570      	push	{r4, r5, r6, lr}
 8001a36:	4604      	mov	r4, r0
	vTaskSuspendAll();
 8001a38:	f7ff fc7c 	bl	8001334 <vTaskSuspendAll>
		if( pxEnd == NULL )
 8001a3c:	4b39      	ldr	r3, [pc, #228]	; (8001b24 <pvPortMalloc+0xf0>)
 8001a3e:	689b      	ldr	r3, [r3, #8]
 8001a40:	b1bb      	cbz	r3, 8001a72 <pvPortMalloc+0x3e>
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8001a42:	4b38      	ldr	r3, [pc, #224]	; (8001b24 <pvPortMalloc+0xf0>)
 8001a44:	695b      	ldr	r3, [r3, #20]
 8001a46:	421c      	tst	r4, r3
 8001a48:	d162      	bne.n	8001b10 <pvPortMalloc+0xdc>
			if( xWantedSize > 0 )
 8001a4a:	b1ac      	cbz	r4, 8001a78 <pvPortMalloc+0x44>
				xWantedSize += xHeapStructSize;
 8001a4c:	3408      	adds	r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8001a4e:	f014 0f07 	tst.w	r4, #7
 8001a52:	d011      	beq.n	8001a78 <pvPortMalloc+0x44>
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8001a54:	f024 0407 	bic.w	r4, r4, #7
 8001a58:	3408      	adds	r4, #8
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8001a5a:	f004 0307 	and.w	r3, r4, #7
 8001a5e:	b15b      	cbz	r3, 8001a78 <pvPortMalloc+0x44>
 8001a60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001a64:	f383 8811 	msr	BASEPRI, r3
 8001a68:	f3bf 8f6f 	isb	sy
 8001a6c:	f3bf 8f4f 	dsb	sy
 8001a70:	e7fe      	b.n	8001a70 <pvPortMalloc+0x3c>
			prvHeapInit();
 8001a72:	f7ff ff8f 	bl	8001994 <prvHeapInit>
 8001a76:	e7e4      	b.n	8001a42 <pvPortMalloc+0xe>
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8001a78:	2c00      	cmp	r4, #0
 8001a7a:	d04b      	beq.n	8001b14 <pvPortMalloc+0xe0>
 8001a7c:	4b29      	ldr	r3, [pc, #164]	; (8001b24 <pvPortMalloc+0xf0>)
 8001a7e:	691b      	ldr	r3, [r3, #16]
 8001a80:	42a3      	cmp	r3, r4
 8001a82:	d349      	bcc.n	8001b18 <pvPortMalloc+0xe4>
				pxBlock = xStart.pxNextFreeBlock;
 8001a84:	4b27      	ldr	r3, [pc, #156]	; (8001b24 <pvPortMalloc+0xf0>)
 8001a86:	681d      	ldr	r5, [r3, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8001a88:	e001      	b.n	8001a8e <pvPortMalloc+0x5a>
					pxPreviousBlock = pxBlock;
 8001a8a:	462b      	mov	r3, r5
					pxBlock = pxBlock->pxNextFreeBlock;
 8001a8c:	4615      	mov	r5, r2
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8001a8e:	686a      	ldr	r2, [r5, #4]
 8001a90:	42a2      	cmp	r2, r4
 8001a92:	d202      	bcs.n	8001a9a <pvPortMalloc+0x66>
 8001a94:	682a      	ldr	r2, [r5, #0]
 8001a96:	2a00      	cmp	r2, #0
 8001a98:	d1f7      	bne.n	8001a8a <pvPortMalloc+0x56>
				if( pxBlock != pxEnd )
 8001a9a:	4a22      	ldr	r2, [pc, #136]	; (8001b24 <pvPortMalloc+0xf0>)
 8001a9c:	6892      	ldr	r2, [r2, #8]
 8001a9e:	42aa      	cmp	r2, r5
 8001aa0:	d03c      	beq.n	8001b1c <pvPortMalloc+0xe8>
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8001aa2:	681e      	ldr	r6, [r3, #0]
 8001aa4:	3608      	adds	r6, #8
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8001aa6:	682a      	ldr	r2, [r5, #0]
 8001aa8:	601a      	str	r2, [r3, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8001aaa:	686b      	ldr	r3, [r5, #4]
 8001aac:	1b1b      	subs	r3, r3, r4
 8001aae:	2b10      	cmp	r3, #16
 8001ab0:	d910      	bls.n	8001ad4 <pvPortMalloc+0xa0>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8001ab2:	1928      	adds	r0, r5, r4
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8001ab4:	f010 0f07 	tst.w	r0, #7
 8001ab8:	d008      	beq.n	8001acc <pvPortMalloc+0x98>
 8001aba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001abe:	f383 8811 	msr	BASEPRI, r3
 8001ac2:	f3bf 8f6f 	isb	sy
 8001ac6:	f3bf 8f4f 	dsb	sy
 8001aca:	e7fe      	b.n	8001aca <pvPortMalloc+0x96>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8001acc:	6043      	str	r3, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 8001ace:	606c      	str	r4, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8001ad0:	f7ff ff86 	bl	80019e0 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8001ad4:	6869      	ldr	r1, [r5, #4]
 8001ad6:	4a13      	ldr	r2, [pc, #76]	; (8001b24 <pvPortMalloc+0xf0>)
 8001ad8:	6913      	ldr	r3, [r2, #16]
 8001ada:	1a5b      	subs	r3, r3, r1
 8001adc:	6113      	str	r3, [r2, #16]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8001ade:	68d2      	ldr	r2, [r2, #12]
 8001ae0:	4293      	cmp	r3, r2
 8001ae2:	d201      	bcs.n	8001ae8 <pvPortMalloc+0xb4>
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8001ae4:	4a0f      	ldr	r2, [pc, #60]	; (8001b24 <pvPortMalloc+0xf0>)
 8001ae6:	60d3      	str	r3, [r2, #12]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8001ae8:	4b0e      	ldr	r3, [pc, #56]	; (8001b24 <pvPortMalloc+0xf0>)
 8001aea:	695b      	ldr	r3, [r3, #20]
 8001aec:	430b      	orrs	r3, r1
 8001aee:	606b      	str	r3, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8001af0:	2300      	movs	r3, #0
 8001af2:	602b      	str	r3, [r5, #0]
	( void ) xTaskResumeAll();
 8001af4:	f7ff fcae 	bl	8001454 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8001af8:	f016 0f07 	tst.w	r6, #7
 8001afc:	d010      	beq.n	8001b20 <pvPortMalloc+0xec>
 8001afe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b02:	f383 8811 	msr	BASEPRI, r3
 8001b06:	f3bf 8f6f 	isb	sy
 8001b0a:	f3bf 8f4f 	dsb	sy
 8001b0e:	e7fe      	b.n	8001b0e <pvPortMalloc+0xda>
void *pvReturn = NULL;
 8001b10:	2600      	movs	r6, #0
 8001b12:	e7ef      	b.n	8001af4 <pvPortMalloc+0xc0>
 8001b14:	2600      	movs	r6, #0
 8001b16:	e7ed      	b.n	8001af4 <pvPortMalloc+0xc0>
 8001b18:	2600      	movs	r6, #0
 8001b1a:	e7eb      	b.n	8001af4 <pvPortMalloc+0xc0>
 8001b1c:	2600      	movs	r6, #0
 8001b1e:	e7e9      	b.n	8001af4 <pvPortMalloc+0xc0>
}
 8001b20:	4630      	mov	r0, r6
 8001b22:	bd70      	pop	{r4, r5, r6, pc}
 8001b24:	20000158 	.word	0x20000158

08001b28 <vPortFree>:
	if( pv != NULL )
 8001b28:	b380      	cbz	r0, 8001b8c <vPortFree+0x64>
{
 8001b2a:	b538      	push	{r3, r4, r5, lr}
 8001b2c:	4604      	mov	r4, r0
		puc -= xHeapStructSize;
 8001b2e:	f1a0 0508 	sub.w	r5, r0, #8
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8001b32:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8001b36:	4916      	ldr	r1, [pc, #88]	; (8001b90 <vPortFree+0x68>)
 8001b38:	6949      	ldr	r1, [r1, #20]
 8001b3a:	420a      	tst	r2, r1
 8001b3c:	d108      	bne.n	8001b50 <vPortFree+0x28>
 8001b3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b42:	f383 8811 	msr	BASEPRI, r3
 8001b46:	f3bf 8f6f 	isb	sy
 8001b4a:	f3bf 8f4f 	dsb	sy
 8001b4e:	e7fe      	b.n	8001b4e <vPortFree+0x26>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8001b50:	f850 0c08 	ldr.w	r0, [r0, #-8]
 8001b54:	b140      	cbz	r0, 8001b68 <vPortFree+0x40>
 8001b56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b5a:	f383 8811 	msr	BASEPRI, r3
 8001b5e:	f3bf 8f6f 	isb	sy
 8001b62:	f3bf 8f4f 	dsb	sy
 8001b66:	e7fe      	b.n	8001b66 <vPortFree+0x3e>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8001b68:	ea22 0201 	bic.w	r2, r2, r1
 8001b6c:	f844 2c04 	str.w	r2, [r4, #-4]
				vTaskSuspendAll();
 8001b70:	f7ff fbe0 	bl	8001334 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 8001b74:	f854 1c04 	ldr.w	r1, [r4, #-4]
 8001b78:	4a05      	ldr	r2, [pc, #20]	; (8001b90 <vPortFree+0x68>)
 8001b7a:	6913      	ldr	r3, [r2, #16]
 8001b7c:	440b      	add	r3, r1
 8001b7e:	6113      	str	r3, [r2, #16]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8001b80:	4628      	mov	r0, r5
 8001b82:	f7ff ff2d 	bl	80019e0 <prvInsertBlockIntoFreeList>
				( void ) xTaskResumeAll();
 8001b86:	f7ff fc65 	bl	8001454 <xTaskResumeAll>
}
 8001b8a:	bd38      	pop	{r3, r4, r5, pc}
 8001b8c:	4770      	bx	lr
 8001b8e:	bf00      	nop
 8001b90:	20000158 	.word	0x20000158

08001b94 <vLEDBTNTask>:
/* USER CODE END PFP */

/* USER CODE BEGIN 0 */

void vLEDBTNTask(void *pvParameters )
{
 8001b94:	b508      	push	{r3, lr}
	 for( ;; )
	  {
	      HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 8001b96:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001b9a:	4804      	ldr	r0, [pc, #16]	; (8001bac <vLEDBTNTask+0x18>)
 8001b9c:	f7fe fe3e 	bl	800081c <HAL_GPIO_TogglePin>
	      HAL_Delay(2000);
 8001ba0:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001ba4:	f7fe fcd2 	bl	800054c <HAL_Delay>
 8001ba8:	e7f5      	b.n	8001b96 <vLEDBTNTask+0x2>
 8001baa:	bf00      	nop
 8001bac:	40020c00 	.word	0x40020c00

08001bb0 <vLEDBTNREDTask>:
	  }

}

void vLEDBTNREDTask(void *pvParameters )
{
 8001bb0:	b508      	push	{r3, lr}
	 for( ;; )
	  {
	      HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
 8001bb2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001bb6:	4804      	ldr	r0, [pc, #16]	; (8001bc8 <vLEDBTNREDTask+0x18>)
 8001bb8:	f7fe fe30 	bl	800081c <HAL_GPIO_TogglePin>
	      HAL_Delay(500);
 8001bbc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001bc0:	f7fe fcc4 	bl	800054c <HAL_Delay>
 8001bc4:	e7f5      	b.n	8001bb2 <vLEDBTNREDTask+0x2>
 8001bc6:	bf00      	nop
 8001bc8:	40020c00 	.word	0x40020c00

08001bcc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
static void MX_GPIO_Init(void)
{
 8001bcc:	b530      	push	{r4, r5, lr}
 8001bce:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001bd0:	2400      	movs	r4, #0
 8001bd2:	9401      	str	r4, [sp, #4]
 8001bd4:	4b13      	ldr	r3, [pc, #76]	; (8001c24 <MX_GPIO_Init+0x58>)
 8001bd6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001bd8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001bdc:	631a      	str	r2, [r3, #48]	; 0x30
 8001bde:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001be0:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8001be4:	9201      	str	r2, [sp, #4]
 8001be6:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001be8:	9402      	str	r4, [sp, #8]
 8001bea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001bec:	f042 0208 	orr.w	r2, r2, #8
 8001bf0:	631a      	str	r2, [r3, #48]	; 0x30
 8001bf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bf4:	f003 0308 	and.w	r3, r3, #8
 8001bf8:	9302      	str	r3, [sp, #8]
 8001bfa:	9b02      	ldr	r3, [sp, #8]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 8001bfc:	4d0a      	ldr	r5, [pc, #40]	; (8001c28 <MX_GPIO_Init+0x5c>)
 8001bfe:	4622      	mov	r2, r4
 8001c00:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001c04:	4628      	mov	r0, r5
 8001c06:	f7fe fe03 	bl	8000810 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PD12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12 | GPIO_PIN_13;
 8001c0a:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001c0e:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c10:	2301      	movs	r3, #1
 8001c12:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c14:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c16:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c18:	a903      	add	r1, sp, #12
 8001c1a:	4628      	mov	r0, r5
 8001c1c:	f7fe fd14 	bl	8000648 <HAL_GPIO_Init>

}
 8001c20:	b009      	add	sp, #36	; 0x24
 8001c22:	bd30      	pop	{r4, r5, pc}
 8001c24:	40023800 	.word	0x40023800
 8001c28:	40020c00 	.word	0x40020c00

08001c2c <StartDefaultTask>:

/* USER CODE END 4 */

/* StartDefaultTask function */
void StartDefaultTask(void const * argument)
{
 8001c2c:	b508      	push	{r3, lr}

  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001c2e:	2001      	movs	r0, #1
 8001c30:	f7ff f999 	bl	8000f66 <osDelay>
 8001c34:	e7fb      	b.n	8001c2e <StartDefaultTask+0x2>

08001c36 <_Error_Handler>:
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
void _Error_Handler(char * file, int line)
{
 8001c36:	e7fe      	b.n	8001c36 <_Error_Handler>

08001c38 <MX_TIM6_Init>:
{
 8001c38:	b500      	push	{lr}
 8001c3a:	b083      	sub	sp, #12
  htim6.Instance = TIM6;
 8001c3c:	480e      	ldr	r0, [pc, #56]	; (8001c78 <MX_TIM6_Init+0x40>)
 8001c3e:	4b0f      	ldr	r3, [pc, #60]	; (8001c7c <MX_TIM6_Init+0x44>)
 8001c40:	6003      	str	r3, [r0, #0]
  htim6.Init.Prescaler = 0;
 8001c42:	2300      	movs	r3, #0
 8001c44:	6043      	str	r3, [r0, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c46:	6083      	str	r3, [r0, #8]
  htim6.Init.Period = 0;
 8001c48:	60c3      	str	r3, [r0, #12]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001c4a:	f7ff f925 	bl	8000e98 <HAL_TIM_Base_Init>
 8001c4e:	b950      	cbnz	r0, 8001c66 <MX_TIM6_Init+0x2e>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c50:	2300      	movs	r3, #0
 8001c52:	9300      	str	r3, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c54:	9301      	str	r3, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001c56:	4669      	mov	r1, sp
 8001c58:	4807      	ldr	r0, [pc, #28]	; (8001c78 <MX_TIM6_Init+0x40>)
 8001c5a:	f7ff f936 	bl	8000eca <HAL_TIMEx_MasterConfigSynchronization>
 8001c5e:	b930      	cbnz	r0, 8001c6e <MX_TIM6_Init+0x36>
}
 8001c60:	b003      	add	sp, #12
 8001c62:	f85d fb04 	ldr.w	pc, [sp], #4
    _Error_Handler(__FILE__, __LINE__);
 8001c66:	21fa      	movs	r1, #250	; 0xfa
 8001c68:	4805      	ldr	r0, [pc, #20]	; (8001c80 <MX_TIM6_Init+0x48>)
 8001c6a:	f7ff ffe4 	bl	8001c36 <_Error_Handler>
    _Error_Handler(__FILE__, __LINE__);
 8001c6e:	f240 1101 	movw	r1, #257	; 0x101
 8001c72:	4803      	ldr	r0, [pc, #12]	; (8001c80 <MX_TIM6_Init+0x48>)
 8001c74:	f7ff ffdf 	bl	8001c36 <_Error_Handler>
 8001c78:	20003d78 	.word	0x20003d78
 8001c7c:	40001000 	.word	0x40001000
 8001c80:	08001f90 	.word	0x08001f90

08001c84 <SystemClock_Config>:
{
 8001c84:	b500      	push	{lr}
 8001c86:	b095      	sub	sp, #84	; 0x54
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c88:	2200      	movs	r2, #0
 8001c8a:	9201      	str	r2, [sp, #4]
 8001c8c:	4b2a      	ldr	r3, [pc, #168]	; (8001d38 <SystemClock_Config+0xb4>)
 8001c8e:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8001c90:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8001c94:	6419      	str	r1, [r3, #64]	; 0x40
 8001c96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c9c:	9301      	str	r3, [sp, #4]
 8001c9e:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001ca0:	9202      	str	r2, [sp, #8]
 8001ca2:	4b26      	ldr	r3, [pc, #152]	; (8001d3c <SystemClock_Config+0xb8>)
 8001ca4:	6819      	ldr	r1, [r3, #0]
 8001ca6:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 8001caa:	6019      	str	r1, [r3, #0]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001cb2:	9302      	str	r3, [sp, #8]
 8001cb4:	9b02      	ldr	r3, [sp, #8]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001cb6:	2302      	movs	r3, #2
 8001cb8:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001cba:	2101      	movs	r1, #1
 8001cbc:	910b      	str	r1, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = 16;
 8001cbe:	2110      	movs	r1, #16
 8001cc0:	910c      	str	r1, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001cc2:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001cc4:	920f      	str	r2, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001cc6:	2208      	movs	r2, #8
 8001cc8:	9210      	str	r2, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001cca:	22a8      	movs	r2, #168	; 0xa8
 8001ccc:	9211      	str	r2, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001cce:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001cd0:	2304      	movs	r3, #4
 8001cd2:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001cd4:	a808      	add	r0, sp, #32
 8001cd6:	f7fe fda5 	bl	8000824 <HAL_RCC_OscConfig>
 8001cda:	bb20      	cbnz	r0, 8001d26 <SystemClock_Config+0xa2>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001cdc:	230f      	movs	r3, #15
 8001cde:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001ce0:	2302      	movs	r3, #2
 8001ce2:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001ce8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001cec:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001cee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001cf2:	9307      	str	r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001cf4:	2105      	movs	r1, #5
 8001cf6:	a803      	add	r0, sp, #12
 8001cf8:	f7fe ffbc 	bl	8000c74 <HAL_RCC_ClockConfig>
 8001cfc:	b9b8      	cbnz	r0, 8001d2e <SystemClock_Config+0xaa>
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8001cfe:	f7ff f865 	bl	8000dcc <HAL_RCC_GetHCLKFreq>
 8001d02:	4b0f      	ldr	r3, [pc, #60]	; (8001d40 <SystemClock_Config+0xbc>)
 8001d04:	fba3 3000 	umull	r3, r0, r3, r0
 8001d08:	0980      	lsrs	r0, r0, #6
 8001d0a:	f7fe fc77 	bl	80005fc <HAL_SYSTICK_Config>
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8001d0e:	2004      	movs	r0, #4
 8001d10:	f7fe fc8a 	bl	8000628 <HAL_SYSTICK_CLKSourceConfig>
  HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);
 8001d14:	2200      	movs	r2, #0
 8001d16:	210f      	movs	r1, #15
 8001d18:	f04f 30ff 	mov.w	r0, #4294967295
 8001d1c:	f7fe fc3a 	bl	8000594 <HAL_NVIC_SetPriority>
}
 8001d20:	b015      	add	sp, #84	; 0x54
 8001d22:	f85d fb04 	ldr.w	pc, [sp], #4
    _Error_Handler(__FILE__, __LINE__);
 8001d26:	21d1      	movs	r1, #209	; 0xd1
 8001d28:	4806      	ldr	r0, [pc, #24]	; (8001d44 <SystemClock_Config+0xc0>)
 8001d2a:	f7ff ff84 	bl	8001c36 <_Error_Handler>
    _Error_Handler(__FILE__, __LINE__);
 8001d2e:	21df      	movs	r1, #223	; 0xdf
 8001d30:	4804      	ldr	r0, [pc, #16]	; (8001d44 <SystemClock_Config+0xc0>)
 8001d32:	f7ff ff80 	bl	8001c36 <_Error_Handler>
 8001d36:	bf00      	nop
 8001d38:	40023800 	.word	0x40023800
 8001d3c:	40007000 	.word	0x40007000
 8001d40:	10624dd3 	.word	0x10624dd3
 8001d44:	08001f90 	.word	0x08001f90

08001d48 <main>:
{
 8001d48:	b500      	push	{lr}
 8001d4a:	b089      	sub	sp, #36	; 0x24
  HAL_Init();
 8001d4c:	f7fe fbd6 	bl	80004fc <HAL_Init>
  SystemClock_Config();
 8001d50:	f7ff ff98 	bl	8001c84 <SystemClock_Config>
  MX_GPIO_Init();
 8001d54:	f7ff ff3a 	bl	8001bcc <MX_GPIO_Init>
  MX_TIM6_Init();
 8001d58:	f7ff ff6e 	bl	8001c38 <MX_TIM6_Init>
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8001d5c:	ac03      	add	r4, sp, #12
 8001d5e:	4d0f      	ldr	r5, [pc, #60]	; (8001d9c <main+0x54>)
 8001d60:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d62:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001d64:	682b      	ldr	r3, [r5, #0]
 8001d66:	6023      	str	r3, [r4, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8001d68:	2100      	movs	r1, #0
 8001d6a:	a803      	add	r0, sp, #12
 8001d6c:	f7ff f8e1 	bl	8000f32 <osThreadCreate>
 8001d70:	4b0b      	ldr	r3, [pc, #44]	; (8001da0 <main+0x58>)
 8001d72:	6018      	str	r0, [r3, #0]
  xTaskCreate( vLEDBTNTask, "BTNx", configMINIMAL_STACK_SIZE, NULL, 0, ( TaskHandle_t * ) NULL);
 8001d74:	2400      	movs	r4, #0
 8001d76:	9401      	str	r4, [sp, #4]
 8001d78:	9400      	str	r4, [sp, #0]
 8001d7a:	4623      	mov	r3, r4
 8001d7c:	2280      	movs	r2, #128	; 0x80
 8001d7e:	4909      	ldr	r1, [pc, #36]	; (8001da4 <main+0x5c>)
 8001d80:	4809      	ldr	r0, [pc, #36]	; (8001da8 <main+0x60>)
 8001d82:	f7ff fa6b 	bl	800125c <xTaskCreate>
  xTaskCreate( vLEDBTNREDTask, "BTNREDx", configMINIMAL_STACK_SIZE, NULL, 0, ( TaskHandle_t * ) NULL);
 8001d86:	9401      	str	r4, [sp, #4]
 8001d88:	9400      	str	r4, [sp, #0]
 8001d8a:	4623      	mov	r3, r4
 8001d8c:	2280      	movs	r2, #128	; 0x80
 8001d8e:	4907      	ldr	r1, [pc, #28]	; (8001dac <main+0x64>)
 8001d90:	4807      	ldr	r0, [pc, #28]	; (8001db0 <main+0x68>)
 8001d92:	f7ff fa63 	bl	800125c <xTaskCreate>
  osKernelStart();
 8001d96:	f7ff f8c7 	bl	8000f28 <osKernelStart>
 8001d9a:	e7fe      	b.n	8001d9a <main+0x52>
 8001d9c:	08001f5c 	.word	0x08001f5c
 8001da0:	20003d74 	.word	0x20003d74
 8001da4:	08001fa0 	.word	0x08001fa0
 8001da8:	08001b95 	.word	0x08001b95
 8001dac:	08001fa8 	.word	0x08001fa8
 8001db0:	08001bb1 	.word	0x08001bb1

08001db4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001db4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001db6:	2003      	movs	r0, #3
 8001db8:	f7fe fbda 	bl	8000570 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	4611      	mov	r1, r2
 8001dc0:	f06f 000b 	mvn.w	r0, #11
 8001dc4:	f7fe fbe6 	bl	8000594 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8001dc8:	2200      	movs	r2, #0
 8001dca:	4611      	mov	r1, r2
 8001dcc:	f06f 000a 	mvn.w	r0, #10
 8001dd0:	f7fe fbe0 	bl	8000594 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	4611      	mov	r1, r2
 8001dd8:	f06f 0009 	mvn.w	r0, #9
 8001ddc:	f7fe fbda 	bl	8000594 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8001de0:	2200      	movs	r2, #0
 8001de2:	4611      	mov	r1, r2
 8001de4:	f06f 0004 	mvn.w	r0, #4
 8001de8:	f7fe fbd4 	bl	8000594 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8001dec:	2200      	movs	r2, #0
 8001dee:	4611      	mov	r1, r2
 8001df0:	f06f 0003 	mvn.w	r0, #3
 8001df4:	f7fe fbce 	bl	8000594 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001df8:	2200      	movs	r2, #0
 8001dfa:	210f      	movs	r1, #15
 8001dfc:	f06f 0001 	mvn.w	r0, #1
 8001e00:	f7fe fbc8 	bl	8000594 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);
 8001e04:	2200      	movs	r2, #0
 8001e06:	210f      	movs	r1, #15
 8001e08:	f04f 30ff 	mov.w	r0, #4294967295
 8001e0c:	f7fe fbc2 	bl	8000594 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e10:	bd08      	pop	{r3, pc}
	...

08001e14 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{

  if(htim_base->Instance==TIM6)
 8001e14:	6802      	ldr	r2, [r0, #0]
 8001e16:	4b09      	ldr	r3, [pc, #36]	; (8001e3c <HAL_TIM_Base_MspInit+0x28>)
 8001e18:	429a      	cmp	r2, r3
 8001e1a:	d000      	beq.n	8001e1e <HAL_TIM_Base_MspInit+0xa>
 8001e1c:	4770      	bx	lr
{
 8001e1e:	b082      	sub	sp, #8
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001e20:	2300      	movs	r3, #0
 8001e22:	9301      	str	r3, [sp, #4]
 8001e24:	4b06      	ldr	r3, [pc, #24]	; (8001e40 <HAL_TIM_Base_MspInit+0x2c>)
 8001e26:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001e28:	f042 0210 	orr.w	r2, r2, #16
 8001e2c:	641a      	str	r2, [r3, #64]	; 0x40
 8001e2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e30:	f003 0310 	and.w	r3, r3, #16
 8001e34:	9301      	str	r3, [sp, #4]
 8001e36:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8001e38:	b002      	add	sp, #8
 8001e3a:	4770      	bx	lr
 8001e3c:	40001000 	.word	0x40001000
 8001e40:	40023800 	.word	0x40023800

08001e44 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001e44:	4770      	bx	lr

08001e46 <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 8001e46:	e7fe      	b.n	8001e46 <HardFault_Handler>

08001e48 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 8001e48:	e7fe      	b.n	8001e48 <MemManage_Handler>

08001e4a <BusFault_Handler>:

/**
* @brief This function handles Pre-fetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 8001e4a:	e7fe      	b.n	8001e4a <BusFault_Handler>

08001e4c <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 8001e4c:	e7fe      	b.n	8001e4c <UsageFault_Handler>

08001e4e <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e4e:	4770      	bx	lr

08001e50 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8001e50:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e52:	f7fe fb6d 	bl	8000530 <HAL_IncTick>
  osSystickHandler();
 8001e56:	f7ff f88f 	bl	8000f78 <osSystickHandler>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e5a:	bd08      	pop	{r3, pc}

08001e5c <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001e5c:	490f      	ldr	r1, [pc, #60]	; (8001e9c <SystemInit+0x40>)
 8001e5e:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8001e62:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001e66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001e6a:	4b0d      	ldr	r3, [pc, #52]	; (8001ea0 <SystemInit+0x44>)
 8001e6c:	681a      	ldr	r2, [r3, #0]
 8001e6e:	f042 0201 	orr.w	r2, r2, #1
 8001e72:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001e74:	2000      	movs	r0, #0
 8001e76:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001e78:	681a      	ldr	r2, [r3, #0]
 8001e7a:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8001e7e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001e82:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8001e84:	4a07      	ldr	r2, [pc, #28]	; (8001ea4 <SystemInit+0x48>)
 8001e86:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001e88:	681a      	ldr	r2, [r3, #0]
 8001e8a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001e8e:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001e90:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001e92:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8001e96:	608b      	str	r3, [r1, #8]
#endif
}
 8001e98:	4770      	bx	lr
 8001e9a:	bf00      	nop
 8001e9c:	e000ed00 	.word	0xe000ed00
 8001ea0:	40023800 	.word	0x40023800
 8001ea4:	24003010 	.word	0x24003010

08001ea8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001ea8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ee0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001eac:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001eae:	e003      	b.n	8001eb8 <LoopCopyDataInit>

08001eb0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001eb0:	4b0c      	ldr	r3, [pc, #48]	; (8001ee4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001eb2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001eb4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001eb6:	3104      	adds	r1, #4

08001eb8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001eb8:	480b      	ldr	r0, [pc, #44]	; (8001ee8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001eba:	4b0c      	ldr	r3, [pc, #48]	; (8001eec <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001ebc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001ebe:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001ec0:	d3f6      	bcc.n	8001eb0 <CopyDataInit>
  ldr  r2, =_sbss
 8001ec2:	4a0b      	ldr	r2, [pc, #44]	; (8001ef0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001ec4:	e002      	b.n	8001ecc <LoopFillZerobss>

08001ec6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001ec6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001ec8:	f842 3b04 	str.w	r3, [r2], #4

08001ecc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001ecc:	4b09      	ldr	r3, [pc, #36]	; (8001ef4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001ece:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001ed0:	d3f9      	bcc.n	8001ec6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001ed2:	f7ff ffc3 	bl	8001e5c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001ed6:	f000 f811 	bl	8001efc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001eda:	f7ff ff35 	bl	8001d48 <main>
  bx  lr    
 8001ede:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001ee0:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001ee4:	08001fcc 	.word	0x08001fcc
  ldr  r0, =_sdata
 8001ee8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001eec:	20000008 	.word	0x20000008
  ldr  r2, =_sbss
 8001ef0:	20000008 	.word	0x20000008
  ldr  r3, = _ebss
 8001ef4:	20003db4 	.word	0x20003db4

08001ef8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ef8:	e7fe      	b.n	8001ef8 <ADC_IRQHandler>
	...

08001efc <__libc_init_array>:
 8001efc:	b570      	push	{r4, r5, r6, lr}
 8001efe:	4e0d      	ldr	r6, [pc, #52]	; (8001f34 <__libc_init_array+0x38>)
 8001f00:	4c0d      	ldr	r4, [pc, #52]	; (8001f38 <__libc_init_array+0x3c>)
 8001f02:	1ba4      	subs	r4, r4, r6
 8001f04:	10a4      	asrs	r4, r4, #2
 8001f06:	2500      	movs	r5, #0
 8001f08:	42a5      	cmp	r5, r4
 8001f0a:	d109      	bne.n	8001f20 <__libc_init_array+0x24>
 8001f0c:	4e0b      	ldr	r6, [pc, #44]	; (8001f3c <__libc_init_array+0x40>)
 8001f0e:	4c0c      	ldr	r4, [pc, #48]	; (8001f40 <__libc_init_array+0x44>)
 8001f10:	f000 f818 	bl	8001f44 <_init>
 8001f14:	1ba4      	subs	r4, r4, r6
 8001f16:	10a4      	asrs	r4, r4, #2
 8001f18:	2500      	movs	r5, #0
 8001f1a:	42a5      	cmp	r5, r4
 8001f1c:	d105      	bne.n	8001f2a <__libc_init_array+0x2e>
 8001f1e:	bd70      	pop	{r4, r5, r6, pc}
 8001f20:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001f24:	4798      	blx	r3
 8001f26:	3501      	adds	r5, #1
 8001f28:	e7ee      	b.n	8001f08 <__libc_init_array+0xc>
 8001f2a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001f2e:	4798      	blx	r3
 8001f30:	3501      	adds	r5, #1
 8001f32:	e7f2      	b.n	8001f1a <__libc_init_array+0x1e>
 8001f34:	08001fc4 	.word	0x08001fc4
 8001f38:	08001fc4 	.word	0x08001fc4
 8001f3c:	08001fc4 	.word	0x08001fc4
 8001f40:	08001fc8 	.word	0x08001fc8

08001f44 <_init>:
 8001f44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f46:	bf00      	nop
 8001f48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001f4a:	bc08      	pop	{r3}
 8001f4c:	469e      	mov	lr, r3
 8001f4e:	4770      	bx	lr

08001f50 <_fini>:
 8001f50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f52:	bf00      	nop
 8001f54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001f56:	bc08      	pop	{r3}
 8001f58:	469e      	mov	lr, r3
 8001f5a:	4770      	bx	lr
