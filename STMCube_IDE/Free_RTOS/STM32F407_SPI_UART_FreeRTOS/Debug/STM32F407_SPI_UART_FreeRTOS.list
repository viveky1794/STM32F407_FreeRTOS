
STM32F407_SPI_UART_FreeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000025d0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000054  08002760  08002760  00012760  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080027b4  080027b4  000127b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080027bc  080027bc  000127bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080027c0  080027c0  000127c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000010  20000000  080027c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  00020010  2**0
                  CONTENTS
  8 .bss          00003e48  20000010  20000010  00020010  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  20003e58  20003e58  00020010  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 11 .debug_info   00015489  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00003047  00000000  00000000  000354c9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00009a56  00000000  00000000  00038510  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000e48  00000000  00000000  00041f68  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000011f8  00000000  00000000  00042db0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00022244  00000000  00000000  00043fa8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000cebf  00000000  00000000  000661ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d15dc  00000000  00000000  000730ab  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00144687  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002aa4  00000000  00000000  00144704  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000010 	.word	0x20000010
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08002748 	.word	0x08002748

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000014 	.word	0x20000014
 80001cc:	08002748 	.word	0x08002748

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b972 	b.w	80004cc <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9e08      	ldr	r6, [sp, #32]
 8000206:	4604      	mov	r4, r0
 8000208:	4688      	mov	r8, r1
 800020a:	2b00      	cmp	r3, #0
 800020c:	d14b      	bne.n	80002a6 <__udivmoddi4+0xa6>
 800020e:	428a      	cmp	r2, r1
 8000210:	4615      	mov	r5, r2
 8000212:	d967      	bls.n	80002e4 <__udivmoddi4+0xe4>
 8000214:	fab2 f282 	clz	r2, r2
 8000218:	b14a      	cbz	r2, 800022e <__udivmoddi4+0x2e>
 800021a:	f1c2 0720 	rsb	r7, r2, #32
 800021e:	fa01 f302 	lsl.w	r3, r1, r2
 8000222:	fa20 f707 	lsr.w	r7, r0, r7
 8000226:	4095      	lsls	r5, r2
 8000228:	ea47 0803 	orr.w	r8, r7, r3
 800022c:	4094      	lsls	r4, r2
 800022e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000232:	0c23      	lsrs	r3, r4, #16
 8000234:	fbb8 f7fe 	udiv	r7, r8, lr
 8000238:	fa1f fc85 	uxth.w	ip, r5
 800023c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000240:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000244:	fb07 f10c 	mul.w	r1, r7, ip
 8000248:	4299      	cmp	r1, r3
 800024a:	d909      	bls.n	8000260 <__udivmoddi4+0x60>
 800024c:	18eb      	adds	r3, r5, r3
 800024e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000252:	f080 811b 	bcs.w	800048c <__udivmoddi4+0x28c>
 8000256:	4299      	cmp	r1, r3
 8000258:	f240 8118 	bls.w	800048c <__udivmoddi4+0x28c>
 800025c:	3f02      	subs	r7, #2
 800025e:	442b      	add	r3, r5
 8000260:	1a5b      	subs	r3, r3, r1
 8000262:	b2a4      	uxth	r4, r4
 8000264:	fbb3 f0fe 	udiv	r0, r3, lr
 8000268:	fb0e 3310 	mls	r3, lr, r0, r3
 800026c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000270:	fb00 fc0c 	mul.w	ip, r0, ip
 8000274:	45a4      	cmp	ip, r4
 8000276:	d909      	bls.n	800028c <__udivmoddi4+0x8c>
 8000278:	192c      	adds	r4, r5, r4
 800027a:	f100 33ff 	add.w	r3, r0, #4294967295
 800027e:	f080 8107 	bcs.w	8000490 <__udivmoddi4+0x290>
 8000282:	45a4      	cmp	ip, r4
 8000284:	f240 8104 	bls.w	8000490 <__udivmoddi4+0x290>
 8000288:	3802      	subs	r0, #2
 800028a:	442c      	add	r4, r5
 800028c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000290:	eba4 040c 	sub.w	r4, r4, ip
 8000294:	2700      	movs	r7, #0
 8000296:	b11e      	cbz	r6, 80002a0 <__udivmoddi4+0xa0>
 8000298:	40d4      	lsrs	r4, r2
 800029a:	2300      	movs	r3, #0
 800029c:	e9c6 4300 	strd	r4, r3, [r6]
 80002a0:	4639      	mov	r1, r7
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	428b      	cmp	r3, r1
 80002a8:	d909      	bls.n	80002be <__udivmoddi4+0xbe>
 80002aa:	2e00      	cmp	r6, #0
 80002ac:	f000 80eb 	beq.w	8000486 <__udivmoddi4+0x286>
 80002b0:	2700      	movs	r7, #0
 80002b2:	e9c6 0100 	strd	r0, r1, [r6]
 80002b6:	4638      	mov	r0, r7
 80002b8:	4639      	mov	r1, r7
 80002ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002be:	fab3 f783 	clz	r7, r3
 80002c2:	2f00      	cmp	r7, #0
 80002c4:	d147      	bne.n	8000356 <__udivmoddi4+0x156>
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d302      	bcc.n	80002d0 <__udivmoddi4+0xd0>
 80002ca:	4282      	cmp	r2, r0
 80002cc:	f200 80fa 	bhi.w	80004c4 <__udivmoddi4+0x2c4>
 80002d0:	1a84      	subs	r4, r0, r2
 80002d2:	eb61 0303 	sbc.w	r3, r1, r3
 80002d6:	2001      	movs	r0, #1
 80002d8:	4698      	mov	r8, r3
 80002da:	2e00      	cmp	r6, #0
 80002dc:	d0e0      	beq.n	80002a0 <__udivmoddi4+0xa0>
 80002de:	e9c6 4800 	strd	r4, r8, [r6]
 80002e2:	e7dd      	b.n	80002a0 <__udivmoddi4+0xa0>
 80002e4:	b902      	cbnz	r2, 80002e8 <__udivmoddi4+0xe8>
 80002e6:	deff      	udf	#255	; 0xff
 80002e8:	fab2 f282 	clz	r2, r2
 80002ec:	2a00      	cmp	r2, #0
 80002ee:	f040 808f 	bne.w	8000410 <__udivmoddi4+0x210>
 80002f2:	1b49      	subs	r1, r1, r5
 80002f4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f8:	fa1f f885 	uxth.w	r8, r5
 80002fc:	2701      	movs	r7, #1
 80002fe:	fbb1 fcfe 	udiv	ip, r1, lr
 8000302:	0c23      	lsrs	r3, r4, #16
 8000304:	fb0e 111c 	mls	r1, lr, ip, r1
 8000308:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800030c:	fb08 f10c 	mul.w	r1, r8, ip
 8000310:	4299      	cmp	r1, r3
 8000312:	d907      	bls.n	8000324 <__udivmoddi4+0x124>
 8000314:	18eb      	adds	r3, r5, r3
 8000316:	f10c 30ff 	add.w	r0, ip, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x122>
 800031c:	4299      	cmp	r1, r3
 800031e:	f200 80cd 	bhi.w	80004bc <__udivmoddi4+0x2bc>
 8000322:	4684      	mov	ip, r0
 8000324:	1a59      	subs	r1, r3, r1
 8000326:	b2a3      	uxth	r3, r4
 8000328:	fbb1 f0fe 	udiv	r0, r1, lr
 800032c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000330:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000334:	fb08 f800 	mul.w	r8, r8, r0
 8000338:	45a0      	cmp	r8, r4
 800033a:	d907      	bls.n	800034c <__udivmoddi4+0x14c>
 800033c:	192c      	adds	r4, r5, r4
 800033e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x14a>
 8000344:	45a0      	cmp	r8, r4
 8000346:	f200 80b6 	bhi.w	80004b6 <__udivmoddi4+0x2b6>
 800034a:	4618      	mov	r0, r3
 800034c:	eba4 0408 	sub.w	r4, r4, r8
 8000350:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000354:	e79f      	b.n	8000296 <__udivmoddi4+0x96>
 8000356:	f1c7 0c20 	rsb	ip, r7, #32
 800035a:	40bb      	lsls	r3, r7
 800035c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000360:	ea4e 0e03 	orr.w	lr, lr, r3
 8000364:	fa01 f407 	lsl.w	r4, r1, r7
 8000368:	fa20 f50c 	lsr.w	r5, r0, ip
 800036c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000370:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000374:	4325      	orrs	r5, r4
 8000376:	fbb3 f9f8 	udiv	r9, r3, r8
 800037a:	0c2c      	lsrs	r4, r5, #16
 800037c:	fb08 3319 	mls	r3, r8, r9, r3
 8000380:	fa1f fa8e 	uxth.w	sl, lr
 8000384:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000388:	fb09 f40a 	mul.w	r4, r9, sl
 800038c:	429c      	cmp	r4, r3
 800038e:	fa02 f207 	lsl.w	r2, r2, r7
 8000392:	fa00 f107 	lsl.w	r1, r0, r7
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b0>
 8000398:	eb1e 0303 	adds.w	r3, lr, r3
 800039c:	f109 30ff 	add.w	r0, r9, #4294967295
 80003a0:	f080 8087 	bcs.w	80004b2 <__udivmoddi4+0x2b2>
 80003a4:	429c      	cmp	r4, r3
 80003a6:	f240 8084 	bls.w	80004b2 <__udivmoddi4+0x2b2>
 80003aa:	f1a9 0902 	sub.w	r9, r9, #2
 80003ae:	4473      	add	r3, lr
 80003b0:	1b1b      	subs	r3, r3, r4
 80003b2:	b2ad      	uxth	r5, r5
 80003b4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b8:	fb08 3310 	mls	r3, r8, r0, r3
 80003bc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003c0:	fb00 fa0a 	mul.w	sl, r0, sl
 80003c4:	45a2      	cmp	sl, r4
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1da>
 80003c8:	eb1e 0404 	adds.w	r4, lr, r4
 80003cc:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d0:	d26b      	bcs.n	80004aa <__udivmoddi4+0x2aa>
 80003d2:	45a2      	cmp	sl, r4
 80003d4:	d969      	bls.n	80004aa <__udivmoddi4+0x2aa>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4474      	add	r4, lr
 80003da:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003de:	fba0 8902 	umull	r8, r9, r0, r2
 80003e2:	eba4 040a 	sub.w	r4, r4, sl
 80003e6:	454c      	cmp	r4, r9
 80003e8:	46c2      	mov	sl, r8
 80003ea:	464b      	mov	r3, r9
 80003ec:	d354      	bcc.n	8000498 <__udivmoddi4+0x298>
 80003ee:	d051      	beq.n	8000494 <__udivmoddi4+0x294>
 80003f0:	2e00      	cmp	r6, #0
 80003f2:	d069      	beq.n	80004c8 <__udivmoddi4+0x2c8>
 80003f4:	ebb1 050a 	subs.w	r5, r1, sl
 80003f8:	eb64 0403 	sbc.w	r4, r4, r3
 80003fc:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000400:	40fd      	lsrs	r5, r7
 8000402:	40fc      	lsrs	r4, r7
 8000404:	ea4c 0505 	orr.w	r5, ip, r5
 8000408:	e9c6 5400 	strd	r5, r4, [r6]
 800040c:	2700      	movs	r7, #0
 800040e:	e747      	b.n	80002a0 <__udivmoddi4+0xa0>
 8000410:	f1c2 0320 	rsb	r3, r2, #32
 8000414:	fa20 f703 	lsr.w	r7, r0, r3
 8000418:	4095      	lsls	r5, r2
 800041a:	fa01 f002 	lsl.w	r0, r1, r2
 800041e:	fa21 f303 	lsr.w	r3, r1, r3
 8000422:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000426:	4338      	orrs	r0, r7
 8000428:	0c01      	lsrs	r1, r0, #16
 800042a:	fbb3 f7fe 	udiv	r7, r3, lr
 800042e:	fa1f f885 	uxth.w	r8, r5
 8000432:	fb0e 3317 	mls	r3, lr, r7, r3
 8000436:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800043a:	fb07 f308 	mul.w	r3, r7, r8
 800043e:	428b      	cmp	r3, r1
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d907      	bls.n	8000456 <__udivmoddi4+0x256>
 8000446:	1869      	adds	r1, r5, r1
 8000448:	f107 3cff 	add.w	ip, r7, #4294967295
 800044c:	d22f      	bcs.n	80004ae <__udivmoddi4+0x2ae>
 800044e:	428b      	cmp	r3, r1
 8000450:	d92d      	bls.n	80004ae <__udivmoddi4+0x2ae>
 8000452:	3f02      	subs	r7, #2
 8000454:	4429      	add	r1, r5
 8000456:	1acb      	subs	r3, r1, r3
 8000458:	b281      	uxth	r1, r0
 800045a:	fbb3 f0fe 	udiv	r0, r3, lr
 800045e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000462:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000466:	fb00 f308 	mul.w	r3, r0, r8
 800046a:	428b      	cmp	r3, r1
 800046c:	d907      	bls.n	800047e <__udivmoddi4+0x27e>
 800046e:	1869      	adds	r1, r5, r1
 8000470:	f100 3cff 	add.w	ip, r0, #4294967295
 8000474:	d217      	bcs.n	80004a6 <__udivmoddi4+0x2a6>
 8000476:	428b      	cmp	r3, r1
 8000478:	d915      	bls.n	80004a6 <__udivmoddi4+0x2a6>
 800047a:	3802      	subs	r0, #2
 800047c:	4429      	add	r1, r5
 800047e:	1ac9      	subs	r1, r1, r3
 8000480:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000484:	e73b      	b.n	80002fe <__udivmoddi4+0xfe>
 8000486:	4637      	mov	r7, r6
 8000488:	4630      	mov	r0, r6
 800048a:	e709      	b.n	80002a0 <__udivmoddi4+0xa0>
 800048c:	4607      	mov	r7, r0
 800048e:	e6e7      	b.n	8000260 <__udivmoddi4+0x60>
 8000490:	4618      	mov	r0, r3
 8000492:	e6fb      	b.n	800028c <__udivmoddi4+0x8c>
 8000494:	4541      	cmp	r1, r8
 8000496:	d2ab      	bcs.n	80003f0 <__udivmoddi4+0x1f0>
 8000498:	ebb8 0a02 	subs.w	sl, r8, r2
 800049c:	eb69 020e 	sbc.w	r2, r9, lr
 80004a0:	3801      	subs	r0, #1
 80004a2:	4613      	mov	r3, r2
 80004a4:	e7a4      	b.n	80003f0 <__udivmoddi4+0x1f0>
 80004a6:	4660      	mov	r0, ip
 80004a8:	e7e9      	b.n	800047e <__udivmoddi4+0x27e>
 80004aa:	4618      	mov	r0, r3
 80004ac:	e795      	b.n	80003da <__udivmoddi4+0x1da>
 80004ae:	4667      	mov	r7, ip
 80004b0:	e7d1      	b.n	8000456 <__udivmoddi4+0x256>
 80004b2:	4681      	mov	r9, r0
 80004b4:	e77c      	b.n	80003b0 <__udivmoddi4+0x1b0>
 80004b6:	3802      	subs	r0, #2
 80004b8:	442c      	add	r4, r5
 80004ba:	e747      	b.n	800034c <__udivmoddi4+0x14c>
 80004bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c0:	442b      	add	r3, r5
 80004c2:	e72f      	b.n	8000324 <__udivmoddi4+0x124>
 80004c4:	4638      	mov	r0, r7
 80004c6:	e708      	b.n	80002da <__udivmoddi4+0xda>
 80004c8:	4637      	mov	r7, r6
 80004ca:	e6e9      	b.n	80002a0 <__udivmoddi4+0xa0>

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80004d0:	b508      	push	{r3, lr}
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80004d2:	4b0b      	ldr	r3, [pc, #44]	; (8000500 <HAL_Init+0x30>)
 80004d4:	681a      	ldr	r2, [r3, #0]
 80004d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80004da:	601a      	str	r2, [r3, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80004dc:	681a      	ldr	r2, [r3, #0]
 80004de:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80004e2:	601a      	str	r2, [r3, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80004e4:	681a      	ldr	r2, [r3, #0]
 80004e6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80004ea:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80004ec:	2003      	movs	r0, #3
 80004ee:	f000 f81b 	bl	8000528 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80004f2:	2000      	movs	r0, #0
 80004f4:	f002 f878 	bl	80025e8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80004f8:	f001 fff8 	bl	80024ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 80004fc:	2000      	movs	r0, #0
 80004fe:	bd08      	pop	{r3, pc}
 8000500:	40023c00 	.word	0x40023c00

08000504 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000504:	4a03      	ldr	r2, [pc, #12]	; (8000514 <HAL_IncTick+0x10>)
 8000506:	4b04      	ldr	r3, [pc, #16]	; (8000518 <HAL_IncTick+0x14>)
 8000508:	6811      	ldr	r1, [r2, #0]
 800050a:	781b      	ldrb	r3, [r3, #0]
 800050c:	440b      	add	r3, r1
 800050e:	6013      	str	r3, [r2, #0]
}
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop
 8000514:	20003d78 	.word	0x20003d78
 8000518:	20000000 	.word	0x20000000

0800051c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800051c:	4b01      	ldr	r3, [pc, #4]	; (8000524 <HAL_GetTick+0x8>)
 800051e:	6818      	ldr	r0, [r3, #0]
}
 8000520:	4770      	bx	lr
 8000522:	bf00      	nop
 8000524:	20003d78 	.word	0x20003d78

08000528 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000528:	4a07      	ldr	r2, [pc, #28]	; (8000548 <HAL_NVIC_SetPriorityGrouping+0x20>)
 800052a:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800052c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000530:	041b      	lsls	r3, r3, #16
 8000532:	0c1b      	lsrs	r3, r3, #16
 8000534:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000538:	0200      	lsls	r0, r0, #8
 800053a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800053e:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 8000542:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000544:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8000546:	4770      	bx	lr
 8000548:	e000ed00 	.word	0xe000ed00

0800054c <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800054c:	4b17      	ldr	r3, [pc, #92]	; (80005ac <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800054e:	b570      	push	{r4, r5, r6, lr}
 8000550:	68dc      	ldr	r4, [r3, #12]
 8000552:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000556:	f1c4 0507 	rsb	r5, r4, #7
 800055a:	2d04      	cmp	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800055c:	f104 0304 	add.w	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000560:	bf28      	it	cs
 8000562:	2504      	movcs	r5, #4

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000564:	f04f 36ff 	mov.w	r6, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000568:	2b06      	cmp	r3, #6
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800056a:	fa06 f305 	lsl.w	r3, r6, r5
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800056e:	bf8c      	ite	hi
 8000570:	3c03      	subhi	r4, #3
 8000572:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000574:	ea21 0303 	bic.w	r3, r1, r3
 8000578:	40a3      	lsls	r3, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800057a:	fa06 f404 	lsl.w	r4, r6, r4
 800057e:	ea22 0404 	bic.w	r4, r2, r4
  if ((int32_t)(IRQn) >= 0)
 8000582:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000584:	ea43 0304 	orr.w	r3, r3, r4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000588:	bfa8      	it	ge
 800058a:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
 800058e:	ea4f 1303 	mov.w	r3, r3, lsl #4
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000592:	bfbc      	itt	lt
 8000594:	f000 000f 	andlt.w	r0, r0, #15
 8000598:	4a05      	ldrlt	r2, [pc, #20]	; (80005b0 <HAL_NVIC_SetPriority+0x64>)
 800059a:	b2db      	uxtb	r3, r3
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800059c:	bfaa      	itet	ge
 800059e:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005a2:	5413      	strblt	r3, [r2, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005a4:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80005a8:	bd70      	pop	{r4, r5, r6, pc}
 80005aa:	bf00      	nop
 80005ac:	e000ed00 	.word	0xe000ed00
 80005b0:	e000ed14 	.word	0xe000ed14

080005b4 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80005b4:	2800      	cmp	r0, #0
 80005b6:	db08      	blt.n	80005ca <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80005b8:	0942      	lsrs	r2, r0, #5
 80005ba:	2301      	movs	r3, #1
 80005bc:	f000 001f 	and.w	r0, r0, #31
 80005c0:	fa03 f000 	lsl.w	r0, r3, r0
 80005c4:	4b01      	ldr	r3, [pc, #4]	; (80005cc <HAL_NVIC_EnableIRQ+0x18>)
 80005c6:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80005ca:	4770      	bx	lr
 80005cc:	e000e100 	.word	0xe000e100

080005d0 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80005d0:	3801      	subs	r0, #1
 80005d2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80005d6:	d20a      	bcs.n	80005ee <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80005d8:	4b06      	ldr	r3, [pc, #24]	; (80005f4 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005da:	4a07      	ldr	r2, [pc, #28]	; (80005f8 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80005dc:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005de:	21f0      	movs	r1, #240	; 0xf0
 80005e0:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80005e4:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80005e6:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80005e8:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80005ea:	601a      	str	r2, [r3, #0]
 80005ec:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80005ee:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80005f0:	4770      	bx	lr
 80005f2:	bf00      	nop
 80005f4:	e000e010 	.word	0xe000e010
 80005f8:	e000ed00 	.word	0xe000ed00

080005fc <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80005fc:	4b04      	ldr	r3, [pc, #16]	; (8000610 <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80005fe:	681a      	ldr	r2, [r3, #0]
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000600:	2804      	cmp	r0, #4
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000602:	bf0c      	ite	eq
 8000604:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000608:	f022 0204 	bicne.w	r2, r2, #4
 800060c:	601a      	str	r2, [r3, #0]
  }
}
 800060e:	4770      	bx	lr
 8000610:	e000e010 	.word	0xe000e010

08000614 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000614:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000618:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800061a:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800061c:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 80007cc <HAL_GPIO_Init+0x1b8>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000620:	4a68      	ldr	r2, [pc, #416]	; (80007c4 <HAL_GPIO_Init+0x1b0>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000622:	f8df 91ac 	ldr.w	r9, [pc, #428]	; 80007d0 <HAL_GPIO_Init+0x1bc>
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000626:	9301      	str	r3, [sp, #4]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000628:	2300      	movs	r3, #0
    ioposition = 0x01U << position;
 800062a:	2401      	movs	r4, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800062c:	9d01      	ldr	r5, [sp, #4]
    ioposition = 0x01U << position;
 800062e:	409c      	lsls	r4, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000630:	4025      	ands	r5, r4
    if(iocurrent == ioposition)
 8000632:	42ac      	cmp	r4, r5
 8000634:	f040 80b0 	bne.w	8000798 <HAL_GPIO_Init+0x184>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000638:	684c      	ldr	r4, [r1, #4]
 800063a:	f024 0c10 	bic.w	ip, r4, #16
 800063e:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8000642:	2603      	movs	r6, #3
 8000644:	f10c 37ff 	add.w	r7, ip, #4294967295
 8000648:	fa06 f60e 	lsl.w	r6, r6, lr
 800064c:	2f01      	cmp	r7, #1
 800064e:	ea6f 0606 	mvn.w	r6, r6
 8000652:	d811      	bhi.n	8000678 <HAL_GPIO_Init+0x64>
        temp = GPIOx->OSPEEDR; 
 8000654:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000656:	ea07 0a06 	and.w	sl, r7, r6
        temp |= (GPIO_Init->Speed << (position * 2U));
 800065a:	68cf      	ldr	r7, [r1, #12]
 800065c:	fa07 f70e 	lsl.w	r7, r7, lr
 8000660:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OSPEEDR = temp;
 8000664:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8000666:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000668:	ea27 0a05 	bic.w	sl, r7, r5
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800066c:	f3c4 1700 	ubfx	r7, r4, #4, #1
 8000670:	409f      	lsls	r7, r3
 8000672:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OTYPER = temp;
 8000676:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8000678:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800067a:	ea07 0a06 	and.w	sl, r7, r6
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800067e:	688f      	ldr	r7, [r1, #8]
 8000680:	fa07 f70e 	lsl.w	r7, r7, lr
 8000684:	ea47 070a 	orr.w	r7, r7, sl
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000688:	f1bc 0f02 	cmp.w	ip, #2
      GPIOx->PUPDR = temp;
 800068c:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800068e:	d116      	bne.n	80006be <HAL_GPIO_Init+0xaa>
        temp = GPIOx->AFR[position >> 3U];
 8000690:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 8000694:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000698:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 800069c:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80006a0:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 80006a4:	f04f 0c0f 	mov.w	ip, #15
 80006a8:	fa0c fc0b 	lsl.w	ip, ip, fp
 80006ac:	ea27 0c0c 	bic.w	ip, r7, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80006b0:	690f      	ldr	r7, [r1, #16]
 80006b2:	fa07 f70b 	lsl.w	r7, r7, fp
 80006b6:	ea47 070c 	orr.w	r7, r7, ip
        GPIOx->AFR[position >> 3U] = temp;
 80006ba:	f8ca 7020 	str.w	r7, [sl, #32]
      temp = GPIOx->MODER;
 80006be:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80006c0:	403e      	ands	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80006c2:	f004 0703 	and.w	r7, r4, #3
 80006c6:	fa07 fe0e 	lsl.w	lr, r7, lr
 80006ca:	ea4e 0606 	orr.w	r6, lr, r6
      GPIOx->MODER = temp;
 80006ce:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80006d0:	00e6      	lsls	r6, r4, #3
 80006d2:	d561      	bpl.n	8000798 <HAL_GPIO_Init+0x184>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006d4:	f04f 0b00 	mov.w	fp, #0
 80006d8:	f8cd b00c 	str.w	fp, [sp, #12]
 80006dc:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80006e0:	4e39      	ldr	r6, [pc, #228]	; (80007c8 <HAL_GPIO_Init+0x1b4>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006e2:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 80006e6:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 80006ea:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 80006ee:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 80006f2:	9703      	str	r7, [sp, #12]
 80006f4:	9f03      	ldr	r7, [sp, #12]
 80006f6:	f023 0703 	bic.w	r7, r3, #3
 80006fa:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 80006fe:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000702:	f003 0e03 	and.w	lr, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 8000706:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800070a:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 800070e:	f04f 0c0f 	mov.w	ip, #15
 8000712:	fa0c fc0e 	lsl.w	ip, ip, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000716:	42b0      	cmp	r0, r6
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000718:	ea2a 0c0c 	bic.w	ip, sl, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800071c:	d043      	beq.n	80007a6 <HAL_GPIO_Init+0x192>
 800071e:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000722:	42b0      	cmp	r0, r6
 8000724:	d041      	beq.n	80007aa <HAL_GPIO_Init+0x196>
 8000726:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800072a:	42b0      	cmp	r0, r6
 800072c:	d03f      	beq.n	80007ae <HAL_GPIO_Init+0x19a>
 800072e:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000732:	42b0      	cmp	r0, r6
 8000734:	d03d      	beq.n	80007b2 <HAL_GPIO_Init+0x19e>
 8000736:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800073a:	42b0      	cmp	r0, r6
 800073c:	d03b      	beq.n	80007b6 <HAL_GPIO_Init+0x1a2>
 800073e:	4548      	cmp	r0, r9
 8000740:	d03b      	beq.n	80007ba <HAL_GPIO_Init+0x1a6>
 8000742:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 8000746:	42b0      	cmp	r0, r6
 8000748:	d039      	beq.n	80007be <HAL_GPIO_Init+0x1aa>
 800074a:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800074e:	42b0      	cmp	r0, r6
 8000750:	bf14      	ite	ne
 8000752:	2608      	movne	r6, #8
 8000754:	2607      	moveq	r6, #7
 8000756:	fa06 f60e 	lsl.w	r6, r6, lr
 800075a:	ea46 060c 	orr.w	r6, r6, ip
        SYSCFG->EXTICR[position >> 2U] = temp;
 800075e:	60be      	str	r6, [r7, #8]
        temp = EXTI->IMR;
 8000760:	6816      	ldr	r6, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8000762:	43ef      	mvns	r7, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000764:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 8000768:	bf0c      	ite	eq
 800076a:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 800076c:	432e      	orrne	r6, r5
        }
        EXTI->IMR = temp;
 800076e:	6016      	str	r6, [r2, #0]

        temp = EXTI->EMR;
 8000770:	6856      	ldr	r6, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000772:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 8000776:	bf0c      	ite	eq
 8000778:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 800077a:	432e      	orrne	r6, r5
        }
        EXTI->EMR = temp;
 800077c:	6056      	str	r6, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800077e:	6896      	ldr	r6, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000780:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 8000784:	bf0c      	ite	eq
 8000786:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 8000788:	432e      	orrne	r6, r5
        }
        EXTI->RTSR = temp;
 800078a:	6096      	str	r6, [r2, #8]

        temp = EXTI->FTSR;
 800078c:	68d6      	ldr	r6, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800078e:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 8000790:	bf54      	ite	pl
 8000792:	403e      	andpl	r6, r7
        {
          temp |= iocurrent;
 8000794:	432e      	orrmi	r6, r5
        }
        EXTI->FTSR = temp;
 8000796:	60d6      	str	r6, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000798:	3301      	adds	r3, #1
 800079a:	2b10      	cmp	r3, #16
 800079c:	f47f af45 	bne.w	800062a <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 80007a0:	b005      	add	sp, #20
 80007a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80007a6:	465e      	mov	r6, fp
 80007a8:	e7d5      	b.n	8000756 <HAL_GPIO_Init+0x142>
 80007aa:	2601      	movs	r6, #1
 80007ac:	e7d3      	b.n	8000756 <HAL_GPIO_Init+0x142>
 80007ae:	2602      	movs	r6, #2
 80007b0:	e7d1      	b.n	8000756 <HAL_GPIO_Init+0x142>
 80007b2:	2603      	movs	r6, #3
 80007b4:	e7cf      	b.n	8000756 <HAL_GPIO_Init+0x142>
 80007b6:	2604      	movs	r6, #4
 80007b8:	e7cd      	b.n	8000756 <HAL_GPIO_Init+0x142>
 80007ba:	2605      	movs	r6, #5
 80007bc:	e7cb      	b.n	8000756 <HAL_GPIO_Init+0x142>
 80007be:	2606      	movs	r6, #6
 80007c0:	e7c9      	b.n	8000756 <HAL_GPIO_Init+0x142>
 80007c2:	bf00      	nop
 80007c4:	40013c00 	.word	0x40013c00
 80007c8:	40020000 	.word	0x40020000
 80007cc:	40023800 	.word	0x40023800
 80007d0:	40021400 	.word	0x40021400

080007d4 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80007d4:	b10a      	cbz	r2, 80007da <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80007d6:	6181      	str	r1, [r0, #24]
  }
}
 80007d8:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80007da:	0409      	lsls	r1, r1, #16
 80007dc:	e7fb      	b.n	80007d6 <HAL_GPIO_WritePin+0x2>
	...

080007e0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80007e0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80007e4:	4604      	mov	r4, r0
 80007e6:	b908      	cbnz	r0, 80007ec <HAL_RCC_OscConfig+0xc>
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
      {
        return HAL_ERROR;
 80007e8:	2001      	movs	r0, #1
 80007ea:	e03f      	b.n	800086c <HAL_RCC_OscConfig+0x8c>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80007ec:	6803      	ldr	r3, [r0, #0]
 80007ee:	07dd      	lsls	r5, r3, #31
 80007f0:	d410      	bmi.n	8000814 <HAL_RCC_OscConfig+0x34>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80007f2:	6823      	ldr	r3, [r4, #0]
 80007f4:	0798      	lsls	r0, r3, #30
 80007f6:	d45a      	bmi.n	80008ae <HAL_RCC_OscConfig+0xce>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80007f8:	6823      	ldr	r3, [r4, #0]
 80007fa:	071a      	lsls	r2, r3, #28
 80007fc:	f100 809c 	bmi.w	8000938 <HAL_RCC_OscConfig+0x158>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000800:	6823      	ldr	r3, [r4, #0]
 8000802:	075b      	lsls	r3, r3, #29
 8000804:	f100 80ba 	bmi.w	800097c <HAL_RCC_OscConfig+0x19c>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000808:	69a0      	ldr	r0, [r4, #24]
 800080a:	2800      	cmp	r0, #0
 800080c:	f040 811b 	bne.w	8000a46 <HAL_RCC_OscConfig+0x266>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8000810:	2000      	movs	r0, #0
 8000812:	e02b      	b.n	800086c <HAL_RCC_OscConfig+0x8c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000814:	4ba7      	ldr	r3, [pc, #668]	; (8000ab4 <HAL_RCC_OscConfig+0x2d4>)
 8000816:	689a      	ldr	r2, [r3, #8]
 8000818:	f002 020c 	and.w	r2, r2, #12
 800081c:	2a04      	cmp	r2, #4
 800081e:	d007      	beq.n	8000830 <HAL_RCC_OscConfig+0x50>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000820:	689a      	ldr	r2, [r3, #8]
 8000822:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000826:	2a08      	cmp	r2, #8
 8000828:	d10a      	bne.n	8000840 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800082a:	685b      	ldr	r3, [r3, #4]
 800082c:	0259      	lsls	r1, r3, #9
 800082e:	d507      	bpl.n	8000840 <HAL_RCC_OscConfig+0x60>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000830:	4ba0      	ldr	r3, [pc, #640]	; (8000ab4 <HAL_RCC_OscConfig+0x2d4>)
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	039a      	lsls	r2, r3, #14
 8000836:	d5dc      	bpl.n	80007f2 <HAL_RCC_OscConfig+0x12>
 8000838:	6863      	ldr	r3, [r4, #4]
 800083a:	2b00      	cmp	r3, #0
 800083c:	d1d9      	bne.n	80007f2 <HAL_RCC_OscConfig+0x12>
 800083e:	e7d3      	b.n	80007e8 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000840:	6863      	ldr	r3, [r4, #4]
 8000842:	4d9c      	ldr	r5, [pc, #624]	; (8000ab4 <HAL_RCC_OscConfig+0x2d4>)
 8000844:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000848:	d113      	bne.n	8000872 <HAL_RCC_OscConfig+0x92>
 800084a:	682b      	ldr	r3, [r5, #0]
 800084c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000850:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000852:	f7ff fe63 	bl	800051c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000856:	4d97      	ldr	r5, [pc, #604]	; (8000ab4 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 8000858:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800085a:	682b      	ldr	r3, [r5, #0]
 800085c:	039b      	lsls	r3, r3, #14
 800085e:	d4c8      	bmi.n	80007f2 <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000860:	f7ff fe5c 	bl	800051c <HAL_GetTick>
 8000864:	1b80      	subs	r0, r0, r6
 8000866:	2864      	cmp	r0, #100	; 0x64
 8000868:	d9f7      	bls.n	800085a <HAL_RCC_OscConfig+0x7a>
            return HAL_TIMEOUT;
 800086a:	2003      	movs	r0, #3
}
 800086c:	b002      	add	sp, #8
 800086e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000872:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000876:	d104      	bne.n	8000882 <HAL_RCC_OscConfig+0xa2>
 8000878:	682b      	ldr	r3, [r5, #0]
 800087a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800087e:	602b      	str	r3, [r5, #0]
 8000880:	e7e3      	b.n	800084a <HAL_RCC_OscConfig+0x6a>
 8000882:	682a      	ldr	r2, [r5, #0]
 8000884:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000888:	602a      	str	r2, [r5, #0]
 800088a:	682a      	ldr	r2, [r5, #0]
 800088c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000890:	602a      	str	r2, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000892:	2b00      	cmp	r3, #0
 8000894:	d1dd      	bne.n	8000852 <HAL_RCC_OscConfig+0x72>
        tickstart = HAL_GetTick();
 8000896:	f7ff fe41 	bl	800051c <HAL_GetTick>
 800089a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800089c:	682b      	ldr	r3, [r5, #0]
 800089e:	039f      	lsls	r7, r3, #14
 80008a0:	d5a7      	bpl.n	80007f2 <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80008a2:	f7ff fe3b 	bl	800051c <HAL_GetTick>
 80008a6:	1b80      	subs	r0, r0, r6
 80008a8:	2864      	cmp	r0, #100	; 0x64
 80008aa:	d9f7      	bls.n	800089c <HAL_RCC_OscConfig+0xbc>
 80008ac:	e7dd      	b.n	800086a <HAL_RCC_OscConfig+0x8a>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80008ae:	4b81      	ldr	r3, [pc, #516]	; (8000ab4 <HAL_RCC_OscConfig+0x2d4>)
 80008b0:	689a      	ldr	r2, [r3, #8]
 80008b2:	f012 0f0c 	tst.w	r2, #12
 80008b6:	d007      	beq.n	80008c8 <HAL_RCC_OscConfig+0xe8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80008b8:	689a      	ldr	r2, [r3, #8]
 80008ba:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80008be:	2a08      	cmp	r2, #8
 80008c0:	d111      	bne.n	80008e6 <HAL_RCC_OscConfig+0x106>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80008c2:	685b      	ldr	r3, [r3, #4]
 80008c4:	025e      	lsls	r6, r3, #9
 80008c6:	d40e      	bmi.n	80008e6 <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80008c8:	4b7a      	ldr	r3, [pc, #488]	; (8000ab4 <HAL_RCC_OscConfig+0x2d4>)
 80008ca:	681a      	ldr	r2, [r3, #0]
 80008cc:	0795      	lsls	r5, r2, #30
 80008ce:	d502      	bpl.n	80008d6 <HAL_RCC_OscConfig+0xf6>
 80008d0:	68e2      	ldr	r2, [r4, #12]
 80008d2:	2a01      	cmp	r2, #1
 80008d4:	d188      	bne.n	80007e8 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80008d6:	681a      	ldr	r2, [r3, #0]
 80008d8:	6921      	ldr	r1, [r4, #16]
 80008da:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 80008de:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 80008e2:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80008e4:	e788      	b.n	80007f8 <HAL_RCC_OscConfig+0x18>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80008e6:	68e2      	ldr	r2, [r4, #12]
 80008e8:	4b73      	ldr	r3, [pc, #460]	; (8000ab8 <HAL_RCC_OscConfig+0x2d8>)
 80008ea:	b1b2      	cbz	r2, 800091a <HAL_RCC_OscConfig+0x13a>
        __HAL_RCC_HSI_ENABLE();
 80008ec:	2201      	movs	r2, #1
 80008ee:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80008f0:	f7ff fe14 	bl	800051c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80008f4:	4d6f      	ldr	r5, [pc, #444]	; (8000ab4 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 80008f6:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80008f8:	682b      	ldr	r3, [r5, #0]
 80008fa:	0798      	lsls	r0, r3, #30
 80008fc:	d507      	bpl.n	800090e <HAL_RCC_OscConfig+0x12e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80008fe:	682b      	ldr	r3, [r5, #0]
 8000900:	6922      	ldr	r2, [r4, #16]
 8000902:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000906:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800090a:	602b      	str	r3, [r5, #0]
 800090c:	e774      	b.n	80007f8 <HAL_RCC_OscConfig+0x18>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800090e:	f7ff fe05 	bl	800051c <HAL_GetTick>
 8000912:	1b80      	subs	r0, r0, r6
 8000914:	2802      	cmp	r0, #2
 8000916:	d9ef      	bls.n	80008f8 <HAL_RCC_OscConfig+0x118>
 8000918:	e7a7      	b.n	800086a <HAL_RCC_OscConfig+0x8a>
        __HAL_RCC_HSI_DISABLE();
 800091a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800091c:	f7ff fdfe 	bl	800051c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000920:	4d64      	ldr	r5, [pc, #400]	; (8000ab4 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 8000922:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000924:	682b      	ldr	r3, [r5, #0]
 8000926:	0799      	lsls	r1, r3, #30
 8000928:	f57f af66 	bpl.w	80007f8 <HAL_RCC_OscConfig+0x18>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800092c:	f7ff fdf6 	bl	800051c <HAL_GetTick>
 8000930:	1b80      	subs	r0, r0, r6
 8000932:	2802      	cmp	r0, #2
 8000934:	d9f6      	bls.n	8000924 <HAL_RCC_OscConfig+0x144>
 8000936:	e798      	b.n	800086a <HAL_RCC_OscConfig+0x8a>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000938:	6962      	ldr	r2, [r4, #20]
 800093a:	4b60      	ldr	r3, [pc, #384]	; (8000abc <HAL_RCC_OscConfig+0x2dc>)
 800093c:	b17a      	cbz	r2, 800095e <HAL_RCC_OscConfig+0x17e>
      __HAL_RCC_LSI_ENABLE();
 800093e:	2201      	movs	r2, #1
 8000940:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000942:	f7ff fdeb 	bl	800051c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000946:	4d5b      	ldr	r5, [pc, #364]	; (8000ab4 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 8000948:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800094a:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800094c:	079f      	lsls	r7, r3, #30
 800094e:	f53f af57 	bmi.w	8000800 <HAL_RCC_OscConfig+0x20>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000952:	f7ff fde3 	bl	800051c <HAL_GetTick>
 8000956:	1b80      	subs	r0, r0, r6
 8000958:	2802      	cmp	r0, #2
 800095a:	d9f6      	bls.n	800094a <HAL_RCC_OscConfig+0x16a>
 800095c:	e785      	b.n	800086a <HAL_RCC_OscConfig+0x8a>
      __HAL_RCC_LSI_DISABLE();
 800095e:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000960:	f7ff fddc 	bl	800051c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000964:	4d53      	ldr	r5, [pc, #332]	; (8000ab4 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 8000966:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000968:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800096a:	0798      	lsls	r0, r3, #30
 800096c:	f57f af48 	bpl.w	8000800 <HAL_RCC_OscConfig+0x20>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000970:	f7ff fdd4 	bl	800051c <HAL_GetTick>
 8000974:	1b80      	subs	r0, r0, r6
 8000976:	2802      	cmp	r0, #2
 8000978:	d9f6      	bls.n	8000968 <HAL_RCC_OscConfig+0x188>
 800097a:	e776      	b.n	800086a <HAL_RCC_OscConfig+0x8a>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800097c:	4b4d      	ldr	r3, [pc, #308]	; (8000ab4 <HAL_RCC_OscConfig+0x2d4>)
 800097e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000980:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 8000984:	d128      	bne.n	80009d8 <HAL_RCC_OscConfig+0x1f8>
      __HAL_RCC_PWR_CLK_ENABLE();
 8000986:	9201      	str	r2, [sp, #4]
 8000988:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800098a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800098e:	641a      	str	r2, [r3, #64]	; 0x40
 8000990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000992:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000996:	9301      	str	r3, [sp, #4]
 8000998:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800099a:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800099c:	4d48      	ldr	r5, [pc, #288]	; (8000ac0 <HAL_RCC_OscConfig+0x2e0>)
 800099e:	682b      	ldr	r3, [r5, #0]
 80009a0:	05d9      	lsls	r1, r3, #23
 80009a2:	d51b      	bpl.n	80009dc <HAL_RCC_OscConfig+0x1fc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80009a4:	68a3      	ldr	r3, [r4, #8]
 80009a6:	4d43      	ldr	r5, [pc, #268]	; (8000ab4 <HAL_RCC_OscConfig+0x2d4>)
 80009a8:	2b01      	cmp	r3, #1
 80009aa:	d127      	bne.n	80009fc <HAL_RCC_OscConfig+0x21c>
 80009ac:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80009ae:	f043 0301 	orr.w	r3, r3, #1
 80009b2:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 80009b4:	f7ff fdb2 	bl	800051c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80009b8:	4d3e      	ldr	r5, [pc, #248]	; (8000ab4 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 80009ba:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80009bc:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80009c0:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80009c2:	079b      	lsls	r3, r3, #30
 80009c4:	d539      	bpl.n	8000a3a <HAL_RCC_OscConfig+0x25a>
    if(pwrclkchanged == SET)
 80009c6:	2e00      	cmp	r6, #0
 80009c8:	f43f af1e 	beq.w	8000808 <HAL_RCC_OscConfig+0x28>
      __HAL_RCC_PWR_CLK_DISABLE();
 80009cc:	4a39      	ldr	r2, [pc, #228]	; (8000ab4 <HAL_RCC_OscConfig+0x2d4>)
 80009ce:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80009d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80009d4:	6413      	str	r3, [r2, #64]	; 0x40
 80009d6:	e717      	b.n	8000808 <HAL_RCC_OscConfig+0x28>
    FlagStatus       pwrclkchanged = RESET;
 80009d8:	2600      	movs	r6, #0
 80009da:	e7df      	b.n	800099c <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80009dc:	682b      	ldr	r3, [r5, #0]
 80009de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80009e2:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 80009e4:	f7ff fd9a 	bl	800051c <HAL_GetTick>
 80009e8:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80009ea:	682b      	ldr	r3, [r5, #0]
 80009ec:	05da      	lsls	r2, r3, #23
 80009ee:	d4d9      	bmi.n	80009a4 <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80009f0:	f7ff fd94 	bl	800051c <HAL_GetTick>
 80009f4:	1bc0      	subs	r0, r0, r7
 80009f6:	2802      	cmp	r0, #2
 80009f8:	d9f7      	bls.n	80009ea <HAL_RCC_OscConfig+0x20a>
 80009fa:	e736      	b.n	800086a <HAL_RCC_OscConfig+0x8a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80009fc:	2b05      	cmp	r3, #5
 80009fe:	d104      	bne.n	8000a0a <HAL_RCC_OscConfig+0x22a>
 8000a00:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000a02:	f043 0304 	orr.w	r3, r3, #4
 8000a06:	672b      	str	r3, [r5, #112]	; 0x70
 8000a08:	e7d0      	b.n	80009ac <HAL_RCC_OscConfig+0x1cc>
 8000a0a:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8000a0c:	f022 0201 	bic.w	r2, r2, #1
 8000a10:	672a      	str	r2, [r5, #112]	; 0x70
 8000a12:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8000a14:	f022 0204 	bic.w	r2, r2, #4
 8000a18:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d1ca      	bne.n	80009b4 <HAL_RCC_OscConfig+0x1d4>
      tickstart = HAL_GetTick();
 8000a1e:	f7ff fd7d 	bl	800051c <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000a22:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8000a26:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000a28:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000a2a:	0798      	lsls	r0, r3, #30
 8000a2c:	d5cb      	bpl.n	80009c6 <HAL_RCC_OscConfig+0x1e6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000a2e:	f7ff fd75 	bl	800051c <HAL_GetTick>
 8000a32:	1bc0      	subs	r0, r0, r7
 8000a34:	4540      	cmp	r0, r8
 8000a36:	d9f7      	bls.n	8000a28 <HAL_RCC_OscConfig+0x248>
 8000a38:	e717      	b.n	800086a <HAL_RCC_OscConfig+0x8a>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000a3a:	f7ff fd6f 	bl	800051c <HAL_GetTick>
 8000a3e:	1bc0      	subs	r0, r0, r7
 8000a40:	4540      	cmp	r0, r8
 8000a42:	d9bd      	bls.n	80009c0 <HAL_RCC_OscConfig+0x1e0>
 8000a44:	e711      	b.n	800086a <HAL_RCC_OscConfig+0x8a>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8000a46:	4d1b      	ldr	r5, [pc, #108]	; (8000ab4 <HAL_RCC_OscConfig+0x2d4>)
 8000a48:	68ab      	ldr	r3, [r5, #8]
 8000a4a:	f003 030c 	and.w	r3, r3, #12
 8000a4e:	2b08      	cmp	r3, #8
 8000a50:	d047      	beq.n	8000ae2 <HAL_RCC_OscConfig+0x302>
 8000a52:	4e1c      	ldr	r6, [pc, #112]	; (8000ac4 <HAL_RCC_OscConfig+0x2e4>)
 8000a54:	2300      	movs	r3, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000a56:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8000a58:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000a5a:	d135      	bne.n	8000ac8 <HAL_RCC_OscConfig+0x2e8>
        tickstart = HAL_GetTick();
 8000a5c:	f7ff fd5e 	bl	800051c <HAL_GetTick>
 8000a60:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000a62:	682b      	ldr	r3, [r5, #0]
 8000a64:	0199      	lsls	r1, r3, #6
 8000a66:	d41e      	bmi.n	8000aa6 <HAL_RCC_OscConfig+0x2c6>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000a68:	e9d4 3207 	ldrd	r3, r2, [r4, #28]
 8000a6c:	4313      	orrs	r3, r2
 8000a6e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000a70:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8000a74:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8000a76:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8000a7a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000a7c:	4c0d      	ldr	r4, [pc, #52]	; (8000ab4 <HAL_RCC_OscConfig+0x2d4>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000a7e:	0852      	lsrs	r2, r2, #1
 8000a80:	3a01      	subs	r2, #1
 8000a82:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000a86:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8000a88:	2301      	movs	r3, #1
 8000a8a:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8000a8c:	f7ff fd46 	bl	800051c <HAL_GetTick>
 8000a90:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000a92:	6823      	ldr	r3, [r4, #0]
 8000a94:	019a      	lsls	r2, r3, #6
 8000a96:	f53f aebb 	bmi.w	8000810 <HAL_RCC_OscConfig+0x30>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000a9a:	f7ff fd3f 	bl	800051c <HAL_GetTick>
 8000a9e:	1b40      	subs	r0, r0, r5
 8000aa0:	2802      	cmp	r0, #2
 8000aa2:	d9f6      	bls.n	8000a92 <HAL_RCC_OscConfig+0x2b2>
 8000aa4:	e6e1      	b.n	800086a <HAL_RCC_OscConfig+0x8a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000aa6:	f7ff fd39 	bl	800051c <HAL_GetTick>
 8000aaa:	1bc0      	subs	r0, r0, r7
 8000aac:	2802      	cmp	r0, #2
 8000aae:	d9d8      	bls.n	8000a62 <HAL_RCC_OscConfig+0x282>
 8000ab0:	e6db      	b.n	800086a <HAL_RCC_OscConfig+0x8a>
 8000ab2:	bf00      	nop
 8000ab4:	40023800 	.word	0x40023800
 8000ab8:	42470000 	.word	0x42470000
 8000abc:	42470e80 	.word	0x42470e80
 8000ac0:	40007000 	.word	0x40007000
 8000ac4:	42470060 	.word	0x42470060
        tickstart = HAL_GetTick();
 8000ac8:	f7ff fd28 	bl	800051c <HAL_GetTick>
 8000acc:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000ace:	682b      	ldr	r3, [r5, #0]
 8000ad0:	019b      	lsls	r3, r3, #6
 8000ad2:	f57f ae9d 	bpl.w	8000810 <HAL_RCC_OscConfig+0x30>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000ad6:	f7ff fd21 	bl	800051c <HAL_GetTick>
 8000ada:	1b00      	subs	r0, r0, r4
 8000adc:	2802      	cmp	r0, #2
 8000ade:	d9f6      	bls.n	8000ace <HAL_RCC_OscConfig+0x2ee>
 8000ae0:	e6c3      	b.n	800086a <HAL_RCC_OscConfig+0x8a>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000ae2:	2801      	cmp	r0, #1
 8000ae4:	f43f aec2 	beq.w	800086c <HAL_RCC_OscConfig+0x8c>
        pll_config = RCC->PLLCFGR;
 8000ae8:	6868      	ldr	r0, [r5, #4]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000aea:	69e3      	ldr	r3, [r4, #28]
 8000aec:	f400 0280 	and.w	r2, r0, #4194304	; 0x400000
 8000af0:	429a      	cmp	r2, r3
 8000af2:	f47f ae79 	bne.w	80007e8 <HAL_RCC_OscConfig+0x8>
 8000af6:	6a22      	ldr	r2, [r4, #32]
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8000af8:	f000 033f 	and.w	r3, r0, #63	; 0x3f
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000afc:	4293      	cmp	r3, r2
 8000afe:	f47f ae73 	bne.w	80007e8 <HAL_RCC_OscConfig+0x8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8000b02:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000b04:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8000b08:	4003      	ands	r3, r0
 8000b0a:	4293      	cmp	r3, r2
 8000b0c:	f47f ae6c 	bne.w	80007e8 <HAL_RCC_OscConfig+0x8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8000b10:	6aa2      	ldr	r2, [r4, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8000b12:	f400 3340 	and.w	r3, r0, #196608	; 0x30000
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8000b16:	4293      	cmp	r3, r2
 8000b18:	f47f ae66 	bne.w	80007e8 <HAL_RCC_OscConfig+0x8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8000b1c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8000b1e:	f000 6070 	and.w	r0, r0, #251658240	; 0xf000000
    return HAL_ERROR;
 8000b22:	1ac0      	subs	r0, r0, r3
 8000b24:	bf18      	it	ne
 8000b26:	2001      	movne	r0, #1
 8000b28:	e6a0      	b.n	800086c <HAL_RCC_OscConfig+0x8c>
 8000b2a:	bf00      	nop

08000b2c <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000b2c:	4913      	ldr	r1, [pc, #76]	; (8000b7c <HAL_RCC_GetSysClockFreq+0x50>)
{
 8000b2e:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000b30:	688b      	ldr	r3, [r1, #8]
 8000b32:	f003 030c 	and.w	r3, r3, #12
 8000b36:	2b04      	cmp	r3, #4
 8000b38:	d003      	beq.n	8000b42 <HAL_RCC_GetSysClockFreq+0x16>
 8000b3a:	2b08      	cmp	r3, #8
 8000b3c:	d003      	beq.n	8000b46 <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8000b3e:	4810      	ldr	r0, [pc, #64]	; (8000b80 <HAL_RCC_GetSysClockFreq+0x54>)
    {
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
 8000b40:	e000      	b.n	8000b44 <HAL_RCC_GetSysClockFreq+0x18>
      sysclockfreq = HSE_VALUE;
 8000b42:	4810      	ldr	r0, [pc, #64]	; (8000b84 <HAL_RCC_GetSysClockFreq+0x58>)
}
 8000b44:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000b46:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000b48:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000b4a:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000b4c:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000b50:	bf14      	ite	ne
 8000b52:	480c      	ldrne	r0, [pc, #48]	; (8000b84 <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000b54:	480a      	ldreq	r0, [pc, #40]	; (8000b80 <HAL_RCC_GetSysClockFreq+0x54>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000b56:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8000b5a:	bf18      	it	ne
 8000b5c:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000b5e:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000b62:	fba1 0100 	umull	r0, r1, r1, r0
 8000b66:	f7ff fb33 	bl	80001d0 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8000b6a:	4b04      	ldr	r3, [pc, #16]	; (8000b7c <HAL_RCC_GetSysClockFreq+0x50>)
 8000b6c:	685b      	ldr	r3, [r3, #4]
 8000b6e:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8000b72:	3301      	adds	r3, #1
 8000b74:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 8000b76:	fbb0 f0f3 	udiv	r0, r0, r3
 8000b7a:	e7e3      	b.n	8000b44 <HAL_RCC_GetSysClockFreq+0x18>
 8000b7c:	40023800 	.word	0x40023800
 8000b80:	00f42400 	.word	0x00f42400
 8000b84:	007a1200 	.word	0x007a1200

08000b88 <HAL_RCC_ClockConfig>:
{
 8000b88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000b8c:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8000b8e:	4604      	mov	r4, r0
 8000b90:	b910      	cbnz	r0, 8000b98 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8000b92:	2001      	movs	r0, #1
}
 8000b94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000b98:	4b43      	ldr	r3, [pc, #268]	; (8000ca8 <HAL_RCC_ClockConfig+0x120>)
 8000b9a:	681a      	ldr	r2, [r3, #0]
 8000b9c:	f002 020f 	and.w	r2, r2, #15
 8000ba0:	428a      	cmp	r2, r1
 8000ba2:	d328      	bcc.n	8000bf6 <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000ba4:	6821      	ldr	r1, [r4, #0]
 8000ba6:	078f      	lsls	r7, r1, #30
 8000ba8:	d42d      	bmi.n	8000c06 <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000baa:	07c8      	lsls	r0, r1, #31
 8000bac:	d440      	bmi.n	8000c30 <HAL_RCC_ClockConfig+0xa8>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8000bae:	4b3e      	ldr	r3, [pc, #248]	; (8000ca8 <HAL_RCC_ClockConfig+0x120>)
 8000bb0:	681a      	ldr	r2, [r3, #0]
 8000bb2:	f002 020f 	and.w	r2, r2, #15
 8000bb6:	42aa      	cmp	r2, r5
 8000bb8:	d865      	bhi.n	8000c86 <HAL_RCC_ClockConfig+0xfe>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000bba:	6822      	ldr	r2, [r4, #0]
 8000bbc:	0751      	lsls	r1, r2, #29
 8000bbe:	d46b      	bmi.n	8000c98 <HAL_RCC_ClockConfig+0x110>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000bc0:	0713      	lsls	r3, r2, #28
 8000bc2:	d507      	bpl.n	8000bd4 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8000bc4:	4a39      	ldr	r2, [pc, #228]	; (8000cac <HAL_RCC_ClockConfig+0x124>)
 8000bc6:	6921      	ldr	r1, [r4, #16]
 8000bc8:	6893      	ldr	r3, [r2, #8]
 8000bca:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8000bce:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000bd2:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000bd4:	f7ff ffaa 	bl	8000b2c <HAL_RCC_GetSysClockFreq>
 8000bd8:	4b34      	ldr	r3, [pc, #208]	; (8000cac <HAL_RCC_ClockConfig+0x124>)
 8000bda:	4a35      	ldr	r2, [pc, #212]	; (8000cb0 <HAL_RCC_ClockConfig+0x128>)
 8000bdc:	689b      	ldr	r3, [r3, #8]
 8000bde:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000be2:	5cd3      	ldrb	r3, [r2, r3]
 8000be4:	40d8      	lsrs	r0, r3
 8000be6:	4b33      	ldr	r3, [pc, #204]	; (8000cb4 <HAL_RCC_ClockConfig+0x12c>)
 8000be8:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 8000bea:	4b33      	ldr	r3, [pc, #204]	; (8000cb8 <HAL_RCC_ClockConfig+0x130>)
 8000bec:	6818      	ldr	r0, [r3, #0]
 8000bee:	f001 fcfb 	bl	80025e8 <HAL_InitTick>
  return HAL_OK;
 8000bf2:	2000      	movs	r0, #0
 8000bf4:	e7ce      	b.n	8000b94 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000bf6:	b2ca      	uxtb	r2, r1
 8000bf8:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	f003 030f 	and.w	r3, r3, #15
 8000c00:	428b      	cmp	r3, r1
 8000c02:	d1c6      	bne.n	8000b92 <HAL_RCC_ClockConfig+0xa>
 8000c04:	e7ce      	b.n	8000ba4 <HAL_RCC_ClockConfig+0x1c>
 8000c06:	4b29      	ldr	r3, [pc, #164]	; (8000cac <HAL_RCC_ClockConfig+0x124>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000c08:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000c0c:	bf1e      	ittt	ne
 8000c0e:	689a      	ldrne	r2, [r3, #8]
 8000c10:	f442 52e0 	orrne.w	r2, r2, #7168	; 0x1c00
 8000c14:	609a      	strne	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000c16:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000c18:	bf42      	ittt	mi
 8000c1a:	689a      	ldrmi	r2, [r3, #8]
 8000c1c:	f442 4260 	orrmi.w	r2, r2, #57344	; 0xe000
 8000c20:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000c22:	689a      	ldr	r2, [r3, #8]
 8000c24:	68a0      	ldr	r0, [r4, #8]
 8000c26:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8000c2a:	4302      	orrs	r2, r0
 8000c2c:	609a      	str	r2, [r3, #8]
 8000c2e:	e7bc      	b.n	8000baa <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000c30:	6862      	ldr	r2, [r4, #4]
 8000c32:	4b1e      	ldr	r3, [pc, #120]	; (8000cac <HAL_RCC_ClockConfig+0x124>)
 8000c34:	2a01      	cmp	r2, #1
 8000c36:	d11c      	bne.n	8000c72 <HAL_RCC_ClockConfig+0xea>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000c3e:	d0a8      	beq.n	8000b92 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000c40:	4e1a      	ldr	r6, [pc, #104]	; (8000cac <HAL_RCC_ClockConfig+0x124>)
 8000c42:	68b3      	ldr	r3, [r6, #8]
 8000c44:	f023 0303 	bic.w	r3, r3, #3
 8000c48:	4313      	orrs	r3, r2
 8000c4a:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8000c4c:	f7ff fc66 	bl	800051c <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000c50:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8000c54:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000c56:	68b3      	ldr	r3, [r6, #8]
 8000c58:	6862      	ldr	r2, [r4, #4]
 8000c5a:	f003 030c 	and.w	r3, r3, #12
 8000c5e:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8000c62:	d0a4      	beq.n	8000bae <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000c64:	f7ff fc5a 	bl	800051c <HAL_GetTick>
 8000c68:	1bc0      	subs	r0, r0, r7
 8000c6a:	4540      	cmp	r0, r8
 8000c6c:	d9f3      	bls.n	8000c56 <HAL_RCC_ClockConfig+0xce>
        return HAL_TIMEOUT;
 8000c6e:	2003      	movs	r0, #3
 8000c70:	e790      	b.n	8000b94 <HAL_RCC_ClockConfig+0xc>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000c72:	1e91      	subs	r1, r2, #2
 8000c74:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000c76:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000c78:	d802      	bhi.n	8000c80 <HAL_RCC_ClockConfig+0xf8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000c7a:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8000c7e:	e7de      	b.n	8000c3e <HAL_RCC_ClockConfig+0xb6>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000c80:	f013 0f02 	tst.w	r3, #2
 8000c84:	e7db      	b.n	8000c3e <HAL_RCC_ClockConfig+0xb6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000c86:	b2ea      	uxtb	r2, r5
 8000c88:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	f003 030f 	and.w	r3, r3, #15
 8000c90:	42ab      	cmp	r3, r5
 8000c92:	f47f af7e 	bne.w	8000b92 <HAL_RCC_ClockConfig+0xa>
 8000c96:	e790      	b.n	8000bba <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000c98:	4904      	ldr	r1, [pc, #16]	; (8000cac <HAL_RCC_ClockConfig+0x124>)
 8000c9a:	68e0      	ldr	r0, [r4, #12]
 8000c9c:	688b      	ldr	r3, [r1, #8]
 8000c9e:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8000ca2:	4303      	orrs	r3, r0
 8000ca4:	608b      	str	r3, [r1, #8]
 8000ca6:	e78b      	b.n	8000bc0 <HAL_RCC_ClockConfig+0x38>
 8000ca8:	40023c00 	.word	0x40023c00
 8000cac:	40023800 	.word	0x40023800
 8000cb0:	0800279b 	.word	0x0800279b
 8000cb4:	2000000c 	.word	0x2000000c
 8000cb8:	20000004 	.word	0x20000004

08000cbc <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8000cbc:	4b01      	ldr	r3, [pc, #4]	; (8000cc4 <HAL_RCC_GetHCLKFreq+0x8>)
 8000cbe:	6818      	ldr	r0, [r3, #0]
 8000cc0:	4770      	bx	lr
 8000cc2:	bf00      	nop
 8000cc4:	2000000c 	.word	0x2000000c

08000cc8 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8000cc8:	4b04      	ldr	r3, [pc, #16]	; (8000cdc <HAL_RCC_GetPCLK1Freq+0x14>)
 8000cca:	4a05      	ldr	r2, [pc, #20]	; (8000ce0 <HAL_RCC_GetPCLK1Freq+0x18>)
 8000ccc:	689b      	ldr	r3, [r3, #8]
 8000cce:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8000cd2:	5cd3      	ldrb	r3, [r2, r3]
 8000cd4:	4a03      	ldr	r2, [pc, #12]	; (8000ce4 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8000cd6:	6810      	ldr	r0, [r2, #0]
}
 8000cd8:	40d8      	lsrs	r0, r3
 8000cda:	4770      	bx	lr
 8000cdc:	40023800 	.word	0x40023800
 8000ce0:	080027ab 	.word	0x080027ab
 8000ce4:	2000000c 	.word	0x2000000c

08000ce8 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8000ce8:	4b04      	ldr	r3, [pc, #16]	; (8000cfc <HAL_RCC_GetPCLK2Freq+0x14>)
 8000cea:	4a05      	ldr	r2, [pc, #20]	; (8000d00 <HAL_RCC_GetPCLK2Freq+0x18>)
 8000cec:	689b      	ldr	r3, [r3, #8]
 8000cee:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8000cf2:	5cd3      	ldrb	r3, [r2, r3]
 8000cf4:	4a03      	ldr	r2, [pc, #12]	; (8000d04 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8000cf6:	6810      	ldr	r0, [r2, #0]
}
 8000cf8:	40d8      	lsrs	r0, r3
 8000cfa:	4770      	bx	lr
 8000cfc:	40023800 	.word	0x40023800
 8000d00:	080027ab 	.word	0x080027ab
 8000d04:	2000000c 	.word	0x2000000c

08000d08 <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8000d08:	230f      	movs	r3, #15
 8000d0a:	6003      	str	r3, [r0, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8000d0c:	4b0b      	ldr	r3, [pc, #44]	; (8000d3c <HAL_RCC_GetClockConfig+0x34>)
 8000d0e:	689a      	ldr	r2, [r3, #8]
 8000d10:	f002 0203 	and.w	r2, r2, #3
 8000d14:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8000d16:	689a      	ldr	r2, [r3, #8]
 8000d18:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8000d1c:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8000d1e:	689a      	ldr	r2, [r3, #8]
 8000d20:	f402 52e0 	and.w	r2, r2, #7168	; 0x1c00
 8000d24:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8000d26:	689b      	ldr	r3, [r3, #8]
 8000d28:	08db      	lsrs	r3, r3, #3
 8000d2a:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8000d2e:	6103      	str	r3, [r0, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8000d30:	4b03      	ldr	r3, [pc, #12]	; (8000d40 <HAL_RCC_GetClockConfig+0x38>)
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	f003 030f 	and.w	r3, r3, #15
 8000d38:	600b      	str	r3, [r1, #0]
}
 8000d3a:	4770      	bx	lr
 8000d3c:	40023800 	.word	0x40023800
 8000d40:	40023c00 	.word	0x40023c00

08000d44 <SPI_WaitFlagStateUntilTimeout.constprop.7>:
  * @param  State flag state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 8000d44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d46:	4604      	mov	r4, r0
 8000d48:	460e      	mov	r6, r1
 8000d4a:	4615      	mov	r5, r2
 8000d4c:	461f      	mov	r7, r3
                                                       uint32_t Timeout, uint32_t Tickstart)
{
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8000d4e:	6821      	ldr	r1, [r4, #0]
 8000d50:	688a      	ldr	r2, [r1, #8]
 8000d52:	ea36 0302 	bics.w	r3, r6, r2
 8000d56:	d001      	beq.n	8000d5c <SPI_WaitFlagStateUntilTimeout.constprop.7+0x18>
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 8000d58:	2000      	movs	r0, #0
 8000d5a:	e02d      	b.n	8000db8 <SPI_WaitFlagStateUntilTimeout.constprop.7+0x74>
    if (Timeout != HAL_MAX_DELAY)
 8000d5c:	1c6b      	adds	r3, r5, #1
 8000d5e:	d0f7      	beq.n	8000d50 <SPI_WaitFlagStateUntilTimeout.constprop.7+0xc>
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8000d60:	f7ff fbdc 	bl	800051c <HAL_GetTick>
 8000d64:	1bc0      	subs	r0, r0, r7
 8000d66:	4285      	cmp	r5, r0
 8000d68:	d8f1      	bhi.n	8000d4e <SPI_WaitFlagStateUntilTimeout.constprop.7+0xa>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8000d6a:	6823      	ldr	r3, [r4, #0]
 8000d6c:	685a      	ldr	r2, [r3, #4]
 8000d6e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8000d72:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8000d74:	6862      	ldr	r2, [r4, #4]
 8000d76:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8000d7a:	d10a      	bne.n	8000d92 <SPI_WaitFlagStateUntilTimeout.constprop.7+0x4e>
 8000d7c:	68a2      	ldr	r2, [r4, #8]
 8000d7e:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8000d82:	d002      	beq.n	8000d8a <SPI_WaitFlagStateUntilTimeout.constprop.7+0x46>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8000d84:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8000d88:	d103      	bne.n	8000d92 <SPI_WaitFlagStateUntilTimeout.constprop.7+0x4e>
          __HAL_SPI_DISABLE(hspi);
 8000d8a:	681a      	ldr	r2, [r3, #0]
 8000d8c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000d90:	601a      	str	r2, [r3, #0]
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8000d92:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8000d94:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8000d98:	d107      	bne.n	8000daa <SPI_WaitFlagStateUntilTimeout.constprop.7+0x66>
          SPI_RESET_CRC(hspi);
 8000d9a:	681a      	ldr	r2, [r3, #0]
 8000d9c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8000da0:	601a      	str	r2, [r3, #0]
 8000da2:	681a      	ldr	r2, [r3, #0]
 8000da4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8000da8:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8000daa:	2301      	movs	r3, #1
 8000dac:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 8000db0:	2300      	movs	r3, #0
 8000db2:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
 8000db6:	2003      	movs	r0, #3
}
 8000db8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08000dba <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8000dba:	b538      	push	{r3, r4, r5, lr}
 8000dbc:	4613      	mov	r3, r2
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8000dbe:	6842      	ldr	r2, [r0, #4]
 8000dc0:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
{
 8000dc4:	4604      	mov	r4, r0
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8000dc6:	d11f      	bne.n	8000e08 <SPI_EndRxTransaction+0x4e>
 8000dc8:	6882      	ldr	r2, [r0, #8]
 8000dca:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8000dce:	d002      	beq.n	8000dd6 <SPI_EndRxTransaction+0x1c>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8000dd0:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8000dd4:	d107      	bne.n	8000de6 <SPI_EndRxTransaction+0x2c>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8000dd6:	6825      	ldr	r5, [r4, #0]
 8000dd8:	6828      	ldr	r0, [r5, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8000dda:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
    __HAL_SPI_DISABLE(hspi);
 8000dde:	f020 0040 	bic.w	r0, r0, #64	; 0x40
 8000de2:	6028      	str	r0, [r5, #0]
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8000de4:	d007      	beq.n	8000df6 <SPI_EndRxTransaction+0x3c>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8000de6:	460a      	mov	r2, r1
 8000de8:	2180      	movs	r1, #128	; 0x80
 8000dea:	4620      	mov	r0, r4
 8000dec:	f7ff ffaa 	bl	8000d44 <SPI_WaitFlagStateUntilTimeout.constprop.7>
 8000df0:	b920      	cbnz	r0, 8000dfc <SPI_EndRxTransaction+0x42>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
      return HAL_TIMEOUT;
    }
  }
  return HAL_OK;
 8000df2:	2000      	movs	r0, #0
}
 8000df4:	bd38      	pop	{r3, r4, r5, pc}
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8000df6:	460a      	mov	r2, r1
 8000df8:	2101      	movs	r1, #1
 8000dfa:	e7f6      	b.n	8000dea <SPI_EndRxTransaction+0x30>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8000dfc:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000dfe:	f043 0320 	orr.w	r3, r3, #32
 8000e02:	6563      	str	r3, [r4, #84]	; 0x54
      return HAL_TIMEOUT;
 8000e04:	2003      	movs	r0, #3
 8000e06:	e7f5      	b.n	8000df4 <SPI_EndRxTransaction+0x3a>
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8000e08:	460a      	mov	r2, r1
 8000e0a:	2101      	movs	r1, #1
 8000e0c:	e7ee      	b.n	8000dec <SPI_EndRxTransaction+0x32>
	...

08000e10 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8000e10:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8000e12:	4613      	mov	r3, r2
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8000e14:	4a12      	ldr	r2, [pc, #72]	; (8000e60 <SPI_EndRxTxTransaction+0x50>)
 8000e16:	4e13      	ldr	r6, [pc, #76]	; (8000e64 <SPI_EndRxTxTransaction+0x54>)
 8000e18:	6815      	ldr	r5, [r2, #0]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8000e1a:	6842      	ldr	r2, [r0, #4]
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8000e1c:	fbb5 f6f6 	udiv	r6, r5, r6
 8000e20:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
 8000e24:	4375      	muls	r5, r6
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8000e26:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
{
 8000e2a:	4604      	mov	r4, r0
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8000e2c:	9501      	str	r5, [sp, #4]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8000e2e:	d10b      	bne.n	8000e48 <SPI_EndRxTxTransaction+0x38>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8000e30:	460a      	mov	r2, r1
 8000e32:	2180      	movs	r1, #128	; 0x80
 8000e34:	f7ff ff86 	bl	8000d44 <SPI_WaitFlagStateUntilTimeout.constprop.7>
 8000e38:	b178      	cbz	r0, 8000e5a <SPI_EndRxTxTransaction+0x4a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8000e3a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000e3c:	f043 0320 	orr.w	r3, r3, #32
 8000e40:	6563      	str	r3, [r4, #84]	; 0x54
      return HAL_TIMEOUT;
 8000e42:	2003      	movs	r0, #3
      count--;
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
  }

  return HAL_OK;
}
 8000e44:	b002      	add	sp, #8
 8000e46:	bd70      	pop	{r4, r5, r6, pc}
      if (count == 0U)
 8000e48:	9b01      	ldr	r3, [sp, #4]
 8000e4a:	b133      	cbz	r3, 8000e5a <SPI_EndRxTxTransaction+0x4a>
      count--;
 8000e4c:	9b01      	ldr	r3, [sp, #4]
 8000e4e:	3b01      	subs	r3, #1
 8000e50:	9301      	str	r3, [sp, #4]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8000e52:	6823      	ldr	r3, [r4, #0]
 8000e54:	689b      	ldr	r3, [r3, #8]
 8000e56:	061b      	lsls	r3, r3, #24
 8000e58:	d4f6      	bmi.n	8000e48 <SPI_EndRxTxTransaction+0x38>
  return HAL_OK;
 8000e5a:	2000      	movs	r0, #0
 8000e5c:	e7f2      	b.n	8000e44 <SPI_EndRxTxTransaction+0x34>
 8000e5e:	bf00      	nop
 8000e60:	2000000c 	.word	0x2000000c
 8000e64:	016e3600 	.word	0x016e3600

08000e68 <HAL_SPI_Init>:
{
 8000e68:	b510      	push	{r4, lr}
  if (hspi == NULL)
 8000e6a:	4604      	mov	r4, r0
 8000e6c:	2800      	cmp	r0, #0
 8000e6e:	d036      	beq.n	8000ede <HAL_SPI_Init+0x76>
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000e70:	2300      	movs	r3, #0
 8000e72:	6283      	str	r3, [r0, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8000e74:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 8000e78:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000e7c:	b91b      	cbnz	r3, 8000e86 <HAL_SPI_Init+0x1e>
    hspi->Lock = HAL_UNLOCKED;
 8000e7e:	f880 2050 	strb.w	r2, [r0, #80]	; 0x50
    HAL_SPI_MspInit(hspi);
 8000e82:	f001 fb63 	bl	800254c <HAL_SPI_MspInit>
  __HAL_SPI_DISABLE(hspi);
 8000e86:	6821      	ldr	r1, [r4, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8000e88:	69a2      	ldr	r2, [r4, #24]
  hspi->State = HAL_SPI_STATE_BUSY;
 8000e8a:	2302      	movs	r3, #2
 8000e8c:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 8000e90:	680b      	ldr	r3, [r1, #0]
 8000e92:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000e96:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8000e98:	e9d4 3001 	ldrd	r3, r0, [r4, #4]
 8000e9c:	4303      	orrs	r3, r0
 8000e9e:	68e0      	ldr	r0, [r4, #12]
 8000ea0:	4303      	orrs	r3, r0
 8000ea2:	6920      	ldr	r0, [r4, #16]
 8000ea4:	4303      	orrs	r3, r0
 8000ea6:	6960      	ldr	r0, [r4, #20]
 8000ea8:	4303      	orrs	r3, r0
 8000eaa:	69e0      	ldr	r0, [r4, #28]
 8000eac:	4303      	orrs	r3, r0
 8000eae:	6a20      	ldr	r0, [r4, #32]
 8000eb0:	4303      	orrs	r3, r0
 8000eb2:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8000eb4:	4303      	orrs	r3, r0
 8000eb6:	f402 7000 	and.w	r0, r2, #512	; 0x200
 8000eba:	4303      	orrs	r3, r0
 8000ebc:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8000ebe:	0c12      	lsrs	r2, r2, #16
 8000ec0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000ec2:	f002 0204 	and.w	r2, r2, #4
 8000ec6:	431a      	orrs	r2, r3
 8000ec8:	604a      	str	r2, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8000eca:	69cb      	ldr	r3, [r1, #28]
 8000ecc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000ed0:	61cb      	str	r3, [r1, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8000ed2:	2000      	movs	r0, #0
  hspi->State     = HAL_SPI_STATE_READY;
 8000ed4:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8000ed6:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8000ed8:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
}
 8000edc:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8000ede:	2001      	movs	r0, #1
 8000ee0:	e7fc      	b.n	8000edc <HAL_SPI_Init+0x74>

08000ee2 <HAL_SPI_TransmitReceive>:
{
 8000ee2:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8000ee6:	461e      	mov	r6, r3
  __HAL_LOCK(hspi);
 8000ee8:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
{
 8000eec:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  __HAL_LOCK(hspi);
 8000eee:	2b01      	cmp	r3, #1
{
 8000ef0:	4604      	mov	r4, r0
 8000ef2:	460d      	mov	r5, r1
 8000ef4:	4691      	mov	r9, r2
  __HAL_LOCK(hspi);
 8000ef6:	f000 80e2 	beq.w	80010be <HAL_SPI_TransmitReceive+0x1dc>
 8000efa:	2301      	movs	r3, #1
 8000efc:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 8000f00:	f7ff fb0c 	bl	800051c <HAL_GetTick>
  tmp_state           = hspi->State;
 8000f04:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
  tmp_mode            = hspi->Init.Mode;
 8000f08:	6861      	ldr	r1, [r4, #4]
  tmp_state           = hspi->State;
 8000f0a:	b2db      	uxtb	r3, r3
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8000f0c:	2b01      	cmp	r3, #1
  tickstart = HAL_GetTick();
 8000f0e:	4680      	mov	r8, r0
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8000f10:	d00a      	beq.n	8000f28 <HAL_SPI_TransmitReceive+0x46>
 8000f12:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
 8000f16:	f040 80d0 	bne.w	80010ba <HAL_SPI_TransmitReceive+0x1d8>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8000f1a:	68a0      	ldr	r0, [r4, #8]
 8000f1c:	2800      	cmp	r0, #0
 8000f1e:	f040 80cc 	bne.w	80010ba <HAL_SPI_TransmitReceive+0x1d8>
 8000f22:	2b04      	cmp	r3, #4
 8000f24:	f040 80c9 	bne.w	80010ba <HAL_SPI_TransmitReceive+0x1d8>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8000f28:	2d00      	cmp	r5, #0
 8000f2a:	f000 80c4 	beq.w	80010b6 <HAL_SPI_TransmitReceive+0x1d4>
 8000f2e:	f1b9 0f00 	cmp.w	r9, #0
 8000f32:	f000 80c0 	beq.w	80010b6 <HAL_SPI_TransmitReceive+0x1d4>
 8000f36:	2e00      	cmp	r6, #0
 8000f38:	f000 80bd 	beq.w	80010b6 <HAL_SPI_TransmitReceive+0x1d4>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8000f3c:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8000f40:	f8c4 9038 	str.w	r9, [r4, #56]	; 0x38
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8000f44:	2b04      	cmp	r3, #4
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8000f46:	bf1c      	itt	ne
 8000f48:	2305      	movne	r3, #5
 8000f4a:	f884 3051 	strbne.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->TxISR       = NULL;
 8000f52:	e9c4 3310 	strd	r3, r3, [r4, #64]	; 0x40
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8000f56:	6823      	ldr	r3, [r4, #0]
  hspi->RxXferCount = Size;
 8000f58:	87e6      	strh	r6, [r4, #62]	; 0x3e
  hspi->TxXferCount = Size;
 8000f5a:	86e6      	strh	r6, [r4, #54]	; 0x36
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8000f5c:	681a      	ldr	r2, [r3, #0]
  hspi->RxXferSize  = Size;
 8000f5e:	87a6      	strh	r6, [r4, #60]	; 0x3c
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8000f60:	0650      	lsls	r0, r2, #25
    __HAL_SPI_ENABLE(hspi);
 8000f62:	bf58      	it	pl
 8000f64:	681a      	ldrpl	r2, [r3, #0]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8000f66:	6325      	str	r5, [r4, #48]	; 0x30
    __HAL_SPI_ENABLE(hspi);
 8000f68:	bf58      	it	pl
 8000f6a:	f042 0240 	orrpl.w	r2, r2, #64	; 0x40
  hspi->TxXferSize  = Size;
 8000f6e:	86a6      	strh	r6, [r4, #52]	; 0x34
    __HAL_SPI_ENABLE(hspi);
 8000f70:	bf58      	it	pl
 8000f72:	601a      	strpl	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8000f74:	68e2      	ldr	r2, [r4, #12]
 8000f76:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8000f7a:	d158      	bne.n	800102e <HAL_SPI_TransmitReceive+0x14c>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8000f7c:	b109      	cbz	r1, 8000f82 <HAL_SPI_TransmitReceive+0xa0>
 8000f7e:	2e01      	cmp	r6, #1
 8000f80:	d107      	bne.n	8000f92 <HAL_SPI_TransmitReceive+0xb0>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8000f82:	f835 2b02 	ldrh.w	r2, [r5], #2
 8000f86:	60da      	str	r2, [r3, #12]
      hspi->TxXferCount--;
 8000f88:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8000f8a:	6325      	str	r5, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8000f8c:	3b01      	subs	r3, #1
 8000f8e:	b29b      	uxth	r3, r3
 8000f90:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 8000f92:	2501      	movs	r5, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8000f94:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8000f96:	b29b      	uxth	r3, r3
 8000f98:	b9ab      	cbnz	r3, 8000fc6 <HAL_SPI_TransmitReceive+0xe4>
 8000f9a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8000f9c:	b29b      	uxth	r3, r3
 8000f9e:	b993      	cbnz	r3, 8000fc6 <HAL_SPI_TransmitReceive+0xe4>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8000fa0:	4642      	mov	r2, r8
 8000fa2:	4639      	mov	r1, r7
 8000fa4:	4620      	mov	r0, r4
 8000fa6:	f7ff ff33 	bl	8000e10 <SPI_EndRxTxTransaction>
 8000faa:	2800      	cmp	r0, #0
 8000fac:	f040 8081 	bne.w	80010b2 <HAL_SPI_TransmitReceive+0x1d0>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8000fb0:	68a3      	ldr	r3, [r4, #8]
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d132      	bne.n	800101c <HAL_SPI_TransmitReceive+0x13a>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8000fb6:	6823      	ldr	r3, [r4, #0]
 8000fb8:	9001      	str	r0, [sp, #4]
 8000fba:	68da      	ldr	r2, [r3, #12]
 8000fbc:	9201      	str	r2, [sp, #4]
 8000fbe:	689b      	ldr	r3, [r3, #8]
 8000fc0:	9301      	str	r3, [sp, #4]
 8000fc2:	9b01      	ldr	r3, [sp, #4]
 8000fc4:	e02a      	b.n	800101c <HAL_SPI_TransmitReceive+0x13a>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8000fc6:	6822      	ldr	r2, [r4, #0]
 8000fc8:	6893      	ldr	r3, [r2, #8]
 8000fca:	0799      	lsls	r1, r3, #30
 8000fcc:	d50d      	bpl.n	8000fea <HAL_SPI_TransmitReceive+0x108>
 8000fce:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8000fd0:	b29b      	uxth	r3, r3
 8000fd2:	b153      	cbz	r3, 8000fea <HAL_SPI_TransmitReceive+0x108>
 8000fd4:	b14d      	cbz	r5, 8000fea <HAL_SPI_TransmitReceive+0x108>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8000fd6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000fd8:	f833 1b02 	ldrh.w	r1, [r3], #2
 8000fdc:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8000fde:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8000fe0:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8000fe2:	3b01      	subs	r3, #1
 8000fe4:	b29b      	uxth	r3, r3
 8000fe6:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 0U;
 8000fe8:	2500      	movs	r5, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8000fea:	6893      	ldr	r3, [r2, #8]
 8000fec:	07db      	lsls	r3, r3, #31
 8000fee:	d50c      	bpl.n	800100a <HAL_SPI_TransmitReceive+0x128>
 8000ff0:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8000ff2:	b29b      	uxth	r3, r3
 8000ff4:	b14b      	cbz	r3, 800100a <HAL_SPI_TransmitReceive+0x128>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8000ff6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8000ff8:	68d2      	ldr	r2, [r2, #12]
 8000ffa:	f823 2b02 	strh.w	r2, [r3], #2
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8000ffe:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8001000:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001002:	3b01      	subs	r3, #1
 8001004:	b29b      	uxth	r3, r3
 8001006:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 8001008:	2501      	movs	r5, #1
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800100a:	f7ff fa87 	bl	800051c <HAL_GetTick>
 800100e:	eba0 0008 	sub.w	r0, r0, r8
 8001012:	4287      	cmp	r7, r0
 8001014:	d8be      	bhi.n	8000f94 <HAL_SPI_TransmitReceive+0xb2>
 8001016:	1c7e      	adds	r6, r7, #1
 8001018:	d0bc      	beq.n	8000f94 <HAL_SPI_TransmitReceive+0xb2>
        errorcode = HAL_TIMEOUT;
 800101a:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 800101c:	2301      	movs	r3, #1
 800101e:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8001022:	2300      	movs	r3, #0
 8001024:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8001028:	b003      	add	sp, #12
 800102a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800102e:	b109      	cbz	r1, 8001034 <HAL_SPI_TransmitReceive+0x152>
 8001030:	2e01      	cmp	r6, #1
 8001032:	d108      	bne.n	8001046 <HAL_SPI_TransmitReceive+0x164>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001034:	782a      	ldrb	r2, [r5, #0]
 8001036:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001038:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800103a:	3301      	adds	r3, #1
 800103c:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 800103e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001040:	3b01      	subs	r3, #1
 8001042:	b29b      	uxth	r3, r3
 8001044:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 8001046:	2501      	movs	r5, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001048:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800104a:	b29b      	uxth	r3, r3
 800104c:	b91b      	cbnz	r3, 8001056 <HAL_SPI_TransmitReceive+0x174>
 800104e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001050:	b29b      	uxth	r3, r3
 8001052:	2b00      	cmp	r3, #0
 8001054:	d0a4      	beq.n	8000fa0 <HAL_SPI_TransmitReceive+0xbe>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001056:	6822      	ldr	r2, [r4, #0]
 8001058:	6893      	ldr	r3, [r2, #8]
 800105a:	0798      	lsls	r0, r3, #30
 800105c:	d50e      	bpl.n	800107c <HAL_SPI_TransmitReceive+0x19a>
 800105e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001060:	b29b      	uxth	r3, r3
 8001062:	b15b      	cbz	r3, 800107c <HAL_SPI_TransmitReceive+0x19a>
 8001064:	b155      	cbz	r5, 800107c <HAL_SPI_TransmitReceive+0x19a>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8001066:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001068:	781b      	ldrb	r3, [r3, #0]
 800106a:	7313      	strb	r3, [r2, #12]
        hspi->pTxBuffPtr++;
 800106c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800106e:	3301      	adds	r3, #1
 8001070:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8001072:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001074:	3b01      	subs	r3, #1
 8001076:	b29b      	uxth	r3, r3
 8001078:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 0U;
 800107a:	2500      	movs	r5, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800107c:	6822      	ldr	r2, [r4, #0]
 800107e:	6893      	ldr	r3, [r2, #8]
 8001080:	07d9      	lsls	r1, r3, #31
 8001082:	d50d      	bpl.n	80010a0 <HAL_SPI_TransmitReceive+0x1be>
 8001084:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001086:	b29b      	uxth	r3, r3
 8001088:	b153      	cbz	r3, 80010a0 <HAL_SPI_TransmitReceive+0x1be>
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800108a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800108c:	68d2      	ldr	r2, [r2, #12]
 800108e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8001090:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001092:	3301      	adds	r3, #1
 8001094:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8001096:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001098:	3b01      	subs	r3, #1
 800109a:	b29b      	uxth	r3, r3
 800109c:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 800109e:	2501      	movs	r5, #1
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80010a0:	f7ff fa3c 	bl	800051c <HAL_GetTick>
 80010a4:	eba0 0008 	sub.w	r0, r0, r8
 80010a8:	4287      	cmp	r7, r0
 80010aa:	d8cd      	bhi.n	8001048 <HAL_SPI_TransmitReceive+0x166>
 80010ac:	1c7b      	adds	r3, r7, #1
 80010ae:	d0cb      	beq.n	8001048 <HAL_SPI_TransmitReceive+0x166>
 80010b0:	e7b3      	b.n	800101a <HAL_SPI_TransmitReceive+0x138>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80010b2:	2320      	movs	r3, #32
 80010b4:	6563      	str	r3, [r4, #84]	; 0x54
    errorcode = HAL_ERROR;
 80010b6:	2001      	movs	r0, #1
 80010b8:	e7b0      	b.n	800101c <HAL_SPI_TransmitReceive+0x13a>
    errorcode = HAL_BUSY;
 80010ba:	2002      	movs	r0, #2
 80010bc:	e7ae      	b.n	800101c <HAL_SPI_TransmitReceive+0x13a>
  __HAL_LOCK(hspi);
 80010be:	2002      	movs	r0, #2
 80010c0:	e7b2      	b.n	8001028 <HAL_SPI_TransmitReceive+0x146>

080010c2 <HAL_SPI_Receive>:
{
 80010c2:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80010c6:	461d      	mov	r5, r3
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80010c8:	6843      	ldr	r3, [r0, #4]
 80010ca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
{
 80010ce:	4604      	mov	r4, r0
 80010d0:	4688      	mov	r8, r1
 80010d2:	4617      	mov	r7, r2
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80010d4:	d10c      	bne.n	80010f0 <HAL_SPI_Receive+0x2e>
 80010d6:	6883      	ldr	r3, [r0, #8]
 80010d8:	b953      	cbnz	r3, 80010f0 <HAL_SPI_Receive+0x2e>
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80010da:	2304      	movs	r3, #4
 80010dc:	f880 3051 	strb.w	r3, [r0, #81]	; 0x51
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80010e0:	4613      	mov	r3, r2
 80010e2:	9500      	str	r5, [sp, #0]
 80010e4:	460a      	mov	r2, r1
 80010e6:	f7ff fefc 	bl	8000ee2 <HAL_SPI_TransmitReceive>
}
 80010ea:	b002      	add	sp, #8
 80010ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  __HAL_LOCK(hspi);
 80010f0:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
 80010f4:	2b01      	cmp	r3, #1
 80010f6:	d079      	beq.n	80011ec <HAL_SPI_Receive+0x12a>
 80010f8:	2301      	movs	r3, #1
 80010fa:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
  tickstart = HAL_GetTick();
 80010fe:	f7ff fa0d 	bl	800051c <HAL_GetTick>
 8001102:	4606      	mov	r6, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 8001104:	f894 0051 	ldrb.w	r0, [r4, #81]	; 0x51
 8001108:	b2c0      	uxtb	r0, r0
 800110a:	2801      	cmp	r0, #1
 800110c:	d16c      	bne.n	80011e8 <HAL_SPI_Receive+0x126>
  if ((pData == NULL) || (Size == 0U))
 800110e:	f1b8 0f00 	cmp.w	r8, #0
 8001112:	d057      	beq.n	80011c4 <HAL_SPI_Receive+0x102>
 8001114:	2f00      	cmp	r7, #0
 8001116:	d055      	beq.n	80011c4 <HAL_SPI_Receive+0x102>
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8001118:	2304      	movs	r3, #4
 800111a:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800111e:	68a2      	ldr	r2, [r4, #8]
  hspi->RxXferSize  = Size;
 8001120:	87a7      	strh	r7, [r4, #60]	; 0x3c
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001122:	2300      	movs	r3, #0
 8001124:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8001126:	6323      	str	r3, [r4, #48]	; 0x30
  hspi->RxXferCount = Size;
 8001128:	87e7      	strh	r7, [r4, #62]	; 0x3e
  hspi->TxXferSize  = 0U;
 800112a:	86a3      	strh	r3, [r4, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800112c:	86e3      	strh	r3, [r4, #54]	; 0x36
  hspi->TxISR       = NULL;
 800112e:	e9c4 3310 	strd	r3, r3, [r4, #64]	; 0x40
 8001132:	6823      	ldr	r3, [r4, #0]
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8001134:	f8c4 8038 	str.w	r8, [r4, #56]	; 0x38
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001138:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
    SPI_1LINE_RX(hspi);
 800113c:	bf02      	ittt	eq
 800113e:	681a      	ldreq	r2, [r3, #0]
 8001140:	f422 4280 	biceq.w	r2, r2, #16384	; 0x4000
 8001144:	601a      	streq	r2, [r3, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001146:	681a      	ldr	r2, [r3, #0]
 8001148:	0657      	lsls	r7, r2, #25
    __HAL_SPI_ENABLE(hspi);
 800114a:	bf5e      	ittt	pl
 800114c:	681a      	ldrpl	r2, [r3, #0]
 800114e:	f042 0240 	orrpl.w	r2, r2, #64	; 0x40
 8001152:	601a      	strpl	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8001154:	68e3      	ldr	r3, [r4, #12]
 8001156:	b1f3      	cbz	r3, 8001196 <HAL_SPI_Receive+0xd4>
    while (hspi->RxXferCount > 0U)
 8001158:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800115a:	b29b      	uxth	r3, r3
 800115c:	b1fb      	cbz	r3, 800119e <HAL_SPI_Receive+0xdc>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800115e:	6823      	ldr	r3, [r4, #0]
 8001160:	689a      	ldr	r2, [r3, #8]
 8001162:	07d2      	lsls	r2, r2, #31
 8001164:	d535      	bpl.n	80011d2 <HAL_SPI_Receive+0x110>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8001166:	68da      	ldr	r2, [r3, #12]
 8001168:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800116a:	f823 2b02 	strh.w	r2, [r3], #2
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800116e:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8001170:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001172:	3b01      	subs	r3, #1
 8001174:	b29b      	uxth	r3, r3
 8001176:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8001178:	e7ee      	b.n	8001158 <HAL_SPI_Receive+0x96>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800117a:	6823      	ldr	r3, [r4, #0]
 800117c:	689a      	ldr	r2, [r3, #8]
 800117e:	07d0      	lsls	r0, r2, #31
 8001180:	d518      	bpl.n	80011b4 <HAL_SPI_Receive+0xf2>
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8001182:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8001184:	7b1b      	ldrb	r3, [r3, #12]
 8001186:	7013      	strb	r3, [r2, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8001188:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800118a:	3301      	adds	r3, #1
 800118c:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 800118e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001190:	3b01      	subs	r3, #1
 8001192:	b29b      	uxth	r3, r3
 8001194:	87e3      	strh	r3, [r4, #62]	; 0x3e
    while (hspi->RxXferCount > 0U)
 8001196:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001198:	b29b      	uxth	r3, r3
 800119a:	2b00      	cmp	r3, #0
 800119c:	d1ed      	bne.n	800117a <HAL_SPI_Receive+0xb8>
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800119e:	4632      	mov	r2, r6
 80011a0:	4629      	mov	r1, r5
 80011a2:	4620      	mov	r0, r4
 80011a4:	f7ff fe09 	bl	8000dba <SPI_EndRxTransaction>
 80011a8:	b9d8      	cbnz	r0, 80011e2 <HAL_SPI_Receive+0x120>
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80011aa:	6d60      	ldr	r0, [r4, #84]	; 0x54
    errorcode = HAL_BUSY;
 80011ac:	3000      	adds	r0, #0
 80011ae:	bf18      	it	ne
 80011b0:	2001      	movne	r0, #1
error :
 80011b2:	e007      	b.n	80011c4 <HAL_SPI_Receive+0x102>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80011b4:	f7ff f9b2 	bl	800051c <HAL_GetTick>
 80011b8:	1b80      	subs	r0, r0, r6
 80011ba:	42a8      	cmp	r0, r5
 80011bc:	d3eb      	bcc.n	8001196 <HAL_SPI_Receive+0xd4>
 80011be:	1c69      	adds	r1, r5, #1
 80011c0:	d0e9      	beq.n	8001196 <HAL_SPI_Receive+0xd4>
          errorcode = HAL_TIMEOUT;
 80011c2:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 80011c4:	2301      	movs	r3, #1
 80011c6:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80011ca:	2300      	movs	r3, #0
 80011cc:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
  return errorcode;
 80011d0:	e78b      	b.n	80010ea <HAL_SPI_Receive+0x28>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80011d2:	f7ff f9a3 	bl	800051c <HAL_GetTick>
 80011d6:	1b80      	subs	r0, r0, r6
 80011d8:	42a8      	cmp	r0, r5
 80011da:	d3bd      	bcc.n	8001158 <HAL_SPI_Receive+0x96>
 80011dc:	1c6b      	adds	r3, r5, #1
 80011de:	d0bb      	beq.n	8001158 <HAL_SPI_Receive+0x96>
 80011e0:	e7ef      	b.n	80011c2 <HAL_SPI_Receive+0x100>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80011e2:	2320      	movs	r3, #32
 80011e4:	6563      	str	r3, [r4, #84]	; 0x54
 80011e6:	e7e0      	b.n	80011aa <HAL_SPI_Receive+0xe8>
    errorcode = HAL_BUSY;
 80011e8:	2002      	movs	r0, #2
 80011ea:	e7eb      	b.n	80011c4 <HAL_SPI_Receive+0x102>
  __HAL_LOCK(hspi);
 80011ec:	2002      	movs	r0, #2
 80011ee:	e77c      	b.n	80010ea <HAL_SPI_Receive+0x28>

080011f0 <HAL_TIM_Base_MspInit>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80011f0:	4770      	bx	lr

080011f2 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80011f2:	6803      	ldr	r3, [r0, #0]
 80011f4:	68da      	ldr	r2, [r3, #12]
 80011f6:	f042 0201 	orr.w	r2, r2, #1
 80011fa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80011fc:	689a      	ldr	r2, [r3, #8]
 80011fe:	f002 0207 	and.w	r2, r2, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001202:	2a06      	cmp	r2, #6
  {
    __HAL_TIM_ENABLE(htim);
 8001204:	bf1e      	ittt	ne
 8001206:	681a      	ldrne	r2, [r3, #0]
 8001208:	f042 0201 	orrne.w	r2, r2, #1
 800120c:	601a      	strne	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
}
 800120e:	2000      	movs	r0, #0
 8001210:	4770      	bx	lr

08001212 <HAL_TIM_OC_DelayElapsedCallback>:
 8001212:	4770      	bx	lr

08001214 <HAL_TIM_IC_CaptureCallback>:
 8001214:	4770      	bx	lr

08001216 <HAL_TIM_PWM_PulseFinishedCallback>:
 8001216:	4770      	bx	lr

08001218 <HAL_TIM_TriggerCallback>:
 8001218:	4770      	bx	lr

0800121a <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800121a:	6803      	ldr	r3, [r0, #0]
 800121c:	691a      	ldr	r2, [r3, #16]
 800121e:	0791      	lsls	r1, r2, #30
{
 8001220:	b510      	push	{r4, lr}
 8001222:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001224:	d50e      	bpl.n	8001244 <HAL_TIM_IRQHandler+0x2a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001226:	68da      	ldr	r2, [r3, #12]
 8001228:	0792      	lsls	r2, r2, #30
 800122a:	d50b      	bpl.n	8001244 <HAL_TIM_IRQHandler+0x2a>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800122c:	f06f 0202 	mvn.w	r2, #2
 8001230:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001232:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001234:	2201      	movs	r2, #1
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001236:	079b      	lsls	r3, r3, #30
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001238:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800123a:	d077      	beq.n	800132c <HAL_TIM_IRQHandler+0x112>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800123c:	f7ff ffea 	bl	8001214 <HAL_TIM_IC_CaptureCallback>
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001240:	2300      	movs	r3, #0
 8001242:	7723      	strb	r3, [r4, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001244:	6823      	ldr	r3, [r4, #0]
 8001246:	691a      	ldr	r2, [r3, #16]
 8001248:	0750      	lsls	r0, r2, #29
 800124a:	d510      	bpl.n	800126e <HAL_TIM_IRQHandler+0x54>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800124c:	68da      	ldr	r2, [r3, #12]
 800124e:	0751      	lsls	r1, r2, #29
 8001250:	d50d      	bpl.n	800126e <HAL_TIM_IRQHandler+0x54>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001252:	f06f 0204 	mvn.w	r2, #4
 8001256:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001258:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800125a:	2202      	movs	r2, #2
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800125c:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001260:	7722      	strb	r2, [r4, #28]
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001262:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001264:	d068      	beq.n	8001338 <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 8001266:	f7ff ffd5 	bl	8001214 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800126a:	2300      	movs	r3, #0
 800126c:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800126e:	6823      	ldr	r3, [r4, #0]
 8001270:	691a      	ldr	r2, [r3, #16]
 8001272:	0712      	lsls	r2, r2, #28
 8001274:	d50f      	bpl.n	8001296 <HAL_TIM_IRQHandler+0x7c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001276:	68da      	ldr	r2, [r3, #12]
 8001278:	0710      	lsls	r0, r2, #28
 800127a:	d50c      	bpl.n	8001296 <HAL_TIM_IRQHandler+0x7c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800127c:	f06f 0208 	mvn.w	r2, #8
 8001280:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001282:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001284:	2204      	movs	r2, #4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001286:	0799      	lsls	r1, r3, #30
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001288:	7722      	strb	r2, [r4, #28]
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800128a:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800128c:	d05a      	beq.n	8001344 <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 800128e:	f7ff ffc1 	bl	8001214 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001292:	2300      	movs	r3, #0
 8001294:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001296:	6823      	ldr	r3, [r4, #0]
 8001298:	691a      	ldr	r2, [r3, #16]
 800129a:	06d2      	lsls	r2, r2, #27
 800129c:	d510      	bpl.n	80012c0 <HAL_TIM_IRQHandler+0xa6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800129e:	68da      	ldr	r2, [r3, #12]
 80012a0:	06d0      	lsls	r0, r2, #27
 80012a2:	d50d      	bpl.n	80012c0 <HAL_TIM_IRQHandler+0xa6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80012a4:	f06f 0210 	mvn.w	r2, #16
 80012a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80012aa:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80012ac:	2208      	movs	r2, #8
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80012ae:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80012b2:	7722      	strb	r2, [r4, #28]
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80012b4:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80012b6:	d04b      	beq.n	8001350 <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 80012b8:	f7ff ffac 	bl	8001214 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80012bc:	2300      	movs	r3, #0
 80012be:	7723      	strb	r3, [r4, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80012c0:	6823      	ldr	r3, [r4, #0]
 80012c2:	691a      	ldr	r2, [r3, #16]
 80012c4:	07d1      	lsls	r1, r2, #31
 80012c6:	d508      	bpl.n	80012da <HAL_TIM_IRQHandler+0xc0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80012c8:	68da      	ldr	r2, [r3, #12]
 80012ca:	07d2      	lsls	r2, r2, #31
 80012cc:	d505      	bpl.n	80012da <HAL_TIM_IRQHandler+0xc0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80012ce:	f06f 0201 	mvn.w	r2, #1
 80012d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80012d4:	4620      	mov	r0, r4
 80012d6:	f001 f8ff 	bl	80024d8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80012da:	6823      	ldr	r3, [r4, #0]
 80012dc:	691a      	ldr	r2, [r3, #16]
 80012de:	0610      	lsls	r0, r2, #24
 80012e0:	d508      	bpl.n	80012f4 <HAL_TIM_IRQHandler+0xda>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80012e2:	68da      	ldr	r2, [r3, #12]
 80012e4:	0611      	lsls	r1, r2, #24
 80012e6:	d505      	bpl.n	80012f4 <HAL_TIM_IRQHandler+0xda>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80012e8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80012ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80012ee:	4620      	mov	r0, r4
 80012f0:	f000 f8b7 	bl	8001462 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80012f4:	6823      	ldr	r3, [r4, #0]
 80012f6:	691a      	ldr	r2, [r3, #16]
 80012f8:	0652      	lsls	r2, r2, #25
 80012fa:	d508      	bpl.n	800130e <HAL_TIM_IRQHandler+0xf4>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80012fc:	68da      	ldr	r2, [r3, #12]
 80012fe:	0650      	lsls	r0, r2, #25
 8001300:	d505      	bpl.n	800130e <HAL_TIM_IRQHandler+0xf4>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001302:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001306:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001308:	4620      	mov	r0, r4
 800130a:	f7ff ff85 	bl	8001218 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800130e:	6823      	ldr	r3, [r4, #0]
 8001310:	691a      	ldr	r2, [r3, #16]
 8001312:	0691      	lsls	r1, r2, #26
 8001314:	d522      	bpl.n	800135c <HAL_TIM_IRQHandler+0x142>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001316:	68da      	ldr	r2, [r3, #12]
 8001318:	0692      	lsls	r2, r2, #26
 800131a:	d51f      	bpl.n	800135c <HAL_TIM_IRQHandler+0x142>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800131c:	f06f 0220 	mvn.w	r2, #32
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001320:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001322:	611a      	str	r2, [r3, #16]
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001324:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 8001328:	f000 b89a 	b.w	8001460 <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800132c:	f7ff ff71 	bl	8001212 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001330:	4620      	mov	r0, r4
 8001332:	f7ff ff70 	bl	8001216 <HAL_TIM_PWM_PulseFinishedCallback>
 8001336:	e783      	b.n	8001240 <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001338:	f7ff ff6b 	bl	8001212 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800133c:	4620      	mov	r0, r4
 800133e:	f7ff ff6a 	bl	8001216 <HAL_TIM_PWM_PulseFinishedCallback>
 8001342:	e792      	b.n	800126a <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001344:	f7ff ff65 	bl	8001212 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001348:	4620      	mov	r0, r4
 800134a:	f7ff ff64 	bl	8001216 <HAL_TIM_PWM_PulseFinishedCallback>
 800134e:	e7a0      	b.n	8001292 <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001350:	f7ff ff5f 	bl	8001212 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001354:	4620      	mov	r0, r4
 8001356:	f7ff ff5e 	bl	8001216 <HAL_TIM_PWM_PulseFinishedCallback>
 800135a:	e7af      	b.n	80012bc <HAL_TIM_IRQHandler+0xa2>
}
 800135c:	bd10      	pop	{r4, pc}
	...

08001360 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001360:	4a30      	ldr	r2, [pc, #192]	; (8001424 <TIM_Base_SetConfig+0xc4>)
  tmpcr1 = TIMx->CR1;
 8001362:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001364:	4290      	cmp	r0, r2
 8001366:	d012      	beq.n	800138e <TIM_Base_SetConfig+0x2e>
 8001368:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800136c:	d00f      	beq.n	800138e <TIM_Base_SetConfig+0x2e>
 800136e:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8001372:	4290      	cmp	r0, r2
 8001374:	d00b      	beq.n	800138e <TIM_Base_SetConfig+0x2e>
 8001376:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800137a:	4290      	cmp	r0, r2
 800137c:	d007      	beq.n	800138e <TIM_Base_SetConfig+0x2e>
 800137e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001382:	4290      	cmp	r0, r2
 8001384:	d003      	beq.n	800138e <TIM_Base_SetConfig+0x2e>
 8001386:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 800138a:	4290      	cmp	r0, r2
 800138c:	d119      	bne.n	80013c2 <TIM_Base_SetConfig+0x62>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 800138e:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001390:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8001394:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001396:	4a23      	ldr	r2, [pc, #140]	; (8001424 <TIM_Base_SetConfig+0xc4>)
 8001398:	4290      	cmp	r0, r2
 800139a:	d029      	beq.n	80013f0 <TIM_Base_SetConfig+0x90>
 800139c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80013a0:	d026      	beq.n	80013f0 <TIM_Base_SetConfig+0x90>
 80013a2:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 80013a6:	4290      	cmp	r0, r2
 80013a8:	d022      	beq.n	80013f0 <TIM_Base_SetConfig+0x90>
 80013aa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80013ae:	4290      	cmp	r0, r2
 80013b0:	d01e      	beq.n	80013f0 <TIM_Base_SetConfig+0x90>
 80013b2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80013b6:	4290      	cmp	r0, r2
 80013b8:	d01a      	beq.n	80013f0 <TIM_Base_SetConfig+0x90>
 80013ba:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 80013be:	4290      	cmp	r0, r2
 80013c0:	d016      	beq.n	80013f0 <TIM_Base_SetConfig+0x90>
 80013c2:	4a19      	ldr	r2, [pc, #100]	; (8001428 <TIM_Base_SetConfig+0xc8>)
 80013c4:	4290      	cmp	r0, r2
 80013c6:	d013      	beq.n	80013f0 <TIM_Base_SetConfig+0x90>
 80013c8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80013cc:	4290      	cmp	r0, r2
 80013ce:	d00f      	beq.n	80013f0 <TIM_Base_SetConfig+0x90>
 80013d0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80013d4:	4290      	cmp	r0, r2
 80013d6:	d00b      	beq.n	80013f0 <TIM_Base_SetConfig+0x90>
 80013d8:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 80013dc:	4290      	cmp	r0, r2
 80013de:	d007      	beq.n	80013f0 <TIM_Base_SetConfig+0x90>
 80013e0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80013e4:	4290      	cmp	r0, r2
 80013e6:	d003      	beq.n	80013f0 <TIM_Base_SetConfig+0x90>
 80013e8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80013ec:	4290      	cmp	r0, r2
 80013ee:	d103      	bne.n	80013f8 <TIM_Base_SetConfig+0x98>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80013f0:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 80013f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80013f6:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80013f8:	694a      	ldr	r2, [r1, #20]
 80013fa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80013fe:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8001400:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001402:	688b      	ldr	r3, [r1, #8]
 8001404:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001406:	680b      	ldr	r3, [r1, #0]
 8001408:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800140a:	4b06      	ldr	r3, [pc, #24]	; (8001424 <TIM_Base_SetConfig+0xc4>)
 800140c:	4298      	cmp	r0, r3
 800140e:	d003      	beq.n	8001418 <TIM_Base_SetConfig+0xb8>
 8001410:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001414:	4298      	cmp	r0, r3
 8001416:	d101      	bne.n	800141c <TIM_Base_SetConfig+0xbc>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001418:	690b      	ldr	r3, [r1, #16]
 800141a:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800141c:	2301      	movs	r3, #1
 800141e:	6143      	str	r3, [r0, #20]
}
 8001420:	4770      	bx	lr
 8001422:	bf00      	nop
 8001424:	40010000 	.word	0x40010000
 8001428:	40014000 	.word	0x40014000

0800142c <HAL_TIM_Base_Init>:
{
 800142c:	b510      	push	{r4, lr}
  if (htim == NULL)
 800142e:	4604      	mov	r4, r0
 8001430:	b1a0      	cbz	r0, 800145c <HAL_TIM_Base_Init+0x30>
  if (htim->State == HAL_TIM_STATE_RESET)
 8001432:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001436:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800143a:	b91b      	cbnz	r3, 8001444 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 800143c:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8001440:	f7ff fed6 	bl	80011f0 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8001444:	2302      	movs	r3, #2
 8001446:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800144a:	6820      	ldr	r0, [r4, #0]
 800144c:	1d21      	adds	r1, r4, #4
 800144e:	f7ff ff87 	bl	8001360 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8001452:	2301      	movs	r3, #1
 8001454:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8001458:	2000      	movs	r0, #0
}
 800145a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800145c:	2001      	movs	r0, #1
 800145e:	e7fc      	b.n	800145a <HAL_TIM_Base_Init+0x2e>

08001460 <HAL_TIMEx_CommutCallback>:
 8001460:	4770      	bx	lr

08001462 <HAL_TIMEx_BreakCallback>:
 8001462:	4770      	bx	lr

08001464 <UART_SetConfig>:
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001464:	6803      	ldr	r3, [r0, #0]
 8001466:	68c1      	ldr	r1, [r0, #12]
 8001468:	691a      	ldr	r2, [r3, #16]
{
 800146a:	b570      	push	{r4, r5, r6, lr}
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800146c:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
{
 8001470:	4604      	mov	r4, r0
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001472:	430a      	orrs	r2, r1
 8001474:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001476:	6925      	ldr	r5, [r4, #16]
 8001478:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR1,
 800147a:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800147c:	69c0      	ldr	r0, [r0, #28]
 800147e:	432a      	orrs	r2, r5
 8001480:	6965      	ldr	r5, [r4, #20]
  MODIFY_REG(huart->Instance->CR1,
 8001482:	f421 4116 	bic.w	r1, r1, #38400	; 0x9600
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001486:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR1,
 8001488:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800148c:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 800148e:	430a      	orrs	r2, r1
 8001490:	60da      	str	r2, [r3, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001492:	695a      	ldr	r2, [r3, #20]
 8001494:	69a1      	ldr	r1, [r4, #24]
 8001496:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800149a:	430a      	orrs	r2, r1

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800149c:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80014a0:	615a      	str	r2, [r3, #20]
 80014a2:	4a26      	ldr	r2, [pc, #152]	; (800153c <UART_SetConfig+0xd8>)
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80014a4:	d129      	bne.n	80014fa <UART_SetConfig+0x96>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80014a6:	4293      	cmp	r3, r2
 80014a8:	d003      	beq.n	80014b2 <UART_SetConfig+0x4e>
 80014aa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80014ae:	4293      	cmp	r3, r2
 80014b0:	d120      	bne.n	80014f4 <UART_SetConfig+0x90>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80014b2:	f7ff fc19 	bl	8000ce8 <HAL_RCC_GetPCLK2Freq>
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80014b6:	6862      	ldr	r2, [r4, #4]
 80014b8:	2600      	movs	r6, #0
 80014ba:	1892      	adds	r2, r2, r2
 80014bc:	f04f 0119 	mov.w	r1, #25
 80014c0:	eb46 0306 	adc.w	r3, r6, r6
 80014c4:	fba0 0101 	umull	r0, r1, r0, r1
 80014c8:	f7fe fe82 	bl	80001d0 <__aeabi_uldivmod>
 80014cc:	2164      	movs	r1, #100	; 0x64
 80014ce:	fbb0 f5f1 	udiv	r5, r0, r1
 80014d2:	fb01 0315 	mls	r3, r1, r5, r0
 80014d6:	00db      	lsls	r3, r3, #3
 80014d8:	3332      	adds	r3, #50	; 0x32
 80014da:	fbb3 f3f1 	udiv	r3, r3, r1
 80014de:	f003 0207 	and.w	r2, r3, #7
 80014e2:	005b      	lsls	r3, r3, #1
 80014e4:	6821      	ldr	r1, [r4, #0]
 80014e6:	eb02 1205 	add.w	r2, r2, r5, lsl #4
 80014ea:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80014ee:	4413      	add	r3, r2
 80014f0:	608b      	str	r3, [r1, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80014f2:	bd70      	pop	{r4, r5, r6, pc}
      pclk = HAL_RCC_GetPCLK1Freq();
 80014f4:	f7ff fbe8 	bl	8000cc8 <HAL_RCC_GetPCLK1Freq>
 80014f8:	e7dd      	b.n	80014b6 <UART_SetConfig+0x52>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80014fa:	4293      	cmp	r3, r2
 80014fc:	d002      	beq.n	8001504 <UART_SetConfig+0xa0>
 80014fe:	4a10      	ldr	r2, [pc, #64]	; (8001540 <UART_SetConfig+0xdc>)
 8001500:	4293      	cmp	r3, r2
 8001502:	d117      	bne.n	8001534 <UART_SetConfig+0xd0>
      pclk = HAL_RCC_GetPCLK2Freq();
 8001504:	f7ff fbf0 	bl	8000ce8 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001508:	6863      	ldr	r3, [r4, #4]
 800150a:	2119      	movs	r1, #25
 800150c:	009a      	lsls	r2, r3, #2
 800150e:	fba0 0101 	umull	r0, r1, r0, r1
 8001512:	0f9b      	lsrs	r3, r3, #30
 8001514:	f7fe fe5c 	bl	80001d0 <__aeabi_uldivmod>
 8001518:	2264      	movs	r2, #100	; 0x64
 800151a:	fbb0 f1f2 	udiv	r1, r0, r2
 800151e:	fb02 0311 	mls	r3, r2, r1, r0
 8001522:	6824      	ldr	r4, [r4, #0]
 8001524:	011b      	lsls	r3, r3, #4
 8001526:	3332      	adds	r3, #50	; 0x32
 8001528:	fbb3 f3f2 	udiv	r3, r3, r2
 800152c:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 8001530:	60a3      	str	r3, [r4, #8]
}
 8001532:	e7de      	b.n	80014f2 <UART_SetConfig+0x8e>
      pclk = HAL_RCC_GetPCLK1Freq();
 8001534:	f7ff fbc8 	bl	8000cc8 <HAL_RCC_GetPCLK1Freq>
 8001538:	e7e6      	b.n	8001508 <UART_SetConfig+0xa4>
 800153a:	bf00      	nop
 800153c:	40011000 	.word	0x40011000
 8001540:	40011400 	.word	0x40011400

08001544 <UART_WaitOnFlagUntilTimeout.constprop.3>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
 8001544:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001546:	4604      	mov	r4, r0
 8001548:	460e      	mov	r6, r1
 800154a:	4617      	mov	r7, r2
 800154c:	461d      	mov	r5, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800154e:	6821      	ldr	r1, [r4, #0]
 8001550:	680b      	ldr	r3, [r1, #0]
 8001552:	ea36 0303 	bics.w	r3, r6, r3
 8001556:	d101      	bne.n	800155c <UART_WaitOnFlagUntilTimeout.constprop.3+0x18>
  return HAL_OK;
 8001558:	2000      	movs	r0, #0
 800155a:	e014      	b.n	8001586 <UART_WaitOnFlagUntilTimeout.constprop.3+0x42>
    if (Timeout != HAL_MAX_DELAY)
 800155c:	1c6b      	adds	r3, r5, #1
 800155e:	d0f7      	beq.n	8001550 <UART_WaitOnFlagUntilTimeout.constprop.3+0xc>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001560:	b995      	cbnz	r5, 8001588 <UART_WaitOnFlagUntilTimeout.constprop.3+0x44>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001562:	6823      	ldr	r3, [r4, #0]
 8001564:	68da      	ldr	r2, [r3, #12]
 8001566:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800156a:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800156c:	695a      	ldr	r2, [r3, #20]
 800156e:	f022 0201 	bic.w	r2, r2, #1
 8001572:	615a      	str	r2, [r3, #20]
        huart->gState  = HAL_UART_STATE_READY;
 8001574:	2320      	movs	r3, #32
 8001576:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800157a:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
        __HAL_UNLOCK(huart);
 800157e:	2300      	movs	r3, #0
 8001580:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
 8001584:	2003      	movs	r0, #3
}
 8001586:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001588:	f7fe ffc8 	bl	800051c <HAL_GetTick>
 800158c:	1bc0      	subs	r0, r0, r7
 800158e:	4285      	cmp	r5, r0
 8001590:	d2dd      	bcs.n	800154e <UART_WaitOnFlagUntilTimeout.constprop.3+0xa>
 8001592:	e7e6      	b.n	8001562 <UART_WaitOnFlagUntilTimeout.constprop.3+0x1e>

08001594 <HAL_UART_Init>:
{
 8001594:	b510      	push	{r4, lr}
  if (huart == NULL)
 8001596:	4604      	mov	r4, r0
 8001598:	b340      	cbz	r0, 80015ec <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 800159a:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800159e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80015a2:	b91b      	cbnz	r3, 80015ac <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 80015a4:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 80015a8:	f000 fff6 	bl	8002598 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 80015ac:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80015ae:	2324      	movs	r3, #36	; 0x24
 80015b0:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 80015b4:	68d3      	ldr	r3, [r2, #12]
 80015b6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80015ba:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 80015bc:	4620      	mov	r0, r4
 80015be:	f7ff ff51 	bl	8001464 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80015c2:	6823      	ldr	r3, [r4, #0]
 80015c4:	691a      	ldr	r2, [r3, #16]
 80015c6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80015ca:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80015cc:	695a      	ldr	r2, [r3, #20]
 80015ce:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80015d2:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 80015d4:	68da      	ldr	r2, [r3, #12]
 80015d6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80015da:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80015dc:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 80015de:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80015e0:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80015e2:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80015e6:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
}
 80015ea:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80015ec:	2001      	movs	r0, #1
 80015ee:	e7fc      	b.n	80015ea <HAL_UART_Init+0x56>

080015f0 <HAL_UART_Transmit>:
{
 80015f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80015f4:	461f      	mov	r7, r3
  if (huart->gState == HAL_UART_STATE_READY)
 80015f6:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80015fa:	2b20      	cmp	r3, #32
{
 80015fc:	4604      	mov	r4, r0
 80015fe:	460d      	mov	r5, r1
 8001600:	4690      	mov	r8, r2
  if (huart->gState == HAL_UART_STATE_READY)
 8001602:	d14f      	bne.n	80016a4 <HAL_UART_Transmit+0xb4>
    if ((pData == NULL) || (Size == 0U))
 8001604:	2900      	cmp	r1, #0
 8001606:	d04b      	beq.n	80016a0 <HAL_UART_Transmit+0xb0>
 8001608:	2a00      	cmp	r2, #0
 800160a:	d049      	beq.n	80016a0 <HAL_UART_Transmit+0xb0>
    __HAL_LOCK(huart);
 800160c:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8001610:	2b01      	cmp	r3, #1
 8001612:	d047      	beq.n	80016a4 <HAL_UART_Transmit+0xb4>
 8001614:	2301      	movs	r3, #1
 8001616:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800161a:	f04f 0900 	mov.w	r9, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800161e:	2321      	movs	r3, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001620:	f8c0 903c 	str.w	r9, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001624:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    tickstart = HAL_GetTick();
 8001628:	f7fe ff78 	bl	800051c <HAL_GetTick>
    huart->TxXferSize = Size;
 800162c:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    tickstart = HAL_GetTick();
 8001630:	4606      	mov	r6, r0
    huart->TxXferCount = Size;
 8001632:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    __HAL_UNLOCK(huart);
 8001636:	f884 9038 	strb.w	r9, [r4, #56]	; 0x38
    while (huart->TxXferCount > 0U)
 800163a:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 800163c:	b29b      	uxth	r3, r3
 800163e:	b953      	cbnz	r3, 8001656 <HAL_UART_Transmit+0x66>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001640:	463b      	mov	r3, r7
 8001642:	4632      	mov	r2, r6
 8001644:	2140      	movs	r1, #64	; 0x40
 8001646:	4620      	mov	r0, r4
 8001648:	f7ff ff7c 	bl	8001544 <UART_WaitOnFlagUntilTimeout.constprop.3>
 800164c:	b998      	cbnz	r0, 8001676 <HAL_UART_Transmit+0x86>
    huart->gState = HAL_UART_STATE_READY;
 800164e:	2320      	movs	r3, #32
 8001650:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    return HAL_OK;
 8001654:	e010      	b.n	8001678 <HAL_UART_Transmit+0x88>
      huart->TxXferCount--;
 8001656:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8001658:	3b01      	subs	r3, #1
 800165a:	b29b      	uxth	r3, r3
 800165c:	84e3      	strh	r3, [r4, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800165e:	68a3      	ldr	r3, [r4, #8]
 8001660:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001664:	4632      	mov	r2, r6
 8001666:	463b      	mov	r3, r7
 8001668:	f04f 0180 	mov.w	r1, #128	; 0x80
 800166c:	4620      	mov	r0, r4
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800166e:	d10e      	bne.n	800168e <HAL_UART_Transmit+0x9e>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001670:	f7ff ff68 	bl	8001544 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8001674:	b110      	cbz	r0, 800167c <HAL_UART_Transmit+0x8c>
          return HAL_TIMEOUT;
 8001676:	2003      	movs	r0, #3
}
 8001678:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800167c:	882b      	ldrh	r3, [r5, #0]
 800167e:	6822      	ldr	r2, [r4, #0]
 8001680:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001684:	6053      	str	r3, [r2, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8001686:	6923      	ldr	r3, [r4, #16]
 8001688:	b943      	cbnz	r3, 800169c <HAL_UART_Transmit+0xac>
          pData += 2U;
 800168a:	3502      	adds	r5, #2
 800168c:	e7d5      	b.n	800163a <HAL_UART_Transmit+0x4a>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800168e:	f7ff ff59 	bl	8001544 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8001692:	2800      	cmp	r0, #0
 8001694:	d1ef      	bne.n	8001676 <HAL_UART_Transmit+0x86>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8001696:	6823      	ldr	r3, [r4, #0]
 8001698:	782a      	ldrb	r2, [r5, #0]
 800169a:	605a      	str	r2, [r3, #4]
 800169c:	3501      	adds	r5, #1
 800169e:	e7cc      	b.n	800163a <HAL_UART_Transmit+0x4a>
      return  HAL_ERROR;
 80016a0:	2001      	movs	r0, #1
 80016a2:	e7e9      	b.n	8001678 <HAL_UART_Transmit+0x88>
    return HAL_BUSY;
 80016a4:	2002      	movs	r0, #2
 80016a6:	e7e7      	b.n	8001678 <HAL_UART_Transmit+0x88>

080016a8 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80016a8:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 80016aa:	f000 fc43 	bl	8001f34 <vTaskStartScheduler>
  
  return osOK;
}
 80016ae:	2000      	movs	r0, #0
 80016b0:	bd08      	pop	{r3, pc}

080016b2 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80016b2:	b530      	push	{r4, r5, lr}

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80016b4:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
 80016b8:	8a02      	ldrh	r2, [r0, #16]
{
 80016ba:	460b      	mov	r3, r1
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80016bc:	e9d0 1500 	ldrd	r1, r5, [r0]
{
 80016c0:	b085      	sub	sp, #20
  if (priority != osPriorityError) {
 80016c2:	2c84      	cmp	r4, #132	; 0x84
    fpriority += (priority - osPriorityIdle);
 80016c4:	bf14      	ite	ne
 80016c6:	3403      	addne	r4, #3
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80016c8:	2400      	moveq	r4, #0
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80016ca:	a803      	add	r0, sp, #12
 80016cc:	e9cd 4000 	strd	r4, r0, [sp]
 80016d0:	4628      	mov	r0, r5
 80016d2:	f000 fb5b 	bl	8001d8c <xTaskCreate>
 80016d6:	2801      	cmp	r0, #1
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80016d8:	bf0c      	ite	eq
 80016da:	9803      	ldreq	r0, [sp, #12]
    return NULL;
 80016dc:	2000      	movne	r0, #0
}
 80016de:	b005      	add	sp, #20
 80016e0:	bd30      	pop	{r4, r5, pc}

080016e2 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80016e2:	b508      	push	{r3, lr}
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80016e4:	2800      	cmp	r0, #0
 80016e6:	bf08      	it	eq
 80016e8:	2001      	moveq	r0, #1
 80016ea:	f000 fd6f 	bl	80021cc <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80016ee:	2000      	movs	r0, #0
 80016f0:	bd08      	pop	{r3, pc}

080016f2 <osSystickHandler>:
* @brief  Handles the tick increment
* @param  none.
* @retval none.
*/
void osSystickHandler(void)
{
 80016f2:	b508      	push	{r3, lr}

#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80016f4:	f000 fdc8 	bl	8002288 <xTaskGetSchedulerState>
 80016f8:	2801      	cmp	r0, #1
 80016fa:	d003      	beq.n	8001704 <osSystickHandler+0x12>
#endif  /* INCLUDE_xTaskGetSchedulerState */  
    xPortSysTickHandler();
#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  }
#endif  /* INCLUDE_xTaskGetSchedulerState */  
}
 80016fc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    xPortSysTickHandler();
 8001700:	f000 ba00 	b.w	8001b04 <xPortSysTickHandler>
}
 8001704:	bd08      	pop	{r3, pc}
	...

08001708 <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8001708:	b510      	push	{r4, lr}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800170a:	4b0f      	ldr	r3, [pc, #60]	; (8001748 <prvInsertBlockIntoFreeList+0x40>)
 800170c:	681a      	ldr	r2, [r3, #0]
 800170e:	4282      	cmp	r2, r0
 8001710:	d318      	bcc.n	8001744 <prvInsertBlockIntoFreeList+0x3c>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8001712:	685c      	ldr	r4, [r3, #4]
 8001714:	1919      	adds	r1, r3, r4
 8001716:	4288      	cmp	r0, r1
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8001718:	bf01      	itttt	eq
 800171a:	6841      	ldreq	r1, [r0, #4]
 800171c:	4618      	moveq	r0, r3
 800171e:	1909      	addeq	r1, r1, r4
 8001720:	6059      	streq	r1, [r3, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8001722:	6844      	ldr	r4, [r0, #4]
 8001724:	1901      	adds	r1, r0, r4
 8001726:	428a      	cmp	r2, r1
 8001728:	d107      	bne.n	800173a <prvInsertBlockIntoFreeList+0x32>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800172a:	4908      	ldr	r1, [pc, #32]	; (800174c <prvInsertBlockIntoFreeList+0x44>)
 800172c:	6809      	ldr	r1, [r1, #0]
 800172e:	428a      	cmp	r2, r1
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8001730:	bf1f      	itttt	ne
 8001732:	6851      	ldrne	r1, [r2, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8001734:	6812      	ldrne	r2, [r2, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8001736:	1909      	addne	r1, r1, r4
 8001738:	6041      	strne	r1, [r0, #4]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800173a:	4298      	cmp	r0, r3
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800173c:	6002      	str	r2, [r0, #0]
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800173e:	bf18      	it	ne
 8001740:	6018      	strne	r0, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8001742:	bd10      	pop	{r4, pc}
 8001744:	4613      	mov	r3, r2
 8001746:	e7e1      	b.n	800170c <prvInsertBlockIntoFreeList+0x4>
 8001748:	20003c3c 	.word	0x20003c3c
 800174c:	2000002c 	.word	0x2000002c

08001750 <pvPortMalloc>:
{
 8001750:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001754:	4604      	mov	r4, r0
	vTaskSuspendAll();
 8001756:	f000 fc29 	bl	8001fac <vTaskSuspendAll>
		if( pxEnd == NULL )
 800175a:	493d      	ldr	r1, [pc, #244]	; (8001850 <pvPortMalloc+0x100>)
 800175c:	4d3d      	ldr	r5, [pc, #244]	; (8001854 <pvPortMalloc+0x104>)
 800175e:	680b      	ldr	r3, [r1, #0]
 8001760:	b9fb      	cbnz	r3, 80017a2 <pvPortMalloc+0x52>
	uxAddress = ( size_t ) ucHeap;
 8001762:	4a3d      	ldr	r2, [pc, #244]	; (8001858 <pvPortMalloc+0x108>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8001764:	0756      	lsls	r6, r2, #29
 8001766:	f502 5370 	add.w	r3, r2, #15360	; 0x3c00
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800176a:	bf1d      	ittte	ne
 800176c:	3207      	addne	r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800176e:	f022 0207 	bicne.w	r2, r2, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8001772:	1a9b      	subne	r3, r3, r2
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8001774:	f44f 5370 	moveq.w	r3, #15360	; 0x3c00
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8001778:	4413      	add	r3, r2
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800177a:	4e38      	ldr	r6, [pc, #224]	; (800185c <pvPortMalloc+0x10c>)
	uxAddress -= xHeapStructSize;
 800177c:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800177e:	f023 0307 	bic.w	r3, r3, #7
	xStart.xBlockSize = ( size_t ) 0;
 8001782:	2000      	movs	r0, #0
 8001784:	6070      	str	r0, [r6, #4]
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8001786:	6032      	str	r2, [r6, #0]
	pxEnd->pxNextFreeBlock = NULL;
 8001788:	e9c3 0000 	strd	r0, r0, [r3]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800178c:	1a98      	subs	r0, r3, r2
	pxEnd = ( void * ) uxAddress;
 800178e:	600b      	str	r3, [r1, #0]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8001790:	e9c2 3000 	strd	r3, r0, [r2]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001794:	4b32      	ldr	r3, [pc, #200]	; (8001860 <pvPortMalloc+0x110>)
 8001796:	6018      	str	r0, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001798:	4b32      	ldr	r3, [pc, #200]	; (8001864 <pvPortMalloc+0x114>)
 800179a:	6018      	str	r0, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800179c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80017a0:	602b      	str	r3, [r5, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80017a2:	682f      	ldr	r7, [r5, #0]
 80017a4:	4227      	tst	r7, r4
 80017a6:	d14e      	bne.n	8001846 <pvPortMalloc+0xf6>
			if( xWantedSize > 0 )
 80017a8:	2c00      	cmp	r4, #0
 80017aa:	d03f      	beq.n	800182c <pvPortMalloc+0xdc>
				xWantedSize += xHeapStructSize;
 80017ac:	f104 0308 	add.w	r3, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80017b0:	0758      	lsls	r0, r3, #29
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80017b2:	bf1c      	itt	ne
 80017b4:	f023 0307 	bicne.w	r3, r3, #7
 80017b8:	3308      	addne	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d043      	beq.n	8001846 <pvPortMalloc+0xf6>
 80017be:	4a29      	ldr	r2, [pc, #164]	; (8001864 <pvPortMalloc+0x114>)
 80017c0:	6816      	ldr	r6, [r2, #0]
 80017c2:	429e      	cmp	r6, r3
 80017c4:	4690      	mov	r8, r2
 80017c6:	d33e      	bcc.n	8001846 <pvPortMalloc+0xf6>
				pxBlock = xStart.pxNextFreeBlock;
 80017c8:	4a24      	ldr	r2, [pc, #144]	; (800185c <pvPortMalloc+0x10c>)
 80017ca:	6815      	ldr	r5, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80017cc:	6868      	ldr	r0, [r5, #4]
 80017ce:	4298      	cmp	r0, r3
 80017d0:	d201      	bcs.n	80017d6 <pvPortMalloc+0x86>
 80017d2:	682c      	ldr	r4, [r5, #0]
 80017d4:	b9a4      	cbnz	r4, 8001800 <pvPortMalloc+0xb0>
				if( pxBlock != pxEnd )
 80017d6:	6809      	ldr	r1, [r1, #0]
 80017d8:	42a9      	cmp	r1, r5
 80017da:	d034      	beq.n	8001846 <pvPortMalloc+0xf6>
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80017dc:	6829      	ldr	r1, [r5, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80017de:	6814      	ldr	r4, [r2, #0]
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80017e0:	6011      	str	r1, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80017e2:	1ac2      	subs	r2, r0, r3
 80017e4:	2a10      	cmp	r2, #16
 80017e6:	d912      	bls.n	800180e <pvPortMalloc+0xbe>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80017e8:	18e8      	adds	r0, r5, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80017ea:	0741      	lsls	r1, r0, #29
 80017ec:	d00b      	beq.n	8001806 <pvPortMalloc+0xb6>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80017ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80017f2:	f383 8811 	msr	BASEPRI, r3
 80017f6:	f3bf 8f6f 	isb	sy
 80017fa:	f3bf 8f4f 	dsb	sy
 80017fe:	e7fe      	b.n	80017fe <pvPortMalloc+0xae>
 8001800:	462a      	mov	r2, r5
 8001802:	4625      	mov	r5, r4
 8001804:	e7e2      	b.n	80017cc <pvPortMalloc+0x7c>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8001806:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 8001808:	606b      	str	r3, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800180a:	f7ff ff7d 	bl	8001708 <prvInsertBlockIntoFreeList>
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800180e:	4914      	ldr	r1, [pc, #80]	; (8001860 <pvPortMalloc+0x110>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8001810:	686b      	ldr	r3, [r5, #4]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8001812:	6808      	ldr	r0, [r1, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8001814:	1af6      	subs	r6, r6, r3
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8001816:	431f      	orrs	r7, r3
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8001818:	4286      	cmp	r6, r0
					pxBlock->pxNextFreeBlock = NULL;
 800181a:	f04f 0300 	mov.w	r3, #0
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800181e:	f8c8 6000 	str.w	r6, [r8]
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8001822:	bf38      	it	cc
 8001824:	600e      	strcc	r6, [r1, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8001826:	3408      	adds	r4, #8
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8001828:	606f      	str	r7, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800182a:	602b      	str	r3, [r5, #0]
	( void ) xTaskResumeAll();
 800182c:	f000 fc58 	bl	80020e0 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8001830:	0763      	lsls	r3, r4, #29
 8001832:	d00a      	beq.n	800184a <pvPortMalloc+0xfa>
 8001834:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001838:	f383 8811 	msr	BASEPRI, r3
 800183c:	f3bf 8f6f 	isb	sy
 8001840:	f3bf 8f4f 	dsb	sy
 8001844:	e7fe      	b.n	8001844 <pvPortMalloc+0xf4>
void *pvReturn = NULL;
 8001846:	2400      	movs	r4, #0
 8001848:	e7f0      	b.n	800182c <pvPortMalloc+0xdc>
}
 800184a:	4620      	mov	r0, r4
 800184c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001850:	2000002c 	.word	0x2000002c
 8001854:	20003c30 	.word	0x20003c30
 8001858:	20000030 	.word	0x20000030
 800185c:	20003c3c 	.word	0x20003c3c
 8001860:	20003c38 	.word	0x20003c38
 8001864:	20003c34 	.word	0x20003c34

08001868 <vPortFree>:
{
 8001868:	b510      	push	{r4, lr}
	if( pv != NULL )
 800186a:	4604      	mov	r4, r0
 800186c:	b370      	cbz	r0, 80018cc <vPortFree+0x64>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800186e:	4a18      	ldr	r2, [pc, #96]	; (80018d0 <vPortFree+0x68>)
 8001870:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8001874:	6812      	ldr	r2, [r2, #0]
 8001876:	4213      	tst	r3, r2
 8001878:	d108      	bne.n	800188c <vPortFree+0x24>
 800187a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800187e:	f383 8811 	msr	BASEPRI, r3
 8001882:	f3bf 8f6f 	isb	sy
 8001886:	f3bf 8f4f 	dsb	sy
 800188a:	e7fe      	b.n	800188a <vPortFree+0x22>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800188c:	f850 1c08 	ldr.w	r1, [r0, #-8]
 8001890:	b141      	cbz	r1, 80018a4 <vPortFree+0x3c>
 8001892:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001896:	f383 8811 	msr	BASEPRI, r3
 800189a:	f3bf 8f6f 	isb	sy
 800189e:	f3bf 8f4f 	dsb	sy
 80018a2:	e7fe      	b.n	80018a2 <vPortFree+0x3a>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80018a4:	ea23 0302 	bic.w	r3, r3, r2
 80018a8:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 80018ac:	f000 fb7e 	bl	8001fac <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 80018b0:	4a08      	ldr	r2, [pc, #32]	; (80018d4 <vPortFree+0x6c>)
 80018b2:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80018b6:	6811      	ldr	r1, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80018b8:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 80018bc:	440b      	add	r3, r1
 80018be:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80018c0:	f7ff ff22 	bl	8001708 <prvInsertBlockIntoFreeList>
}
 80018c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				( void ) xTaskResumeAll();
 80018c8:	f000 bc0a 	b.w	80020e0 <xTaskResumeAll>
}
 80018cc:	bd10      	pop	{r4, pc}
 80018ce:	bf00      	nop
 80018d0:	20003c30 	.word	0x20003c30
 80018d4:	20003c34 	.word	0x20003c34

080018d8 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80018d8:	f100 0308 	add.w	r3, r0, #8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80018dc:	f04f 32ff 	mov.w	r2, #4294967295
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80018e0:	6043      	str	r3, [r0, #4]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80018e2:	e9c0 2302 	strd	r2, r3, [r0, #8]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80018e6:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80018e8:	2300      	movs	r3, #0
 80018ea:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80018ec:	4770      	bx	lr

080018ee <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80018ee:	2300      	movs	r3, #0
 80018f0:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80018f2:	4770      	bx	lr

080018f4 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 80018f4:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80018f6:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80018f8:	689a      	ldr	r2, [r3, #8]
 80018fa:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80018fc:	689a      	ldr	r2, [r3, #8]
 80018fe:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8001900:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 8001902:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxContainer = pxList;
 8001904:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8001906:	3301      	adds	r3, #1
 8001908:	6003      	str	r3, [r0, #0]
}
 800190a:	4770      	bx	lr

0800190c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800190c:	680a      	ldr	r2, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800190e:	1c53      	adds	r3, r2, #1
{
 8001910:	b530      	push	{r4, r5, lr}
	if( xValueOfInsertion == portMAX_DELAY )
 8001912:	d10a      	bne.n	800192a <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8001914:	6903      	ldr	r3, [r0, #16]
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8001916:	685a      	ldr	r2, [r3, #4]
 8001918:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800191a:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800191c:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 800191e:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 8001920:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxContainer = pxList;
 8001922:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8001924:	3301      	adds	r3, #1
 8001926:	6003      	str	r3, [r0, #0]
}
 8001928:	bd30      	pop	{r4, r5, pc}
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800192a:	f100 0308 	add.w	r3, r0, #8
 800192e:	685c      	ldr	r4, [r3, #4]
 8001930:	6825      	ldr	r5, [r4, #0]
 8001932:	4295      	cmp	r5, r2
 8001934:	d8ef      	bhi.n	8001916 <vListInsert+0xa>
 8001936:	4623      	mov	r3, r4
 8001938:	e7f9      	b.n	800192e <vListInsert+0x22>

0800193a <uxListRemove>:
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800193a:	e9d0 1201 	ldrd	r1, r2, [r0, #4]
List_t * const pxList = pxItemToRemove->pxContainer;
 800193e:	6903      	ldr	r3, [r0, #16]
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001940:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001942:	6882      	ldr	r2, [r0, #8]
 8001944:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8001946:	6859      	ldr	r1, [r3, #4]
 8001948:	4281      	cmp	r1, r0
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800194a:	bf08      	it	eq
 800194c:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800194e:	2200      	movs	r2, #0
 8001950:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8001952:	681a      	ldr	r2, [r3, #0]
 8001954:	3a01      	subs	r2, #1
 8001956:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8001958:	6818      	ldr	r0, [r3, #0]
}
 800195a:	4770      	bx	lr

0800195c <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800195c:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 800195e:	2300      	movs	r3, #0
 8001960:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8001962:	4b0d      	ldr	r3, [pc, #52]	; (8001998 <prvTaskExitError+0x3c>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	3301      	adds	r3, #1
 8001968:	d008      	beq.n	800197c <prvTaskExitError+0x20>
 800196a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800196e:	f383 8811 	msr	BASEPRI, r3
 8001972:	f3bf 8f6f 	isb	sy
 8001976:	f3bf 8f4f 	dsb	sy
 800197a:	e7fe      	b.n	800197a <prvTaskExitError+0x1e>
 800197c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001980:	f383 8811 	msr	BASEPRI, r3
 8001984:	f3bf 8f6f 	isb	sy
 8001988:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800198c:	9b01      	ldr	r3, [sp, #4]
 800198e:	2b00      	cmp	r3, #0
 8001990:	d0fc      	beq.n	800198c <prvTaskExitError+0x30>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8001992:	b002      	add	sp, #8
 8001994:	4770      	bx	lr
 8001996:	bf00      	nop
 8001998:	20000008 	.word	0x20000008

0800199c <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800199c:	4808      	ldr	r0, [pc, #32]	; (80019c0 <prvPortStartFirstTask+0x24>)
 800199e:	6800      	ldr	r0, [r0, #0]
 80019a0:	6800      	ldr	r0, [r0, #0]
 80019a2:	f380 8808 	msr	MSP, r0
 80019a6:	f04f 0000 	mov.w	r0, #0
 80019aa:	f380 8814 	msr	CONTROL, r0
 80019ae:	b662      	cpsie	i
 80019b0:	b661      	cpsie	f
 80019b2:	f3bf 8f4f 	dsb	sy
 80019b6:	f3bf 8f6f 	isb	sy
 80019ba:	df00      	svc	0
 80019bc:	bf00      	nop
 80019be:	0000      	.short	0x0000
 80019c0:	e000ed08 	.word	0xe000ed08

080019c4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80019c4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80019d4 <vPortEnableVFP+0x10>
 80019c8:	6801      	ldr	r1, [r0, #0]
 80019ca:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80019ce:	6001      	str	r1, [r0, #0]
 80019d0:	4770      	bx	lr
 80019d2:	0000      	.short	0x0000
 80019d4:	e000ed88 	.word	0xe000ed88

080019d8 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80019d8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80019dc:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80019e0:	4b07      	ldr	r3, [pc, #28]	; (8001a00 <pxPortInitialiseStack+0x28>)
 80019e2:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80019e6:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80019ea:	f06f 0302 	mvn.w	r3, #2
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80019ee:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80019f2:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80019f6:	f840 3c24 	str.w	r3, [r0, #-36]
}
 80019fa:	3844      	subs	r0, #68	; 0x44
 80019fc:	4770      	bx	lr
 80019fe:	bf00      	nop
 8001a00:	0800195d 	.word	0x0800195d
	...

08001a10 <SVC_Handler>:
	__asm volatile (
 8001a10:	4b07      	ldr	r3, [pc, #28]	; (8001a30 <pxCurrentTCBConst2>)
 8001a12:	6819      	ldr	r1, [r3, #0]
 8001a14:	6808      	ldr	r0, [r1, #0]
 8001a16:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001a1a:	f380 8809 	msr	PSP, r0
 8001a1e:	f3bf 8f6f 	isb	sy
 8001a22:	f04f 0000 	mov.w	r0, #0
 8001a26:	f380 8811 	msr	BASEPRI, r0
 8001a2a:	4770      	bx	lr
 8001a2c:	f3af 8000 	nop.w

08001a30 <pxCurrentTCBConst2>:
 8001a30:	20003c4c 	.word	0x20003c4c

08001a34 <vPortEnterCritical>:
 8001a34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001a38:	f383 8811 	msr	BASEPRI, r3
 8001a3c:	f3bf 8f6f 	isb	sy
 8001a40:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 8001a44:	4a0a      	ldr	r2, [pc, #40]	; (8001a70 <vPortEnterCritical+0x3c>)
 8001a46:	6813      	ldr	r3, [r2, #0]
 8001a48:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 8001a4a:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 8001a4c:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 8001a4e:	d10d      	bne.n	8001a6c <vPortEnterCritical+0x38>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8001a50:	4b08      	ldr	r3, [pc, #32]	; (8001a74 <vPortEnterCritical+0x40>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f013 0fff 	tst.w	r3, #255	; 0xff
 8001a58:	d008      	beq.n	8001a6c <vPortEnterCritical+0x38>
 8001a5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001a5e:	f383 8811 	msr	BASEPRI, r3
 8001a62:	f3bf 8f6f 	isb	sy
 8001a66:	f3bf 8f4f 	dsb	sy
 8001a6a:	e7fe      	b.n	8001a6a <vPortEnterCritical+0x36>
}
 8001a6c:	4770      	bx	lr
 8001a6e:	bf00      	nop
 8001a70:	20000008 	.word	0x20000008
 8001a74:	e000ed04 	.word	0xe000ed04

08001a78 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 8001a78:	4a08      	ldr	r2, [pc, #32]	; (8001a9c <vPortExitCritical+0x24>)
 8001a7a:	6813      	ldr	r3, [r2, #0]
 8001a7c:	b943      	cbnz	r3, 8001a90 <vPortExitCritical+0x18>
 8001a7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001a82:	f383 8811 	msr	BASEPRI, r3
 8001a86:	f3bf 8f6f 	isb	sy
 8001a8a:	f3bf 8f4f 	dsb	sy
 8001a8e:	e7fe      	b.n	8001a8e <vPortExitCritical+0x16>
	uxCriticalNesting--;
 8001a90:	3b01      	subs	r3, #1
 8001a92:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8001a94:	b90b      	cbnz	r3, 8001a9a <vPortExitCritical+0x22>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8001a96:	f383 8811 	msr	BASEPRI, r3
}
 8001a9a:	4770      	bx	lr
 8001a9c:	20000008 	.word	0x20000008

08001aa0 <PendSV_Handler>:
	__asm volatile
 8001aa0:	f3ef 8009 	mrs	r0, PSP
 8001aa4:	f3bf 8f6f 	isb	sy
 8001aa8:	4b15      	ldr	r3, [pc, #84]	; (8001b00 <pxCurrentTCBConst>)
 8001aaa:	681a      	ldr	r2, [r3, #0]
 8001aac:	f01e 0f10 	tst.w	lr, #16
 8001ab0:	bf08      	it	eq
 8001ab2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8001ab6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001aba:	6010      	str	r0, [r2, #0]
 8001abc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8001ac0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8001ac4:	f380 8811 	msr	BASEPRI, r0
 8001ac8:	f3bf 8f4f 	dsb	sy
 8001acc:	f3bf 8f6f 	isb	sy
 8001ad0:	f000 fba0 	bl	8002214 <vTaskSwitchContext>
 8001ad4:	f04f 0000 	mov.w	r0, #0
 8001ad8:	f380 8811 	msr	BASEPRI, r0
 8001adc:	bc09      	pop	{r0, r3}
 8001ade:	6819      	ldr	r1, [r3, #0]
 8001ae0:	6808      	ldr	r0, [r1, #0]
 8001ae2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001ae6:	f01e 0f10 	tst.w	lr, #16
 8001aea:	bf08      	it	eq
 8001aec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8001af0:	f380 8809 	msr	PSP, r0
 8001af4:	f3bf 8f6f 	isb	sy
 8001af8:	4770      	bx	lr
 8001afa:	bf00      	nop
 8001afc:	f3af 8000 	nop.w

08001b00 <pxCurrentTCBConst>:
 8001b00:	20003c4c 	.word	0x20003c4c

08001b04 <xPortSysTickHandler>:
{
 8001b04:	b508      	push	{r3, lr}
	__asm volatile
 8001b06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b0a:	f383 8811 	msr	BASEPRI, r3
 8001b0e:	f3bf 8f6f 	isb	sy
 8001b12:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 8001b16:	f000 fa51 	bl	8001fbc <xTaskIncrementTick>
 8001b1a:	b118      	cbz	r0, 8001b24 <xPortSysTickHandler+0x20>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8001b1c:	4b03      	ldr	r3, [pc, #12]	; (8001b2c <xPortSysTickHandler+0x28>)
 8001b1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001b22:	601a      	str	r2, [r3, #0]
	__asm volatile
 8001b24:	2300      	movs	r3, #0
 8001b26:	f383 8811 	msr	BASEPRI, r3
}
 8001b2a:	bd08      	pop	{r3, pc}
 8001b2c:	e000ed04 	.word	0xe000ed04

08001b30 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8001b30:	4a08      	ldr	r2, [pc, #32]	; (8001b54 <vPortSetupTimerInterrupt+0x24>)
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8001b32:	4909      	ldr	r1, [pc, #36]	; (8001b58 <vPortSetupTimerInterrupt+0x28>)
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8001b34:	2300      	movs	r3, #0
 8001b36:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8001b38:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8001b3a:	4b08      	ldr	r3, [pc, #32]	; (8001b5c <vPortSetupTimerInterrupt+0x2c>)
 8001b3c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b46:	4906      	ldr	r1, [pc, #24]	; (8001b60 <vPortSetupTimerInterrupt+0x30>)
 8001b48:	3b01      	subs	r3, #1
 8001b4a:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8001b4c:	2307      	movs	r3, #7
 8001b4e:	6013      	str	r3, [r2, #0]
}
 8001b50:	4770      	bx	lr
 8001b52:	bf00      	nop
 8001b54:	e000e010 	.word	0xe000e010
 8001b58:	e000e018 	.word	0xe000e018
 8001b5c:	2000000c 	.word	0x2000000c
 8001b60:	e000e014 	.word	0xe000e014

08001b64 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8001b64:	4b39      	ldr	r3, [pc, #228]	; (8001c4c <xPortStartScheduler+0xe8>)
 8001b66:	4a3a      	ldr	r2, [pc, #232]	; (8001c50 <xPortStartScheduler+0xec>)
{
 8001b68:	b513      	push	{r0, r1, r4, lr}
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8001b6a:	6819      	ldr	r1, [r3, #0]
 8001b6c:	4291      	cmp	r1, r2
 8001b6e:	d108      	bne.n	8001b82 <xPortStartScheduler+0x1e>
	__asm volatile
 8001b70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b74:	f383 8811 	msr	BASEPRI, r3
 8001b78:	f3bf 8f6f 	isb	sy
 8001b7c:	f3bf 8f4f 	dsb	sy
 8001b80:	e7fe      	b.n	8001b80 <xPortStartScheduler+0x1c>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8001b82:	681a      	ldr	r2, [r3, #0]
 8001b84:	4b33      	ldr	r3, [pc, #204]	; (8001c54 <xPortStartScheduler+0xf0>)
 8001b86:	429a      	cmp	r2, r3
 8001b88:	d108      	bne.n	8001b9c <xPortStartScheduler+0x38>
 8001b8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b8e:	f383 8811 	msr	BASEPRI, r3
 8001b92:	f3bf 8f6f 	isb	sy
 8001b96:	f3bf 8f4f 	dsb	sy
 8001b9a:	e7fe      	b.n	8001b9a <xPortStartScheduler+0x36>
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8001b9c:	4b2e      	ldr	r3, [pc, #184]	; (8001c58 <xPortStartScheduler+0xf4>)
 8001b9e:	781a      	ldrb	r2, [r3, #0]
 8001ba0:	b2d2      	uxtb	r2, r2
 8001ba2:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8001ba4:	22ff      	movs	r2, #255	; 0xff
 8001ba6:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8001ba8:	781b      	ldrb	r3, [r3, #0]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8001baa:	4a2c      	ldr	r2, [pc, #176]	; (8001c5c <xPortStartScheduler+0xf8>)
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8001bac:	b2db      	uxtb	r3, r3
 8001bae:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8001bb2:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8001bb6:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001bba:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8001bbc:	4b28      	ldr	r3, [pc, #160]	; (8001c60 <xPortStartScheduler+0xfc>)
 8001bbe:	2207      	movs	r2, #7
 8001bc0:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8001bc2:	2100      	movs	r1, #0
 8001bc4:	f89d 0003 	ldrb.w	r0, [sp, #3]
 8001bc8:	0600      	lsls	r0, r0, #24
 8001bca:	f102 34ff 	add.w	r4, r2, #4294967295
 8001bce:	d40d      	bmi.n	8001bec <xPortStartScheduler+0x88>
 8001bd0:	b101      	cbz	r1, 8001bd4 <xPortStartScheduler+0x70>
 8001bd2:	601a      	str	r2, [r3, #0]
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8001bd4:	681a      	ldr	r2, [r3, #0]
 8001bd6:	2a03      	cmp	r2, #3
 8001bd8:	d011      	beq.n	8001bfe <xPortStartScheduler+0x9a>
 8001bda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001bde:	f383 8811 	msr	BASEPRI, r3
 8001be2:	f3bf 8f6f 	isb	sy
 8001be6:	f3bf 8f4f 	dsb	sy
 8001bea:	e7fe      	b.n	8001bea <xPortStartScheduler+0x86>
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8001bec:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8001bf0:	0052      	lsls	r2, r2, #1
 8001bf2:	b2d2      	uxtb	r2, r2
 8001bf4:	f88d 2003 	strb.w	r2, [sp, #3]
 8001bf8:	2101      	movs	r1, #1
 8001bfa:	4622      	mov	r2, r4
 8001bfc:	e7e2      	b.n	8001bc4 <xPortStartScheduler+0x60>
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8001bfe:	0212      	lsls	r2, r2, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8001c00:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8001c04:	601a      	str	r2, [r3, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8001c06:	9b01      	ldr	r3, [sp, #4]
 8001c08:	4a13      	ldr	r2, [pc, #76]	; (8001c58 <xPortStartScheduler+0xf4>)
 8001c0a:	b2db      	uxtb	r3, r3
 8001c0c:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8001c0e:	4b15      	ldr	r3, [pc, #84]	; (8001c64 <xPortStartScheduler+0x100>)
 8001c10:	681a      	ldr	r2, [r3, #0]
 8001c12:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8001c16:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8001c18:	681a      	ldr	r2, [r3, #0]
 8001c1a:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 8001c1e:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
 8001c20:	f7ff ff86 	bl	8001b30 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 8001c24:	4b10      	ldr	r3, [pc, #64]	; (8001c68 <xPortStartScheduler+0x104>)
 8001c26:	2400      	movs	r4, #0
 8001c28:	601c      	str	r4, [r3, #0]
	vPortEnableVFP();
 8001c2a:	f7ff fecb 	bl	80019c4 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8001c2e:	4a0f      	ldr	r2, [pc, #60]	; (8001c6c <xPortStartScheduler+0x108>)
 8001c30:	6813      	ldr	r3, [r2, #0]
 8001c32:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8001c36:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
 8001c38:	f7ff feb0 	bl	800199c <prvPortStartFirstTask>
	vTaskSwitchContext();
 8001c3c:	f000 faea 	bl	8002214 <vTaskSwitchContext>
	prvTaskExitError();
 8001c40:	f7ff fe8c 	bl	800195c <prvTaskExitError>
}
 8001c44:	4620      	mov	r0, r4
 8001c46:	b002      	add	sp, #8
 8001c48:	bd10      	pop	{r4, pc}
 8001c4a:	bf00      	nop
 8001c4c:	e000ed00 	.word	0xe000ed00
 8001c50:	410fc271 	.word	0x410fc271
 8001c54:	410fc270 	.word	0x410fc270
 8001c58:	e000e400 	.word	0xe000e400
 8001c5c:	20003c44 	.word	0x20003c44
 8001c60:	20003c48 	.word	0x20003c48
 8001c64:	e000ed20 	.word	0xe000ed20
 8001c68:	20000008 	.word	0x20000008
 8001c6c:	e000ef34 	.word	0xe000ef34

08001c70 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001c70:	4a06      	ldr	r2, [pc, #24]	; (8001c8c <prvResetNextTaskUnblockTime+0x1c>)
 8001c72:	6813      	ldr	r3, [r2, #0]
 8001c74:	6819      	ldr	r1, [r3, #0]
 8001c76:	4b06      	ldr	r3, [pc, #24]	; (8001c90 <prvResetNextTaskUnblockTime+0x20>)
 8001c78:	b919      	cbnz	r1, 8001c82 <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8001c7a:	f04f 32ff 	mov.w	r2, #4294967295
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8001c7e:	601a      	str	r2, [r3, #0]
	}
}
 8001c80:	4770      	bx	lr
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001c82:	6812      	ldr	r2, [r2, #0]
 8001c84:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8001c86:	68d2      	ldr	r2, [r2, #12]
 8001c88:	6852      	ldr	r2, [r2, #4]
 8001c8a:	e7f8      	b.n	8001c7e <prvResetNextTaskUnblockTime+0xe>
 8001c8c:	20003c50 	.word	0x20003c50
 8001c90:	20003d28 	.word	0x20003d28

08001c94 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8001c94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8001c96:	4b1b      	ldr	r3, [pc, #108]	; (8001d04 <prvAddCurrentTaskToDelayedList+0x70>)
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001c98:	4e1b      	ldr	r6, [pc, #108]	; (8001d08 <prvAddCurrentTaskToDelayedList+0x74>)
const TickType_t xConstTickCount = xTickCount;
 8001c9a:	681c      	ldr	r4, [r3, #0]
{
 8001c9c:	4605      	mov	r5, r0
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001c9e:	6830      	ldr	r0, [r6, #0]
 8001ca0:	3004      	adds	r0, #4
{
 8001ca2:	460f      	mov	r7, r1
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001ca4:	f7ff fe49 	bl	800193a <uxListRemove>
 8001ca8:	4633      	mov	r3, r6
 8001caa:	b940      	cbnz	r0, 8001cbe <prvAddCurrentTaskToDelayedList+0x2a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8001cac:	6831      	ldr	r1, [r6, #0]
 8001cae:	4e17      	ldr	r6, [pc, #92]	; (8001d0c <prvAddCurrentTaskToDelayedList+0x78>)
 8001cb0:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 8001cb2:	6832      	ldr	r2, [r6, #0]
 8001cb4:	2001      	movs	r0, #1
 8001cb6:	4088      	lsls	r0, r1
 8001cb8:	ea22 0200 	bic.w	r2, r2, r0
 8001cbc:	6032      	str	r2, [r6, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8001cbe:	1c6a      	adds	r2, r5, #1
 8001cc0:	d107      	bne.n	8001cd2 <prvAddCurrentTaskToDelayedList+0x3e>
 8001cc2:	b137      	cbz	r7, 8001cd2 <prvAddCurrentTaskToDelayedList+0x3e>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001cc4:	6819      	ldr	r1, [r3, #0]
 8001cc6:	4812      	ldr	r0, [pc, #72]	; (8001d10 <prvAddCurrentTaskToDelayedList+0x7c>)
 8001cc8:	3104      	adds	r1, #4

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8001cca:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001cce:	f7ff be11 	b.w	80018f4 <vListInsertEnd>
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8001cd2:	681a      	ldr	r2, [r3, #0]
 8001cd4:	1964      	adds	r4, r4, r5
 8001cd6:	6054      	str	r4, [r2, #4]
			if( xTimeToWake < xConstTickCount )
 8001cd8:	d307      	bcc.n	8001cea <prvAddCurrentTaskToDelayedList+0x56>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001cda:	4a0e      	ldr	r2, [pc, #56]	; (8001d14 <prvAddCurrentTaskToDelayedList+0x80>)
 8001cdc:	6810      	ldr	r0, [r2, #0]
 8001cde:	6819      	ldr	r1, [r3, #0]
}
 8001ce0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001ce4:	3104      	adds	r1, #4
 8001ce6:	f7ff be11 	b.w	800190c <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001cea:	4a0b      	ldr	r2, [pc, #44]	; (8001d18 <prvAddCurrentTaskToDelayedList+0x84>)
 8001cec:	6810      	ldr	r0, [r2, #0]
 8001cee:	6819      	ldr	r1, [r3, #0]
 8001cf0:	3104      	adds	r1, #4
 8001cf2:	f7ff fe0b 	bl	800190c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8001cf6:	4b09      	ldr	r3, [pc, #36]	; (8001d1c <prvAddCurrentTaskToDelayedList+0x88>)
 8001cf8:	681a      	ldr	r2, [r3, #0]
 8001cfa:	42a2      	cmp	r2, r4
					xNextTaskUnblockTime = xTimeToWake;
 8001cfc:	bf88      	it	hi
 8001cfe:	601c      	strhi	r4, [r3, #0]
}
 8001d00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001d02:	bf00      	nop
 8001d04:	20003d70 	.word	0x20003d70
 8001d08:	20003c4c 	.word	0x20003c4c
 8001d0c:	20003cf8 	.word	0x20003cf8
 8001d10:	20003d48 	.word	0x20003d48
 8001d14:	20003c54 	.word	0x20003c54
 8001d18:	20003c50 	.word	0x20003c50
 8001d1c:	20003d28 	.word	0x20003d28

08001d20 <prvIdleTask>:
{
 8001d20:	b580      	push	{r7, lr}
				taskYIELD();
 8001d22:	f8df 8064 	ldr.w	r8, [pc, #100]	; 8001d88 <prvIdleTask+0x68>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001d26:	4f14      	ldr	r7, [pc, #80]	; (8001d78 <prvIdleTask+0x58>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8001d28:	4c14      	ldr	r4, [pc, #80]	; (8001d7c <prvIdleTask+0x5c>)
				--uxCurrentNumberOfTasks;
 8001d2a:	4e15      	ldr	r6, [pc, #84]	; (8001d80 <prvIdleTask+0x60>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8001d2c:	6823      	ldr	r3, [r4, #0]
 8001d2e:	b963      	cbnz	r3, 8001d4a <prvIdleTask+0x2a>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8001d30:	4b14      	ldr	r3, [pc, #80]	; (8001d84 <prvIdleTask+0x64>)
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	2b01      	cmp	r3, #1
 8001d36:	d9f8      	bls.n	8001d2a <prvIdleTask+0xa>
				taskYIELD();
 8001d38:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001d3c:	f8c8 3000 	str.w	r3, [r8]
 8001d40:	f3bf 8f4f 	dsb	sy
 8001d44:	f3bf 8f6f 	isb	sy
 8001d48:	e7ee      	b.n	8001d28 <prvIdleTask+0x8>
			taskENTER_CRITICAL();
 8001d4a:	f7ff fe73 	bl	8001a34 <vPortEnterCritical>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	68dd      	ldr	r5, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001d52:	1d28      	adds	r0, r5, #4
 8001d54:	f7ff fdf1 	bl	800193a <uxListRemove>
				--uxCurrentNumberOfTasks;
 8001d58:	6833      	ldr	r3, [r6, #0]
 8001d5a:	3b01      	subs	r3, #1
 8001d5c:	6033      	str	r3, [r6, #0]
				--uxDeletedTasksWaitingCleanUp;
 8001d5e:	6823      	ldr	r3, [r4, #0]
 8001d60:	3b01      	subs	r3, #1
 8001d62:	6023      	str	r3, [r4, #0]
			taskEXIT_CRITICAL();
 8001d64:	f7ff fe88 	bl	8001a78 <vPortExitCritical>
			vPortFree( pxTCB->pxStack );
 8001d68:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8001d6a:	f7ff fd7d 	bl	8001868 <vPortFree>
			vPortFree( pxTCB );
 8001d6e:	4628      	mov	r0, r5
 8001d70:	f7ff fd7a 	bl	8001868 <vPortFree>
 8001d74:	e7da      	b.n	8001d2c <prvIdleTask+0xc>
 8001d76:	bf00      	nop
 8001d78:	20003d5c 	.word	0x20003d5c
 8001d7c:	20003ce8 	.word	0x20003ce8
 8001d80:	20003ce4 	.word	0x20003ce4
 8001d84:	20003c58 	.word	0x20003c58
 8001d88:	e000ed04 	.word	0xe000ed04

08001d8c <xTaskCreate>:
	{
 8001d8c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8001d90:	0097      	lsls	r7, r2, #2
	{
 8001d92:	4681      	mov	r9, r0
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8001d94:	4638      	mov	r0, r7
	{
 8001d96:	460e      	mov	r6, r1
 8001d98:	469a      	mov	sl, r3
 8001d9a:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8001d9e:	f7ff fcd7 	bl	8001750 <pvPortMalloc>
			if( pxStack != NULL )
 8001da2:	4605      	mov	r5, r0
 8001da4:	b180      	cbz	r0, 8001dc8 <xTaskCreate+0x3c>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8001da6:	2054      	movs	r0, #84	; 0x54
 8001da8:	f7ff fcd2 	bl	8001750 <pvPortMalloc>
				if( pxNewTCB != NULL )
 8001dac:	4604      	mov	r4, r0
 8001dae:	b140      	cbz	r0, 8001dc2 <xTaskCreate+0x36>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8001db0:	3f04      	subs	r7, #4
					pxNewTCB->pxStack = pxStack;
 8001db2:	6305      	str	r5, [r0, #48]	; 0x30
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8001db4:	443d      	add	r5, r7
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8001db6:	f025 0507 	bic.w	r5, r5, #7
	if( pcName != NULL )
 8001dba:	b946      	cbnz	r6, 8001dce <xTaskCreate+0x42>
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8001dbc:	f880 6034 	strb.w	r6, [r0, #52]	; 0x34
 8001dc0:	e014      	b.n	8001dec <xTaskCreate+0x60>
					vPortFree( pxStack );
 8001dc2:	4628      	mov	r0, r5
 8001dc4:	f7ff fd50 	bl	8001868 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8001dc8:	f04f 35ff 	mov.w	r5, #4294967295
 8001dcc:	e088      	b.n	8001ee0 <xTaskCreate+0x154>
 8001dce:	1e73      	subs	r3, r6, #1
 8001dd0:	f100 0234 	add.w	r2, r0, #52	; 0x34
 8001dd4:	360f      	adds	r6, #15
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8001dd6:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 8001dda:	f802 1b01 	strb.w	r1, [r2], #1
			if( pcName[ x ] == ( char ) 0x00 )
 8001dde:	7819      	ldrb	r1, [r3, #0]
 8001de0:	b109      	cbz	r1, 8001de6 <xTaskCreate+0x5a>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001de2:	42b3      	cmp	r3, r6
 8001de4:	d1f7      	bne.n	8001dd6 <xTaskCreate+0x4a>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8001de6:	2300      	movs	r3, #0
 8001de8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001dec:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8001dee:	2e06      	cmp	r6, #6
 8001df0:	bf28      	it	cs
 8001df2:	2606      	movcs	r6, #6
		pxNewTCB->uxMutexesHeld = 0;
 8001df4:	f04f 0b00 	mov.w	fp, #0
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8001df8:	1d27      	adds	r7, r4, #4
	pxNewTCB->uxPriority = uxPriority;
 8001dfa:	62e6      	str	r6, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 8001dfc:	6466      	str	r6, [r4, #68]	; 0x44
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8001dfe:	4638      	mov	r0, r7
		pxNewTCB->uxMutexesHeld = 0;
 8001e00:	f8c4 b048 	str.w	fp, [r4, #72]	; 0x48
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8001e04:	f7ff fd73 	bl	80018ee <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001e08:	f1c6 0607 	rsb	r6, r6, #7
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8001e0c:	f104 0018 	add.w	r0, r4, #24
 8001e10:	f7ff fd6d 	bl	80018ee <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
 8001e14:	f8c4 b04c 	str.w	fp, [r4, #76]	; 0x4c
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8001e18:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001e1a:	61a6      	str	r6, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8001e1c:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8001e1e:	f884 b050 	strb.w	fp, [r4, #80]	; 0x50
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8001e22:	4652      	mov	r2, sl
 8001e24:	4649      	mov	r1, r9
 8001e26:	4628      	mov	r0, r5
 8001e28:	f7ff fdd6 	bl	80019d8 <pxPortInitialiseStack>
 8001e2c:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
 8001e2e:	f1b8 0f00 	cmp.w	r8, #0
 8001e32:	d001      	beq.n	8001e38 <xTaskCreate+0xac>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8001e34:	f8c8 4000 	str.w	r4, [r8]
	taskENTER_CRITICAL();
 8001e38:	f7ff fdfc 	bl	8001a34 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 8001e3c:	4b2f      	ldr	r3, [pc, #188]	; (8001efc <xTaskCreate+0x170>)
		if( pxCurrentTCB == NULL )
 8001e3e:	4e30      	ldr	r6, [pc, #192]	; (8001f00 <xTaskCreate+0x174>)
		uxCurrentNumberOfTasks++;
 8001e40:	681a      	ldr	r2, [r3, #0]
 8001e42:	f8df 80e8 	ldr.w	r8, [pc, #232]	; 8001f2c <xTaskCreate+0x1a0>
 8001e46:	3201      	adds	r2, #1
 8001e48:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 8001e4a:	6835      	ldr	r5, [r6, #0]
 8001e4c:	2d00      	cmp	r5, #0
 8001e4e:	d14a      	bne.n	8001ee6 <xTaskCreate+0x15a>
			pxCurrentTCB = pxNewTCB;
 8001e50:	6034      	str	r4, [r6, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	2b01      	cmp	r3, #1
 8001e56:	d11f      	bne.n	8001e98 <xTaskCreate+0x10c>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8001e58:	f04f 0914 	mov.w	r9, #20
 8001e5c:	fb09 8005 	mla	r0, r9, r5, r8
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001e60:	3501      	adds	r5, #1
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8001e62:	f7ff fd39 	bl	80018d8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001e66:	2d07      	cmp	r5, #7
 8001e68:	d1f8      	bne.n	8001e5c <xTaskCreate+0xd0>
	vListInitialise( &xDelayedTaskList1 );
 8001e6a:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 8001f30 <xTaskCreate+0x1a4>
	vListInitialise( &xDelayedTaskList2 );
 8001e6e:	4d25      	ldr	r5, [pc, #148]	; (8001f04 <xTaskCreate+0x178>)
	vListInitialise( &xDelayedTaskList1 );
 8001e70:	4648      	mov	r0, r9
 8001e72:	f7ff fd31 	bl	80018d8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8001e76:	4628      	mov	r0, r5
 8001e78:	f7ff fd2e 	bl	80018d8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8001e7c:	4822      	ldr	r0, [pc, #136]	; (8001f08 <xTaskCreate+0x17c>)
 8001e7e:	f7ff fd2b 	bl	80018d8 <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 8001e82:	4822      	ldr	r0, [pc, #136]	; (8001f0c <xTaskCreate+0x180>)
 8001e84:	f7ff fd28 	bl	80018d8 <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 8001e88:	4821      	ldr	r0, [pc, #132]	; (8001f10 <xTaskCreate+0x184>)
 8001e8a:	f7ff fd25 	bl	80018d8 <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 8001e8e:	4b21      	ldr	r3, [pc, #132]	; (8001f14 <xTaskCreate+0x188>)
 8001e90:	f8c3 9000 	str.w	r9, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8001e94:	4b20      	ldr	r3, [pc, #128]	; (8001f18 <xTaskCreate+0x18c>)
 8001e96:	601d      	str	r5, [r3, #0]
		uxTaskNumber++;
 8001e98:	4a20      	ldr	r2, [pc, #128]	; (8001f1c <xTaskCreate+0x190>)
		prvAddTaskToReadyList( pxNewTCB );
 8001e9a:	4921      	ldr	r1, [pc, #132]	; (8001f20 <xTaskCreate+0x194>)
		uxTaskNumber++;
 8001e9c:	6813      	ldr	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8001e9e:	6808      	ldr	r0, [r1, #0]
		uxTaskNumber++;
 8001ea0:	3301      	adds	r3, #1
 8001ea2:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8001ea4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001ea6:	2501      	movs	r5, #1
 8001ea8:	fa05 f302 	lsl.w	r3, r5, r2
 8001eac:	4303      	orrs	r3, r0
 8001eae:	2014      	movs	r0, #20
 8001eb0:	600b      	str	r3, [r1, #0]
 8001eb2:	fb00 8002 	mla	r0, r0, r2, r8
 8001eb6:	4639      	mov	r1, r7
 8001eb8:	f7ff fd1c 	bl	80018f4 <vListInsertEnd>
	taskEXIT_CRITICAL();
 8001ebc:	f7ff fddc 	bl	8001a78 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 8001ec0:	4b18      	ldr	r3, [pc, #96]	; (8001f24 <xTaskCreate+0x198>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	b163      	cbz	r3, 8001ee0 <xTaskCreate+0x154>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8001ec6:	6833      	ldr	r3, [r6, #0]
 8001ec8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001eca:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001ecc:	429a      	cmp	r2, r3
 8001ece:	d207      	bcs.n	8001ee0 <xTaskCreate+0x154>
			taskYIELD_IF_USING_PREEMPTION();
 8001ed0:	4b15      	ldr	r3, [pc, #84]	; (8001f28 <xTaskCreate+0x19c>)
 8001ed2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001ed6:	601a      	str	r2, [r3, #0]
 8001ed8:	f3bf 8f4f 	dsb	sy
 8001edc:	f3bf 8f6f 	isb	sy
	}
 8001ee0:	4628      	mov	r0, r5
 8001ee2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if( xSchedulerRunning == pdFALSE )
 8001ee6:	4b0f      	ldr	r3, [pc, #60]	; (8001f24 <xTaskCreate+0x198>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d1d4      	bne.n	8001e98 <xTaskCreate+0x10c>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8001eee:	6833      	ldr	r3, [r6, #0]
 8001ef0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001ef2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ef4:	429a      	cmp	r2, r3
					pxCurrentTCB = pxNewTCB;
 8001ef6:	bf28      	it	cs
 8001ef8:	6034      	strcs	r4, [r6, #0]
 8001efa:	e7cd      	b.n	8001e98 <xTaskCreate+0x10c>
 8001efc:	20003ce4 	.word	0x20003ce4
 8001f00:	20003c4c 	.word	0x20003c4c
 8001f04:	20003d10 	.word	0x20003d10
 8001f08:	20003d30 	.word	0x20003d30
 8001f0c:	20003d5c 	.word	0x20003d5c
 8001f10:	20003d48 	.word	0x20003d48
 8001f14:	20003c50 	.word	0x20003c50
 8001f18:	20003c54 	.word	0x20003c54
 8001f1c:	20003cf4 	.word	0x20003cf4
 8001f20:	20003cf8 	.word	0x20003cf8
 8001f24:	20003d44 	.word	0x20003d44
 8001f28:	e000ed04 	.word	0xe000ed04
 8001f2c:	20003c58 	.word	0x20003c58
 8001f30:	20003cfc 	.word	0x20003cfc

08001f34 <vTaskStartScheduler>:
{
 8001f34:	b513      	push	{r0, r1, r4, lr}
		xReturn = xTaskCreate(	prvIdleTask,
 8001f36:	4b17      	ldr	r3, [pc, #92]	; (8001f94 <vTaskStartScheduler+0x60>)
 8001f38:	9301      	str	r3, [sp, #4]
 8001f3a:	2400      	movs	r4, #0
 8001f3c:	9400      	str	r4, [sp, #0]
 8001f3e:	4623      	mov	r3, r4
 8001f40:	2280      	movs	r2, #128	; 0x80
 8001f42:	4915      	ldr	r1, [pc, #84]	; (8001f98 <vTaskStartScheduler+0x64>)
 8001f44:	4815      	ldr	r0, [pc, #84]	; (8001f9c <vTaskStartScheduler+0x68>)
 8001f46:	f7ff ff21 	bl	8001d8c <xTaskCreate>
	if( xReturn == pdPASS )
 8001f4a:	2801      	cmp	r0, #1
 8001f4c:	d114      	bne.n	8001f78 <vTaskStartScheduler+0x44>
 8001f4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f52:	f383 8811 	msr	BASEPRI, r3
 8001f56:	f3bf 8f6f 	isb	sy
 8001f5a:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 8001f5e:	4b10      	ldr	r3, [pc, #64]	; (8001fa0 <vTaskStartScheduler+0x6c>)
 8001f60:	f04f 32ff 	mov.w	r2, #4294967295
 8001f64:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8001f66:	4b0f      	ldr	r3, [pc, #60]	; (8001fa4 <vTaskStartScheduler+0x70>)
 8001f68:	6018      	str	r0, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8001f6a:	4b0f      	ldr	r3, [pc, #60]	; (8001fa8 <vTaskStartScheduler+0x74>)
 8001f6c:	601c      	str	r4, [r3, #0]
}
 8001f6e:	b002      	add	sp, #8
 8001f70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		if( xPortStartScheduler() != pdFALSE )
 8001f74:	f7ff bdf6 	b.w	8001b64 <xPortStartScheduler>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8001f78:	3001      	adds	r0, #1
 8001f7a:	d108      	bne.n	8001f8e <vTaskStartScheduler+0x5a>
 8001f7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f80:	f383 8811 	msr	BASEPRI, r3
 8001f84:	f3bf 8f6f 	isb	sy
 8001f88:	f3bf 8f4f 	dsb	sy
 8001f8c:	e7fe      	b.n	8001f8c <vTaskStartScheduler+0x58>
}
 8001f8e:	b002      	add	sp, #8
 8001f90:	bd10      	pop	{r4, pc}
 8001f92:	bf00      	nop
 8001f94:	20003d24 	.word	0x20003d24
 8001f98:	08002774 	.word	0x08002774
 8001f9c:	08001d21 	.word	0x08001d21
 8001fa0:	20003d28 	.word	0x20003d28
 8001fa4:	20003d44 	.word	0x20003d44
 8001fa8:	20003d70 	.word	0x20003d70

08001fac <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8001fac:	4a02      	ldr	r2, [pc, #8]	; (8001fb8 <vTaskSuspendAll+0xc>)
 8001fae:	6813      	ldr	r3, [r2, #0]
 8001fb0:	3301      	adds	r3, #1
 8001fb2:	6013      	str	r3, [r2, #0]
}
 8001fb4:	4770      	bx	lr
 8001fb6:	bf00      	nop
 8001fb8:	20003cf0 	.word	0x20003cf0

08001fbc <xTaskIncrementTick>:
{
 8001fbc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001fc0:	4b3c      	ldr	r3, [pc, #240]	; (80020b4 <xTaskIncrementTick+0xf8>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d16e      	bne.n	80020a6 <xTaskIncrementTick+0xea>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8001fc8:	4b3b      	ldr	r3, [pc, #236]	; (80020b8 <xTaskIncrementTick+0xfc>)
 8001fca:	681c      	ldr	r4, [r3, #0]
 8001fcc:	3401      	adds	r4, #1
		xTickCount = xConstTickCount;
 8001fce:	601c      	str	r4, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8001fd0:	b9bc      	cbnz	r4, 8002002 <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 8001fd2:	4b3a      	ldr	r3, [pc, #232]	; (80020bc <xTaskIncrementTick+0x100>)
 8001fd4:	681a      	ldr	r2, [r3, #0]
 8001fd6:	6812      	ldr	r2, [r2, #0]
 8001fd8:	b142      	cbz	r2, 8001fec <xTaskIncrementTick+0x30>
 8001fda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001fde:	f383 8811 	msr	BASEPRI, r3
 8001fe2:	f3bf 8f6f 	isb	sy
 8001fe6:	f3bf 8f4f 	dsb	sy
 8001fea:	e7fe      	b.n	8001fea <xTaskIncrementTick+0x2e>
 8001fec:	4a34      	ldr	r2, [pc, #208]	; (80020c0 <xTaskIncrementTick+0x104>)
 8001fee:	6819      	ldr	r1, [r3, #0]
 8001ff0:	6810      	ldr	r0, [r2, #0]
 8001ff2:	6018      	str	r0, [r3, #0]
 8001ff4:	6011      	str	r1, [r2, #0]
 8001ff6:	4a33      	ldr	r2, [pc, #204]	; (80020c4 <xTaskIncrementTick+0x108>)
 8001ff8:	6813      	ldr	r3, [r2, #0]
 8001ffa:	3301      	adds	r3, #1
 8001ffc:	6013      	str	r3, [r2, #0]
 8001ffe:	f7ff fe37 	bl	8001c70 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 8002002:	4d31      	ldr	r5, [pc, #196]	; (80020c8 <xTaskIncrementTick+0x10c>)
 8002004:	4f31      	ldr	r7, [pc, #196]	; (80020cc <xTaskIncrementTick+0x110>)
 8002006:	682b      	ldr	r3, [r5, #0]
 8002008:	42a3      	cmp	r3, r4
BaseType_t xSwitchRequired = pdFALSE;
 800200a:	f04f 0b00 	mov.w	fp, #0
		if( xConstTickCount >= xNextTaskUnblockTime )
 800200e:	d911      	bls.n	8002034 <xTaskIncrementTick+0x78>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002010:	683a      	ldr	r2, [r7, #0]
 8002012:	4b2f      	ldr	r3, [pc, #188]	; (80020d0 <xTaskIncrementTick+0x114>)
 8002014:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002016:	2214      	movs	r2, #20
 8002018:	434a      	muls	r2, r1
 800201a:	589a      	ldr	r2, [r3, r2]
				xSwitchRequired = pdTRUE;
 800201c:	2a02      	cmp	r2, #2
 800201e:	bf28      	it	cs
 8002020:	f04f 0b01 	movcs.w	fp, #1
		if( xYieldPending != pdFALSE )
 8002024:	4a2b      	ldr	r2, [pc, #172]	; (80020d4 <xTaskIncrementTick+0x118>)
 8002026:	6812      	ldr	r2, [r2, #0]
			xSwitchRequired = pdTRUE;
 8002028:	2a00      	cmp	r2, #0
}
 800202a:	bf0c      	ite	eq
 800202c:	4658      	moveq	r0, fp
 800202e:	2001      	movne	r0, #1
 8002030:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002034:	f8df a084 	ldr.w	sl, [pc, #132]	; 80020bc <xTaskIncrementTick+0x100>
					prvAddTaskToReadyList( pxTCB );
 8002038:	f8df 90a0 	ldr.w	r9, [pc, #160]	; 80020dc <xTaskIncrementTick+0x120>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800203c:	f8da 2000 	ldr.w	r2, [sl]
 8002040:	6812      	ldr	r2, [r2, #0]
 8002042:	b91a      	cbnz	r2, 800204c <xTaskIncrementTick+0x90>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002044:	f04f 32ff 	mov.w	r2, #4294967295
 8002048:	602a      	str	r2, [r5, #0]
					break;
 800204a:	e7e1      	b.n	8002010 <xTaskIncrementTick+0x54>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800204c:	f8da 2000 	ldr.w	r2, [sl]
 8002050:	68d2      	ldr	r2, [r2, #12]
 8002052:	68d6      	ldr	r6, [r2, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002054:	6871      	ldr	r1, [r6, #4]
					if( xConstTickCount < xItemValue )
 8002056:	428c      	cmp	r4, r1
 8002058:	d201      	bcs.n	800205e <xTaskIncrementTick+0xa2>
						xNextTaskUnblockTime = xItemValue;
 800205a:	6029      	str	r1, [r5, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800205c:	e7d8      	b.n	8002010 <xTaskIncrementTick+0x54>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800205e:	f106 0804 	add.w	r8, r6, #4
 8002062:	4640      	mov	r0, r8
 8002064:	f7ff fc69 	bl	800193a <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002068:	6ab1      	ldr	r1, [r6, #40]	; 0x28
 800206a:	b119      	cbz	r1, 8002074 <xTaskIncrementTick+0xb8>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800206c:	f106 0018 	add.w	r0, r6, #24
 8002070:	f7ff fc63 	bl	800193a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8002074:	6af0      	ldr	r0, [r6, #44]	; 0x2c
 8002076:	f8d9 3000 	ldr.w	r3, [r9]
 800207a:	2201      	movs	r2, #1
 800207c:	fa02 f100 	lsl.w	r1, r2, r0
 8002080:	4319      	orrs	r1, r3
 8002082:	4b13      	ldr	r3, [pc, #76]	; (80020d0 <xTaskIncrementTick+0x114>)
 8002084:	f8c9 1000 	str.w	r1, [r9]
 8002088:	f04f 0c14 	mov.w	ip, #20
 800208c:	4641      	mov	r1, r8
 800208e:	fb0c 3000 	mla	r0, ip, r0, r3
 8002092:	f7ff fc2f 	bl	80018f4 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002096:	6838      	ldr	r0, [r7, #0]
 8002098:	6af1      	ldr	r1, [r6, #44]	; 0x2c
 800209a:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
 800209c:	4291      	cmp	r1, r2
 800209e:	bf28      	it	cs
 80020a0:	f04f 0b01 	movcs.w	fp, #1
 80020a4:	e7ca      	b.n	800203c <xTaskIncrementTick+0x80>
		++uxPendedTicks;
 80020a6:	4a0c      	ldr	r2, [pc, #48]	; (80020d8 <xTaskIncrementTick+0x11c>)
 80020a8:	6813      	ldr	r3, [r2, #0]
 80020aa:	3301      	adds	r3, #1
 80020ac:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 80020ae:	f04f 0b00 	mov.w	fp, #0
 80020b2:	e7b7      	b.n	8002024 <xTaskIncrementTick+0x68>
 80020b4:	20003cf0 	.word	0x20003cf0
 80020b8:	20003d70 	.word	0x20003d70
 80020bc:	20003c50 	.word	0x20003c50
 80020c0:	20003c54 	.word	0x20003c54
 80020c4:	20003d2c 	.word	0x20003d2c
 80020c8:	20003d28 	.word	0x20003d28
 80020cc:	20003c4c 	.word	0x20003c4c
 80020d0:	20003c58 	.word	0x20003c58
 80020d4:	20003d74 	.word	0x20003d74
 80020d8:	20003cec 	.word	0x20003cec
 80020dc:	20003cf8 	.word	0x20003cf8

080020e0 <xTaskResumeAll>:
{
 80020e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( uxSchedulerSuspended );
 80020e4:	4c30      	ldr	r4, [pc, #192]	; (80021a8 <xTaskResumeAll+0xc8>)
 80020e6:	6823      	ldr	r3, [r4, #0]
 80020e8:	b943      	cbnz	r3, 80020fc <xTaskResumeAll+0x1c>
 80020ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80020ee:	f383 8811 	msr	BASEPRI, r3
 80020f2:	f3bf 8f6f 	isb	sy
 80020f6:	f3bf 8f4f 	dsb	sy
 80020fa:	e7fe      	b.n	80020fa <xTaskResumeAll+0x1a>
	taskENTER_CRITICAL();
 80020fc:	f7ff fc9a 	bl	8001a34 <vPortEnterCritical>
		--uxSchedulerSuspended;
 8002100:	6823      	ldr	r3, [r4, #0]
 8002102:	3b01      	subs	r3, #1
 8002104:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002106:	6824      	ldr	r4, [r4, #0]
 8002108:	b12c      	cbz	r4, 8002116 <xTaskResumeAll+0x36>
BaseType_t xAlreadyYielded = pdFALSE;
 800210a:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800210c:	f7ff fcb4 	bl	8001a78 <vPortExitCritical>
}
 8002110:	4620      	mov	r0, r4
 8002112:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002116:	4b25      	ldr	r3, [pc, #148]	; (80021ac <xTaskResumeAll+0xcc>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	2b00      	cmp	r3, #0
 800211c:	d0f5      	beq.n	800210a <xTaskResumeAll+0x2a>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800211e:	4d24      	ldr	r5, [pc, #144]	; (80021b0 <xTaskResumeAll+0xd0>)
					prvAddTaskToReadyList( pxTCB );
 8002120:	4e24      	ldr	r6, [pc, #144]	; (80021b4 <xTaskResumeAll+0xd4>)
 8002122:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 80021c8 <xTaskResumeAll+0xe8>
 8002126:	e01f      	b.n	8002168 <xTaskResumeAll+0x88>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002128:	68eb      	ldr	r3, [r5, #12]
 800212a:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800212c:	f104 0904 	add.w	r9, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002130:	f104 0018 	add.w	r0, r4, #24
 8002134:	f7ff fc01 	bl	800193a <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002138:	4648      	mov	r0, r9
 800213a:	f7ff fbfe 	bl	800193a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800213e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002140:	6831      	ldr	r1, [r6, #0]
 8002142:	2701      	movs	r7, #1
 8002144:	fa07 f302 	lsl.w	r3, r7, r2
 8002148:	2014      	movs	r0, #20
 800214a:	430b      	orrs	r3, r1
 800214c:	fb00 8002 	mla	r0, r0, r2, r8
 8002150:	4649      	mov	r1, r9
 8002152:	6033      	str	r3, [r6, #0]
 8002154:	f7ff fbce 	bl	80018f4 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002158:	4b17      	ldr	r3, [pc, #92]	; (80021b8 <xTaskResumeAll+0xd8>)
 800215a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002160:	429a      	cmp	r2, r3
 8002162:	d301      	bcc.n	8002168 <xTaskResumeAll+0x88>
						xYieldPending = pdTRUE;
 8002164:	4b15      	ldr	r3, [pc, #84]	; (80021bc <xTaskResumeAll+0xdc>)
 8002166:	601f      	str	r7, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002168:	682b      	ldr	r3, [r5, #0]
 800216a:	2b00      	cmp	r3, #0
 800216c:	d1dc      	bne.n	8002128 <xTaskResumeAll+0x48>
				if( pxTCB != NULL )
 800216e:	b10c      	cbz	r4, 8002174 <xTaskResumeAll+0x94>
					prvResetNextTaskUnblockTime();
 8002170:	f7ff fd7e 	bl	8001c70 <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8002174:	4d12      	ldr	r5, [pc, #72]	; (80021c0 <xTaskResumeAll+0xe0>)
 8002176:	682c      	ldr	r4, [r5, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8002178:	b144      	cbz	r4, 800218c <xTaskResumeAll+0xac>
								xYieldPending = pdTRUE;
 800217a:	4e10      	ldr	r6, [pc, #64]	; (80021bc <xTaskResumeAll+0xdc>)
 800217c:	2701      	movs	r7, #1
							if( xTaskIncrementTick() != pdFALSE )
 800217e:	f7ff ff1d 	bl	8001fbc <xTaskIncrementTick>
 8002182:	b100      	cbz	r0, 8002186 <xTaskResumeAll+0xa6>
								xYieldPending = pdTRUE;
 8002184:	6037      	str	r7, [r6, #0]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8002186:	3c01      	subs	r4, #1
 8002188:	d1f9      	bne.n	800217e <xTaskResumeAll+0x9e>
						uxPendedTicks = 0;
 800218a:	602c      	str	r4, [r5, #0]
				if( xYieldPending != pdFALSE )
 800218c:	4b0b      	ldr	r3, [pc, #44]	; (80021bc <xTaskResumeAll+0xdc>)
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	2b00      	cmp	r3, #0
 8002192:	d0ba      	beq.n	800210a <xTaskResumeAll+0x2a>
					taskYIELD_IF_USING_PREEMPTION();
 8002194:	4b0b      	ldr	r3, [pc, #44]	; (80021c4 <xTaskResumeAll+0xe4>)
 8002196:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800219a:	601a      	str	r2, [r3, #0]
 800219c:	f3bf 8f4f 	dsb	sy
 80021a0:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 80021a4:	2401      	movs	r4, #1
 80021a6:	e7b1      	b.n	800210c <xTaskResumeAll+0x2c>
 80021a8:	20003cf0 	.word	0x20003cf0
 80021ac:	20003ce4 	.word	0x20003ce4
 80021b0:	20003d30 	.word	0x20003d30
 80021b4:	20003cf8 	.word	0x20003cf8
 80021b8:	20003c4c 	.word	0x20003c4c
 80021bc:	20003d74 	.word	0x20003d74
 80021c0:	20003cec 	.word	0x20003cec
 80021c4:	e000ed04 	.word	0xe000ed04
 80021c8:	20003c58 	.word	0x20003c58

080021cc <vTaskDelay>:
	{
 80021cc:	b508      	push	{r3, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 80021ce:	b940      	cbnz	r0, 80021e2 <vTaskDelay+0x16>
			portYIELD_WITHIN_API();
 80021d0:	4b0e      	ldr	r3, [pc, #56]	; (800220c <vTaskDelay+0x40>)
 80021d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80021d6:	601a      	str	r2, [r3, #0]
 80021d8:	f3bf 8f4f 	dsb	sy
 80021dc:	f3bf 8f6f 	isb	sy
	}
 80021e0:	bd08      	pop	{r3, pc}
			configASSERT( uxSchedulerSuspended == 0 );
 80021e2:	4b0b      	ldr	r3, [pc, #44]	; (8002210 <vTaskDelay+0x44>)
 80021e4:	6819      	ldr	r1, [r3, #0]
 80021e6:	b141      	cbz	r1, 80021fa <vTaskDelay+0x2e>
 80021e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80021ec:	f383 8811 	msr	BASEPRI, r3
 80021f0:	f3bf 8f6f 	isb	sy
 80021f4:	f3bf 8f4f 	dsb	sy
 80021f8:	e7fe      	b.n	80021f8 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 80021fa:	f7ff fed7 	bl	8001fac <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80021fe:	f7ff fd49 	bl	8001c94 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 8002202:	f7ff ff6d 	bl	80020e0 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 8002206:	2800      	cmp	r0, #0
 8002208:	d0e2      	beq.n	80021d0 <vTaskDelay+0x4>
 800220a:	e7e9      	b.n	80021e0 <vTaskDelay+0x14>
 800220c:	e000ed04 	.word	0xe000ed04
 8002210:	20003cf0 	.word	0x20003cf0

08002214 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002214:	4b17      	ldr	r3, [pc, #92]	; (8002274 <vTaskSwitchContext+0x60>)
 8002216:	681a      	ldr	r2, [r3, #0]
 8002218:	4b17      	ldr	r3, [pc, #92]	; (8002278 <vTaskSwitchContext+0x64>)
{
 800221a:	b510      	push	{r4, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800221c:	b112      	cbz	r2, 8002224 <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 800221e:	2201      	movs	r2, #1
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002220:	601a      	str	r2, [r3, #0]
}
 8002222:	bd10      	pop	{r4, pc}
		xYieldPending = pdFALSE;
 8002224:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002226:	4b15      	ldr	r3, [pc, #84]	; (800227c <vTaskSwitchContext+0x68>)
 8002228:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800222a:	fab3 f383 	clz	r3, r3
 800222e:	b2db      	uxtb	r3, r3
 8002230:	f1c3 031f 	rsb	r3, r3, #31
 8002234:	2214      	movs	r2, #20
 8002236:	4912      	ldr	r1, [pc, #72]	; (8002280 <vTaskSwitchContext+0x6c>)
 8002238:	435a      	muls	r2, r3
 800223a:	1888      	adds	r0, r1, r2
 800223c:	588c      	ldr	r4, [r1, r2]
 800223e:	b944      	cbnz	r4, 8002252 <vTaskSwitchContext+0x3e>
	__asm volatile
 8002240:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002244:	f383 8811 	msr	BASEPRI, r3
 8002248:	f3bf 8f6f 	isb	sy
 800224c:	f3bf 8f4f 	dsb	sy
 8002250:	e7fe      	b.n	8002250 <vTaskSwitchContext+0x3c>
 8002252:	6844      	ldr	r4, [r0, #4]
 8002254:	3208      	adds	r2, #8
 8002256:	6864      	ldr	r4, [r4, #4]
 8002258:	6044      	str	r4, [r0, #4]
 800225a:	440a      	add	r2, r1
 800225c:	4294      	cmp	r4, r2
 800225e:	bf04      	itt	eq
 8002260:	6862      	ldreq	r2, [r4, #4]
 8002262:	6042      	streq	r2, [r0, #4]
 8002264:	2214      	movs	r2, #20
 8002266:	fb02 1303 	mla	r3, r2, r3, r1
 800226a:	685b      	ldr	r3, [r3, #4]
 800226c:	68da      	ldr	r2, [r3, #12]
 800226e:	4b05      	ldr	r3, [pc, #20]	; (8002284 <vTaskSwitchContext+0x70>)
 8002270:	e7d6      	b.n	8002220 <vTaskSwitchContext+0xc>
 8002272:	bf00      	nop
 8002274:	20003cf0 	.word	0x20003cf0
 8002278:	20003d74 	.word	0x20003d74
 800227c:	20003cf8 	.word	0x20003cf8
 8002280:	20003c58 	.word	0x20003c58
 8002284:	20003c4c 	.word	0x20003c4c

08002288 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 8002288:	4b05      	ldr	r3, [pc, #20]	; (80022a0 <xTaskGetSchedulerState+0x18>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	b133      	cbz	r3, 800229c <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800228e:	4b05      	ldr	r3, [pc, #20]	; (80022a4 <xTaskGetSchedulerState+0x1c>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	2b00      	cmp	r3, #0
				xReturn = taskSCHEDULER_SUSPENDED;
 8002294:	bf0c      	ite	eq
 8002296:	2002      	moveq	r0, #2
 8002298:	2000      	movne	r0, #0
 800229a:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 800229c:	2001      	movs	r0, #1
	}
 800229e:	4770      	bx	lr
 80022a0:	20003d44 	.word	0x20003d44
 80022a4:	20003cf0 	.word	0x20003cf0

080022a8 <UART_task1>:
/* USER CODE END PFP */

/* USER CODE BEGIN 0 */

void UART_task1()
{
 80022a8:	b508      	push	{r3, lr}
	uint8_t pData[100];
	while(1)
	{
//		HAL_UART_Receive( &huart2, pData, sizeof(pData), 500);
		vTaskDelay(1);
 80022aa:	2001      	movs	r0, #1
 80022ac:	f7ff ff8e 	bl	80021cc <vTaskDelay>
 80022b0:	e7fb      	b.n	80022aa <UART_task1+0x2>
	...

080022b4 <SPI_task2>:
	}
}

void SPI_task2()
{
 80022b4:	b500      	push	{lr}
	uint8_t pData[100];
	while(1)
	{
		HAL_SPI_Receive( &hspi1, pData, sizeof(pData), 500);
 80022b6:	4c0c      	ldr	r4, [pc, #48]	; (80022e8 <SPI_task2+0x34>)
{
 80022b8:	b09b      	sub	sp, #108	; 0x6c
		HAL_SPI_Receive( &hspi1, pData, sizeof(pData), 500);
 80022ba:	a901      	add	r1, sp, #4
 80022bc:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80022c0:	2264      	movs	r2, #100	; 0x64
 80022c2:	4620      	mov	r0, r4
 80022c4:	f7fe fefd 	bl	80010c2 <HAL_SPI_Receive>
		HAL_UART_Transmit( &huart2, pData, sizeof(pData), 500);
 80022c8:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80022cc:	a901      	add	r1, sp, #4
 80022ce:	2264      	movs	r2, #100	; 0x64
 80022d0:	4806      	ldr	r0, [pc, #24]	; (80022ec <SPI_task2+0x38>)
 80022d2:	f7ff f98d 	bl	80015f0 <HAL_UART_Transmit>
		memset(pData,'\0', sizeof(pData));
 80022d6:	2264      	movs	r2, #100	; 0x64
 80022d8:	2100      	movs	r1, #0
 80022da:	a801      	add	r0, sp, #4
 80022dc:	f000 fa2c 	bl	8002738 <memset>
		vTaskDelay(1);
 80022e0:	2001      	movs	r0, #1
 80022e2:	f7ff ff73 	bl	80021cc <vTaskDelay>
 80022e6:	e7e8      	b.n	80022ba <SPI_task2+0x6>
 80022e8:	20003d80 	.word	0x20003d80
 80022ec:	20003dd8 	.word	0x20003dd8

080022f0 <StartDefaultTask>:

/* USER CODE END 4 */

/* StartDefaultTask function */
void StartDefaultTask(void const * argument)
{
 80022f0:	b508      	push	{r3, lr}

  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80022f2:	2001      	movs	r0, #1
 80022f4:	f7ff f9f5 	bl	80016e2 <osDelay>
 80022f8:	e7fb      	b.n	80022f2 <StartDefaultTask+0x2>
	...

080022fc <SystemClock_Config>:
{
 80022fc:	b570      	push	{r4, r5, r6, lr}
 80022fe:	b094      	sub	sp, #80	; 0x50
  __HAL_RCC_PWR_CLK_ENABLE();
 8002300:	2300      	movs	r3, #0
 8002302:	4a26      	ldr	r2, [pc, #152]	; (800239c <SystemClock_Config+0xa0>)
 8002304:	9301      	str	r3, [sp, #4]
 8002306:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8002308:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 800230c:	6411      	str	r1, [r2, #64]	; 0x40
 800230e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002310:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8002314:	9201      	str	r2, [sp, #4]
 8002316:	9a01      	ldr	r2, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002318:	4a21      	ldr	r2, [pc, #132]	; (80023a0 <SystemClock_Config+0xa4>)
 800231a:	9302      	str	r3, [sp, #8]
 800231c:	6811      	ldr	r1, [r2, #0]
 800231e:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 8002322:	6011      	str	r1, [r2, #0]
 8002324:	6812      	ldr	r2, [r2, #0]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002326:	2402      	movs	r4, #2
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002328:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
  RCC_OscInitStruct.PLL.PLLN = 72;
 800232c:	2008      	movs	r0, #8
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800232e:	9202      	str	r2, [sp, #8]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002330:	e9cd 430e 	strd	r4, r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLN = 72;
 8002334:	2348      	movs	r3, #72	; 0x48
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002336:	9a02      	ldr	r2, [sp, #8]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002338:	9408      	str	r4, [sp, #32]
  RCC_OscInitStruct.HSICalibrationValue = 16;
 800233a:	2101      	movs	r1, #1
 800233c:	2210      	movs	r2, #16
  RCC_OscInitStruct.PLL.PLLN = 72;
 800233e:	e9cd 0310 	strd	r0, r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002342:	2604      	movs	r6, #4
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002344:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.HSICalibrationValue = 16;
 8002346:	e9cd 120b 	strd	r1, r2, [sp, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800234a:	9412      	str	r4, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800234c:	9613      	str	r6, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800234e:	f7fe fa47 	bl	80007e0 <HAL_RCC_OscConfig>
 8002352:	b100      	cbz	r0, 8002356 <SystemClock_Config+0x5a>
 8002354:	e7fe      	b.n	8002354 <SystemClock_Config+0x58>
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002356:	9005      	str	r0, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002358:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800235c:	4621      	mov	r1, r4
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800235e:	250f      	movs	r5, #15
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002360:	a803      	add	r0, sp, #12
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002362:	e9cd 5403 	strd	r5, r4, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002366:	e9cd 3306 	strd	r3, r3, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800236a:	f7fe fc0d 	bl	8000b88 <HAL_RCC_ClockConfig>
 800236e:	4604      	mov	r4, r0
 8002370:	b100      	cbz	r0, 8002374 <SystemClock_Config+0x78>
 8002372:	e7fe      	b.n	8002372 <SystemClock_Config+0x76>
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8002374:	f7fe fca2 	bl	8000cbc <HAL_RCC_GetHCLKFreq>
 8002378:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800237c:	fbb0 f0f3 	udiv	r0, r0, r3
 8002380:	f7fe f926 	bl	80005d0 <HAL_SYSTICK_Config>
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8002384:	4630      	mov	r0, r6
 8002386:	f7fe f939 	bl	80005fc <HAL_SYSTICK_CLKSourceConfig>
  HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);
 800238a:	4622      	mov	r2, r4
 800238c:	4629      	mov	r1, r5
 800238e:	f04f 30ff 	mov.w	r0, #4294967295
 8002392:	f7fe f8db 	bl	800054c <HAL_NVIC_SetPriority>
}
 8002396:	b014      	add	sp, #80	; 0x50
 8002398:	bd70      	pop	{r4, r5, r6, pc}
 800239a:	bf00      	nop
 800239c:	40023800 	.word	0x40023800
 80023a0:	40007000 	.word	0x40007000

080023a4 <main>:
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b08a      	sub	sp, #40	; 0x28
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80023a8:	2400      	movs	r4, #0
  HAL_Init();
 80023aa:	f7fe f891 	bl	80004d0 <HAL_Init>
  SystemClock_Config();
 80023ae:	f7ff ffa5 	bl	80022fc <SystemClock_Config>
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80023b2:	4b3d      	ldr	r3, [pc, #244]	; (80024a8 <main+0x104>)
 80023b4:	9402      	str	r4, [sp, #8]
 80023b6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 80023b8:	483c      	ldr	r0, [pc, #240]	; (80024ac <main+0x108>)
  huart2.Init.BaudRate = 115200;
 80023ba:	4d3d      	ldr	r5, [pc, #244]	; (80024b0 <main+0x10c>)
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80023bc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80023c0:	631a      	str	r2, [r3, #48]	; 0x30
 80023c2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80023c4:	f002 0280 	and.w	r2, r2, #128	; 0x80
 80023c8:	9202      	str	r2, [sp, #8]
 80023ca:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80023cc:	9403      	str	r4, [sp, #12]
 80023ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80023d0:	f042 0201 	orr.w	r2, r2, #1
 80023d4:	631a      	str	r2, [r3, #48]	; 0x30
 80023d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80023d8:	f002 0201 	and.w	r2, r2, #1
 80023dc:	9203      	str	r2, [sp, #12]
 80023de:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80023e0:	9404      	str	r4, [sp, #16]
 80023e2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80023e4:	f042 0208 	orr.w	r2, r2, #8
 80023e8:	631a      	str	r2, [r3, #48]	; 0x30
 80023ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ec:	f003 0308 	and.w	r3, r3, #8
 80023f0:	9304      	str	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 80023f2:	4622      	mov	r2, r4
 80023f4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80023f8:	9b04      	ldr	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023fa:	2701      	movs	r7, #1
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 80023fc:	f7fe f9ea 	bl	80007d4 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002400:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002404:	4829      	ldr	r0, [pc, #164]	; (80024ac <main+0x108>)
 8002406:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002408:	e9cd 3705 	strd	r3, r7, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800240c:	e9cd 4407 	strd	r4, r4, [sp, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002410:	f7fe f900 	bl	8000614 <HAL_GPIO_Init>
  huart2.Instance = USART2;
 8002414:	4827      	ldr	r0, [pc, #156]	; (80024b4 <main+0x110>)
  huart2.Init.BaudRate = 115200;
 8002416:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 800241a:	e9c0 5300 	strd	r5, r3, [r0]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800241e:	230c      	movs	r3, #12
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002420:	e9c0 4402 	strd	r4, r4, [r0, #8]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002424:	6104      	str	r4, [r0, #16]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002426:	e9c0 3405 	strd	r3, r4, [r0, #20]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800242a:	61c4      	str	r4, [r0, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800242c:	f7ff f8b2 	bl	8001594 <HAL_UART_Init>
 8002430:	b100      	cbz	r0, 8002434 <main+0x90>
 8002432:	e7fe      	b.n	8002432 <main+0x8e>
  hspi1.Instance = SPI1;
 8002434:	4b20      	ldr	r3, [pc, #128]	; (80024b8 <main+0x114>)
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002436:	4921      	ldr	r1, [pc, #132]	; (80024bc <main+0x118>)
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002438:	6298      	str	r0, [r3, #40]	; 0x28
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800243a:	f44f 7282 	mov.w	r2, #260	; 0x104
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800243e:	f44f 7800 	mov.w	r8, #512	; 0x200
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002442:	e9c3 1200 	strd	r1, r2, [r3]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002446:	e9c3 0002 	strd	r0, r0, [r3, #8]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800244a:	e9c3 0004 	strd	r0, r0, [r3, #16]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800244e:	e9c3 8006 	strd	r8, r0, [r3, #24]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002452:	e9c3 0008 	strd	r0, r0, [r3, #32]
  hspi1.Init.CRCPolynomial = 10;
 8002456:	220a      	movs	r2, #10
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002458:	4618      	mov	r0, r3
  hspi1.Init.CRCPolynomial = 10;
 800245a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800245c:	f7fe fd04 	bl	8000e68 <HAL_SPI_Init>
 8002460:	4604      	mov	r4, r0
 8002462:	b100      	cbz	r0, 8002466 <main+0xc2>
 8002464:	e7fe      	b.n	8002464 <main+0xc0>
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8002466:	4e16      	ldr	r6, [pc, #88]	; (80024c0 <main+0x11c>)
 8002468:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800246a:	ad05      	add	r5, sp, #20
 800246c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800246e:	6833      	ldr	r3, [r6, #0]
 8002470:	602b      	str	r3, [r5, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8002472:	4621      	mov	r1, r4
 8002474:	a805      	add	r0, sp, #20
 8002476:	f7ff f91c 	bl	80016b2 <osThreadCreate>
 800247a:	4b12      	ldr	r3, [pc, #72]	; (80024c4 <main+0x120>)
  		xTaskCreate(UART_task1, "Main Task1", 512, NULL, 1, NULL);
 800247c:	4912      	ldr	r1, [pc, #72]	; (80024c8 <main+0x124>)
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800247e:	6018      	str	r0, [r3, #0]
  		xTaskCreate(UART_task1, "Main Task1", 512, NULL, 1, NULL);
 8002480:	4642      	mov	r2, r8
 8002482:	4623      	mov	r3, r4
 8002484:	e9cd 7400 	strd	r7, r4, [sp]
 8002488:	4810      	ldr	r0, [pc, #64]	; (80024cc <main+0x128>)
 800248a:	f7ff fc7f 	bl	8001d8c <xTaskCreate>
  		xTaskCreate(SPI_task2, "Main Task2", 512, NULL, 0, NULL);
 800248e:	4623      	mov	r3, r4
 8002490:	4642      	mov	r2, r8
 8002492:	490f      	ldr	r1, [pc, #60]	; (80024d0 <main+0x12c>)
 8002494:	480f      	ldr	r0, [pc, #60]	; (80024d4 <main+0x130>)
 8002496:	e9cd 4400 	strd	r4, r4, [sp]
 800249a:	f7ff fc77 	bl	8001d8c <xTaskCreate>
  		vTaskStartScheduler();
 800249e:	f7ff fd49 	bl	8001f34 <vTaskStartScheduler>
  osKernelStart();
 80024a2:	f7ff f901 	bl	80016a8 <osKernelStart>
 80024a6:	e7fe      	b.n	80024a6 <main+0x102>
 80024a8:	40023800 	.word	0x40023800
 80024ac:	40020c00 	.word	0x40020c00
 80024b0:	40004400 	.word	0x40004400
 80024b4:	20003dd8 	.word	0x20003dd8
 80024b8:	20003d80 	.word	0x20003d80
 80024bc:	40013000 	.word	0x40013000
 80024c0:	08002760 	.word	0x08002760
 80024c4:	20003d7c 	.word	0x20003d7c
 80024c8:	08002779 	.word	0x08002779
 80024cc:	080022a9 	.word	0x080022a9
 80024d0:	08002784 	.word	0x08002784
 80024d4:	080022b5 	.word	0x080022b5

080024d8 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
/* USER CODE BEGIN Callback 0 */

/* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80024d8:	6802      	ldr	r2, [r0, #0]
 80024da:	4b03      	ldr	r3, [pc, #12]	; (80024e8 <HAL_TIM_PeriodElapsedCallback+0x10>)
 80024dc:	429a      	cmp	r2, r3
 80024de:	d101      	bne.n	80024e4 <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
 80024e0:	f7fe b810 	b.w	8000504 <HAL_IncTick>
  }
/* USER CODE BEGIN Callback 1 */

/* USER CODE END Callback 1 */
}
 80024e4:	4770      	bx	lr
 80024e6:	bf00      	nop
 80024e8:	40010000 	.word	0x40010000

080024ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80024ec:	b508      	push	{r3, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80024ee:	2003      	movs	r0, #3
 80024f0:	f7fe f81a 	bl	8000528 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 80024f4:	2200      	movs	r2, #0
 80024f6:	4611      	mov	r1, r2
 80024f8:	f06f 000b 	mvn.w	r0, #11
 80024fc:	f7fe f826 	bl	800054c <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8002500:	2200      	movs	r2, #0
 8002502:	4611      	mov	r1, r2
 8002504:	f06f 000a 	mvn.w	r0, #10
 8002508:	f7fe f820 	bl	800054c <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 800250c:	2200      	movs	r2, #0
 800250e:	4611      	mov	r1, r2
 8002510:	f06f 0009 	mvn.w	r0, #9
 8002514:	f7fe f81a 	bl	800054c <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8002518:	2200      	movs	r2, #0
 800251a:	4611      	mov	r1, r2
 800251c:	f06f 0004 	mvn.w	r0, #4
 8002520:	f7fe f814 	bl	800054c <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8002524:	2200      	movs	r2, #0
 8002526:	4611      	mov	r1, r2
 8002528:	f06f 0003 	mvn.w	r0, #3
 800252c:	f7fe f80e 	bl	800054c <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002530:	2200      	movs	r2, #0
 8002532:	210f      	movs	r1, #15
 8002534:	f06f 0001 	mvn.w	r0, #1
 8002538:	f7fe f808 	bl	800054c <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);
 800253c:	2200      	movs	r2, #0
 800253e:	210f      	movs	r1, #15
 8002540:	f04f 30ff 	mov.w	r0, #4294967295

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002544:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);
 8002548:	f7fe b800 	b.w	800054c <HAL_NVIC_SetPriority>

0800254c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800254c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hspi->Instance==SPI1)
 800254e:	6802      	ldr	r2, [r0, #0]
 8002550:	4b0f      	ldr	r3, [pc, #60]	; (8002590 <HAL_SPI_MspInit+0x44>)
 8002552:	429a      	cmp	r2, r3
 8002554:	d119      	bne.n	800258a <HAL_SPI_MspInit+0x3e>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002556:	2100      	movs	r1, #0
 8002558:	f503 3384 	add.w	r3, r3, #67584	; 0x10800
 800255c:	9100      	str	r1, [sp, #0]
 800255e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002560:	480c      	ldr	r0, [pc, #48]	; (8002594 <HAL_SPI_MspInit+0x48>)
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002562:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002566:	645a      	str	r2, [r3, #68]	; 0x44
 8002568:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800256a:	9103      	str	r1, [sp, #12]
    __HAL_RCC_SPI1_CLK_ENABLE();
 800256c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002570:	9300      	str	r3, [sp, #0]
 8002572:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002574:	22e0      	movs	r2, #224	; 0xe0
 8002576:	2302      	movs	r3, #2
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002578:	2103      	movs	r1, #3
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800257a:	e9cd 2301 	strd	r2, r3, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800257e:	2305      	movs	r3, #5
 8002580:	e9cd 1304 	strd	r1, r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002584:	a901      	add	r1, sp, #4
 8002586:	f7fe f845 	bl	8000614 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800258a:	b007      	add	sp, #28
 800258c:	f85d fb04 	ldr.w	pc, [sp], #4
 8002590:	40013000 	.word	0x40013000
 8002594:	40020000 	.word	0x40020000

08002598 <HAL_UART_MspInit>:
  }

}

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002598:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART2)
 800259a:	6802      	ldr	r2, [r0, #0]
 800259c:	4b0f      	ldr	r3, [pc, #60]	; (80025dc <HAL_UART_MspInit+0x44>)
 800259e:	429a      	cmp	r2, r3
 80025a0:	d119      	bne.n	80025d6 <HAL_UART_MspInit+0x3e>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80025a2:	2300      	movs	r3, #0
 80025a4:	9300      	str	r3, [sp, #0]
 80025a6:	4b0e      	ldr	r3, [pc, #56]	; (80025e0 <HAL_UART_MspInit+0x48>)
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025a8:	480e      	ldr	r0, [pc, #56]	; (80025e4 <HAL_UART_MspInit+0x4c>)
    __HAL_RCC_USART2_CLK_ENABLE();
 80025aa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80025ac:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80025b0:	641a      	str	r2, [r3, #64]	; 0x40
 80025b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025b8:	9300      	str	r3, [sp, #0]
 80025ba:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025bc:	220c      	movs	r2, #12
 80025be:	2302      	movs	r3, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025c0:	2101      	movs	r1, #1
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025c2:	e9cd 2301 	strd	r2, r3, [sp, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025c6:	2303      	movs	r3, #3
 80025c8:	e9cd 1303 	strd	r1, r3, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80025cc:	2307      	movs	r3, #7
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025ce:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80025d0:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025d2:	f7fe f81f 	bl	8000614 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80025d6:	b007      	add	sp, #28
 80025d8:	f85d fb04 	ldr.w	pc, [sp], #4
 80025dc:	40004400 	.word	0x40004400
 80025e0:	40023800 	.word	0x40023800
 80025e4:	40020000 	.word	0x40020000

080025e8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priorty.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80025e8:	b530      	push	{r4, r5, lr}
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0); 
 80025ea:	4601      	mov	r1, r0
{
 80025ec:	b089      	sub	sp, #36	; 0x24
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0); 
 80025ee:	2200      	movs	r2, #0
 80025f0:	2019      	movs	r0, #25
 80025f2:	f7fd ffab 	bl	800054c <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn); 
 80025f6:	2019      	movs	r0, #25
 80025f8:	f7fd ffdc 	bl	80005b4 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80025fc:	2500      	movs	r5, #0
 80025fe:	4b15      	ldr	r3, [pc, #84]	; (8002654 <HAL_InitTick+0x6c>)
 8002600:	9502      	str	r5, [sp, #8]
 8002602:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8002604:	4c14      	ldr	r4, [pc, #80]	; (8002658 <HAL_InitTick+0x70>)
  __HAL_RCC_TIM1_CLK_ENABLE();
 8002606:	f042 0201 	orr.w	r2, r2, #1
 800260a:	645a      	str	r2, [r3, #68]	; 0x44
 800260c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800260e:	f003 0301 	and.w	r3, r3, #1
 8002612:	9302      	str	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002614:	a901      	add	r1, sp, #4
 8002616:	a803      	add	r0, sp, #12
  __HAL_RCC_TIM1_CLK_ENABLE();
 8002618:	9b02      	ldr	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800261a:	f7fe fb75 	bl	8000d08 <HAL_RCC_GetClockConfig>
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 800261e:	f7fe fb63 	bl	8000ce8 <HAL_RCC_GetPCLK2Freq>
  htim1.Instance = TIM1;
 8002622:	4b0e      	ldr	r3, [pc, #56]	; (800265c <HAL_InitTick+0x74>)
 8002624:	6023      	str	r3, [r4, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 8002626:	f240 33e7 	movw	r3, #999	; 0x3e7
 800262a:	60e3      	str	r3, [r4, #12]
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 800262c:	0040      	lsls	r0, r0, #1
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 800262e:	4b0c      	ldr	r3, [pc, #48]	; (8002660 <HAL_InitTick+0x78>)
 8002630:	fbb0 f0f3 	udiv	r0, r0, r3
 8002634:	3801      	subs	r0, #1
  htim1.Init.Prescaler = uwPrescalerValue;
 8002636:	6060      	str	r0, [r4, #4]
  htim1.Init.ClockDivision = 0;
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8002638:	4620      	mov	r0, r4
  htim1.Init.ClockDivision = 0;
 800263a:	6125      	str	r5, [r4, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800263c:	60a5      	str	r5, [r4, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 800263e:	f7fe fef5 	bl	800142c <HAL_TIM_Base_Init>
 8002642:	b920      	cbnz	r0, 800264e <HAL_InitTick+0x66>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8002644:	4620      	mov	r0, r4
 8002646:	f7fe fdd4 	bl	80011f2 <HAL_TIM_Base_Start_IT>
  }
  
  /* Return function status */
  return HAL_ERROR;
}
 800264a:	b009      	add	sp, #36	; 0x24
 800264c:	bd30      	pop	{r4, r5, pc}
  return HAL_ERROR;
 800264e:	2001      	movs	r0, #1
 8002650:	e7fb      	b.n	800264a <HAL_InitTick+0x62>
 8002652:	bf00      	nop
 8002654:	40023800 	.word	0x40023800
 8002658:	20003e18 	.word	0x20003e18
 800265c:	40010000 	.word	0x40010000
 8002660:	000f4240 	.word	0x000f4240

08002664 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002664:	4770      	bx	lr

08002666 <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 8002666:	e7fe      	b.n	8002666 <HardFault_Handler>

08002668 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 8002668:	e7fe      	b.n	8002668 <MemManage_Handler>

0800266a <BusFault_Handler>:

/**
* @brief This function handles Pre-fetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 800266a:	e7fe      	b.n	800266a <BusFault_Handler>

0800266c <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 800266c:	e7fe      	b.n	800266c <UsageFault_Handler>

0800266e <DebugMon_Handler>:
 800266e:	4770      	bx	lr

08002670 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  osSystickHandler();
 8002670:	f7ff b83f 	b.w	80016f2 <osSystickHandler>

08002674 <TIM1_UP_TIM10_IRQHandler>:
void TIM1_UP_TIM10_IRQHandler(void)
{
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002674:	4801      	ldr	r0, [pc, #4]	; (800267c <TIM1_UP_TIM10_IRQHandler+0x8>)
 8002676:	f7fe bdd0 	b.w	800121a <HAL_TIM_IRQHandler>
 800267a:	bf00      	nop
 800267c:	20003e18 	.word	0x20003e18

08002680 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002680:	4b05      	ldr	r3, [pc, #20]	; (8002698 <SystemInit+0x18>)
 8002682:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002686:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 800268a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800268e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002692:	609a      	str	r2, [r3, #8]
#endif
}
 8002694:	4770      	bx	lr
 8002696:	bf00      	nop
 8002698:	e000ed00 	.word	0xe000ed00

0800269c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800269c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80026d4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80026a0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80026a2:	e003      	b.n	80026ac <LoopCopyDataInit>

080026a4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80026a4:	4b0c      	ldr	r3, [pc, #48]	; (80026d8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80026a6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80026a8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80026aa:	3104      	adds	r1, #4

080026ac <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80026ac:	480b      	ldr	r0, [pc, #44]	; (80026dc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80026ae:	4b0c      	ldr	r3, [pc, #48]	; (80026e0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80026b0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80026b2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80026b4:	d3f6      	bcc.n	80026a4 <CopyDataInit>
  ldr  r2, =_sbss
 80026b6:	4a0b      	ldr	r2, [pc, #44]	; (80026e4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80026b8:	e002      	b.n	80026c0 <LoopFillZerobss>

080026ba <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80026ba:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80026bc:	f842 3b04 	str.w	r3, [r2], #4

080026c0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80026c0:	4b09      	ldr	r3, [pc, #36]	; (80026e8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80026c2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80026c4:	d3f9      	bcc.n	80026ba <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80026c6:	f7ff ffdb 	bl	8002680 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80026ca:	f000 f811 	bl	80026f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80026ce:	f7ff fe69 	bl	80023a4 <main>
  bx  lr    
 80026d2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80026d4:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80026d8:	080027c4 	.word	0x080027c4
  ldr  r0, =_sdata
 80026dc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80026e0:	20000010 	.word	0x20000010
  ldr  r2, =_sbss
 80026e4:	20000010 	.word	0x20000010
  ldr  r3, = _ebss
 80026e8:	20003e58 	.word	0x20003e58

080026ec <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80026ec:	e7fe      	b.n	80026ec <ADC_IRQHandler>
	...

080026f0 <__libc_init_array>:
 80026f0:	b570      	push	{r4, r5, r6, lr}
 80026f2:	4e0d      	ldr	r6, [pc, #52]	; (8002728 <__libc_init_array+0x38>)
 80026f4:	4c0d      	ldr	r4, [pc, #52]	; (800272c <__libc_init_array+0x3c>)
 80026f6:	1ba4      	subs	r4, r4, r6
 80026f8:	10a4      	asrs	r4, r4, #2
 80026fa:	2500      	movs	r5, #0
 80026fc:	42a5      	cmp	r5, r4
 80026fe:	d109      	bne.n	8002714 <__libc_init_array+0x24>
 8002700:	4e0b      	ldr	r6, [pc, #44]	; (8002730 <__libc_init_array+0x40>)
 8002702:	4c0c      	ldr	r4, [pc, #48]	; (8002734 <__libc_init_array+0x44>)
 8002704:	f000 f820 	bl	8002748 <_init>
 8002708:	1ba4      	subs	r4, r4, r6
 800270a:	10a4      	asrs	r4, r4, #2
 800270c:	2500      	movs	r5, #0
 800270e:	42a5      	cmp	r5, r4
 8002710:	d105      	bne.n	800271e <__libc_init_array+0x2e>
 8002712:	bd70      	pop	{r4, r5, r6, pc}
 8002714:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002718:	4798      	blx	r3
 800271a:	3501      	adds	r5, #1
 800271c:	e7ee      	b.n	80026fc <__libc_init_array+0xc>
 800271e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002722:	4798      	blx	r3
 8002724:	3501      	adds	r5, #1
 8002726:	e7f2      	b.n	800270e <__libc_init_array+0x1e>
 8002728:	080027bc 	.word	0x080027bc
 800272c:	080027bc 	.word	0x080027bc
 8002730:	080027bc 	.word	0x080027bc
 8002734:	080027c0 	.word	0x080027c0

08002738 <memset>:
 8002738:	4402      	add	r2, r0
 800273a:	4603      	mov	r3, r0
 800273c:	4293      	cmp	r3, r2
 800273e:	d100      	bne.n	8002742 <memset+0xa>
 8002740:	4770      	bx	lr
 8002742:	f803 1b01 	strb.w	r1, [r3], #1
 8002746:	e7f9      	b.n	800273c <memset+0x4>

08002748 <_init>:
 8002748:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800274a:	bf00      	nop
 800274c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800274e:	bc08      	pop	{r3}
 8002750:	469e      	mov	lr, r3
 8002752:	4770      	bx	lr

08002754 <_fini>:
 8002754:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002756:	bf00      	nop
 8002758:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800275a:	bc08      	pop	{r3}
 800275c:	469e      	mov	lr, r3
 800275e:	4770      	bx	lr
